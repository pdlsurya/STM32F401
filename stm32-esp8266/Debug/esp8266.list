
esp8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c11c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001624  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8e0  0800d8e0  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8e0  0800d8e0  0001d8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8e8  0800d8e8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8e8  0800d8e8  0001d8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8ec  0800d8ec  0001d8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800d8f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020dc  20000180  0800da6c  00020180  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000225c  0800da6c  0002225c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d209  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000495c  00000000  00000000  0003d3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  00041d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013e2  00000000  00000000  00043710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf4c  00000000  00000000  00044af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002123a  00000000  00000000  00060a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000971ff  00000000  00000000  00081c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000078d8  00000000  00000000  00118e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00120750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c2a4 	.word	0x0800c2a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800c2a4 	.word	0x0800c2a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ce:	f000 b9bb 	b.w	8000648 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <rx_cb_0>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void rx_cb_0(esp8266_rx_data_t *data) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	USB_SerialPrint("\nIP Data received on IP link->%d\nData->%s\n\n",
			data->link_id, data->data);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781b      	ldrb	r3, [r3, #0]
	USB_SerialPrint("\nIP Data received on IP link->%d\nData->%s\n\n",
 8000658:	4619      	mov	r1, r3
			data->link_id, data->data);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3304      	adds	r3, #4
	USB_SerialPrint("\nIP Data received on IP link->%d\nData->%s\n\n",
 800065e:	461a      	mov	r2, r3
 8000660:	4805      	ldr	r0, [pc, #20]	; (8000678 <rx_cb_0+0x2c>)
 8000662:	f000 ff49 	bl	80014f8 <USB_SerialPrint>
	esp8266_send_ip_data(LOCAL_LINK, (uint8_t*) "ACK from STM32!", 15);
 8000666:	220f      	movs	r2, #15
 8000668:	4904      	ldr	r1, [pc, #16]	; (800067c <rx_cb_0+0x30>)
 800066a:	2000      	movs	r0, #0
 800066c:	f001 f9d0 	bl	8001a10 <esp8266_send_ip_data>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	0800c2bc 	.word	0x0800c2bc
 800067c:	0800c2e8 	.word	0x0800c2e8

08000680 <mqtt_cb>:

void mqtt_cb(mqtt_data_t *mqtt_data) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	USB_SerialPrint("\nMQTT Message received on MQTT link->%d\nTopic->%s\n",
			mqtt_data->link_id, mqtt_data->topic);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	781b      	ldrb	r3, [r3, #0]
	USB_SerialPrint("\nMQTT Message received on MQTT link->%d\nTopic->%s\n",
 800068c:	4619      	mov	r1, r3
			mqtt_data->link_id, mqtt_data->topic);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	3302      	adds	r3, #2
	USB_SerialPrint("\nMQTT Message received on MQTT link->%d\nTopic->%s\n",
 8000692:	461a      	mov	r2, r3
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <mqtt_cb+0x30>)
 8000696:	f000 ff2f 	bl	80014f8 <USB_SerialPrint>
	USB_SerialPrint("Message->%s\n\n", mqtt_data->data);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3316      	adds	r3, #22
 800069e:	4619      	mov	r1, r3
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <mqtt_cb+0x34>)
 80006a2:	f000 ff29 	bl	80014f8 <USB_SerialPrint>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	0800c2f8 	.word	0x0800c2f8
 80006b4:	0800c32c 	.word	0x0800c32c

080006b8 <mqtt_config>:

static bool mqtt_config() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0

	mqtt_user_cfg_t user_cfg = { 0 };
 80006be:	463b      	mov	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]

	user_cfg.link_id = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	703b      	strb	r3, [r7, #0]
	user_cfg.scheme = 1;
 80006d2:	2301      	movs	r3, #1
 80006d4:	707b      	strb	r3, [r7, #1]
	user_cfg.client_id = "STM32";
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <mqtt_config+0x48>)
 80006d8:	607b      	str	r3, [r7, #4]
	user_cfg.username = "ukjehupn";
 80006da:	4b0a      	ldr	r3, [pc, #40]	; (8000704 <mqtt_config+0x4c>)
 80006dc:	60bb      	str	r3, [r7, #8]
	user_cfg.password = "bHRdnu3SgB2y";
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <mqtt_config+0x50>)
 80006e0:	60fb      	str	r3, [r7, #12]
	user_cfg.cert_key_id = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	743b      	strb	r3, [r7, #16]
	user_cfg.ca_id = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	747b      	strb	r3, [r7, #17]
	user_cfg.path = "";
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <mqtt_config+0x54>)
 80006ec:	617b      	str	r3, [r7, #20]
	return esp8266_mqtt_user_config(&user_cfg);
 80006ee:	463b      	mov	r3, r7
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 ff4f 	bl	8001594 <esp8266_mqtt_user_config>
 80006f6:	4603      	mov	r3, r0

}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	0800c33c 	.word	0x0800c33c
 8000704:	0800c344 	.word	0x0800c344
 8000708:	0800c350 	.word	0x0800c350
 800070c:	0800c360 	.word	0x0800c360

08000710 <mqtt_connect>:

static bool mqtt_connect() {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
	mqtt_connect_params_t conn_params;
	conn_params.link_id = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	713b      	strb	r3, [r7, #4]
	conn_params.broker = "m10.cloudmqtt.com";
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <mqtt_connect+0x2c>)
 800071c:	60bb      	str	r3, [r7, #8]
	conn_params.port = 12276;
 800071e:	f642 73f4 	movw	r3, #12276	; 0x2ff4
 8000722:	81bb      	strh	r3, [r7, #12]
	conn_params.reconnect = false;
 8000724:	2300      	movs	r3, #0
 8000726:	73bb      	strb	r3, [r7, #14]
	return esp8266_mqtt_connect(&conn_params);
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4618      	mov	r0, r3
 800072c:	f000 ff80 	bl	8001630 <esp8266_mqtt_connect>
 8000730:	4603      	mov	r3, r0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	0800c364 	.word	0x0800c364

08000740 <mqtt_subscribe>:

static bool mqtt_subscribe() {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
	mqtt_subscribe_params_t subs_params;
	subs_params.link_id = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	713b      	strb	r3, [r7, #4]
	subs_params.topic = "/mytopic";
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <mqtt_subscribe+0x24>)
 800074c:	60bb      	str	r3, [r7, #8]
	subs_params.qos = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	733b      	strb	r3, [r7, #12]
	return esp8266_mqtt_subscribe(&subs_params);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f000 ff99 	bl	800168c <esp8266_mqtt_subscribe>
 800075a:	4603      	mov	r3, r0

}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0800c378 	.word	0x0800c378

08000768 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800076e:	f001 fdd3 	bl	8002318 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000772:	f000 f893 	bl	800089c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000776:	f000 f973 	bl	8000a60 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800077a:	f000 f947 	bl	8000a0c <MX_USART1_UART_Init>
	MX_TIM2_Init();
 800077e:	f000 f8f9 	bl	8000974 <MX_TIM2_Init>
	HAL_TIM_Base_Start(&htim2);
 8000782:	4839      	ldr	r0, [pc, #228]	; (8000868 <main+0x100>)
 8000784:	f004 fd50 	bl	8005228 <HAL_TIM_Base_Start>
	/* USER CODE BEGIN 2 */
	USB_SerialInit();
 8000788:	f000 feb0 	bl	80014ec <USB_SerialInit>
	oled_init();
 800078c:	f001 fc14 	bl	8001fb8 <oled_init>
	if (!esp8266_init(&huart1)) {
 8000790:	4836      	ldr	r0, [pc, #216]	; (800086c <main+0x104>)
 8000792:	f001 faab 	bl	8001cec <esp8266_init>
 8000796:	4603      	mov	r3, r0
 8000798:	f083 0301 	eor.w	r3, r3, #1
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <main+0x3e>
		Error_Handler();
 80007a2:	f000 f9bd 	bl	8000b20 <Error_Handler>
	}
	esp8266_mqtt_cb_register(0, mqtt_cb);
 80007a6:	4932      	ldr	r1, [pc, #200]	; (8000870 <main+0x108>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 ff31 	bl	8001610 <esp8266_mqtt_cb_register>
	if (mqtt_config()) {
 80007ae:	f7ff ff83 	bl	80006b8 <mqtt_config>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d01b      	beq.n	80007f0 <main+0x88>
		USB_SerialPrint("MQTT user config successful!\n");
 80007b8:	482e      	ldr	r0, [pc, #184]	; (8000874 <main+0x10c>)
 80007ba:	f000 fe9d 	bl	80014f8 <USB_SerialPrint>
		if (mqtt_connect()) {
 80007be:	f7ff ffa7 	bl	8000710 <mqtt_connect>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d00f      	beq.n	80007e8 <main+0x80>
			USB_SerialPrint("MQTT connection successful!\n");
 80007c8:	482b      	ldr	r0, [pc, #172]	; (8000878 <main+0x110>)
 80007ca:	f000 fe95 	bl	80014f8 <USB_SerialPrint>
			if (mqtt_subscribe()) {
 80007ce:	f7ff ffb7 	bl	8000740 <mqtt_subscribe>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d003      	beq.n	80007e0 <main+0x78>
				USB_SerialPrint("MQTT Subscribed!\n");
 80007d8:	4828      	ldr	r0, [pc, #160]	; (800087c <main+0x114>)
 80007da:	f000 fe8d 	bl	80014f8 <USB_SerialPrint>
 80007de:	e00a      	b.n	80007f6 <main+0x8e>
			} else
				USB_SerialPrint("MQTT Subscribe failed!\n");
 80007e0:	4827      	ldr	r0, [pc, #156]	; (8000880 <main+0x118>)
 80007e2:	f000 fe89 	bl	80014f8 <USB_SerialPrint>
 80007e6:	e006      	b.n	80007f6 <main+0x8e>
		} else
			USB_SerialPrint("MQTT connect failed!\n");
 80007e8:	4826      	ldr	r0, [pc, #152]	; (8000884 <main+0x11c>)
 80007ea:	f000 fe85 	bl	80014f8 <USB_SerialPrint>
 80007ee:	e002      	b.n	80007f6 <main+0x8e>
	} else
		USB_SerialPrint("MQTT user config failed!\n");
 80007f0:	4825      	ldr	r0, [pc, #148]	; (8000888 <main+0x120>)
 80007f2:	f000 fe81 	bl	80014f8 <USB_SerialPrint>

	if (!esp8266_udp_begin(LOCAL_LINK, REMOTE_IP, REMOTE_PORT, LOCAL_PORT, 2)) {
 80007f6:	2302      	movs	r3, #2
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	f241 0392 	movw	r3, #4242	; 0x1092
 80007fe:	f241 62e2 	movw	r2, #5858	; 0x16e2
 8000802:	4922      	ldr	r1, [pc, #136]	; (800088c <main+0x124>)
 8000804:	2000      	movs	r0, #0
 8000806:	f001 f94b 	bl	8001aa0 <esp8266_udp_begin>
 800080a:	4603      	mov	r3, r0
 800080c:	f083 0301 	eor.w	r3, r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <main+0xb2>
		Error_Handler();
 8000816:	f000 f983 	bl	8000b20 <Error_Handler>
	}
	esp8266_cb_register_ip(LOCAL_LINK, rx_cb_0);
 800081a:	491d      	ldr	r1, [pc, #116]	; (8000890 <main+0x128>)
 800081c:	2000      	movs	r0, #0
 800081e:	f000 ff5f 	bl	80016e0 <esp8266_cb_register_ip>
	if (!ntp_begin()) {
 8000822:	f000 fcf1 	bl	8001208 <ntp_begin>
 8000826:	4603      	mov	r3, r0
 8000828:	f083 0301 	eor.w	r3, r3, #1
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <main+0xce>
		Error_Handler();
 8000832:	f000 f975 	bl	8000b20 <Error_Handler>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (HAL_GetTick() - lastTicks >= 1000) {
 8000836:	f001 fdd5 	bl	80023e4 <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <main+0x12c>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000846:	d30b      	bcc.n	8000860 <main+0xf8>
			lastTicks = HAL_GetTick();
 8000848:	f001 fdcc 	bl	80023e4 <HAL_GetTick>
 800084c:	4603      	mov	r3, r0
 800084e:	4a11      	ldr	r2, [pc, #68]	; (8000894 <main+0x12c>)
 8000850:	6013      	str	r3, [r2, #0]
			ntp_update_time();
 8000852:	f000 fc37 	bl	80010c4 <ntp_update_time>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800085a:	480f      	ldr	r0, [pc, #60]	; (8000898 <main+0x130>)
 800085c:	f002 f933 	bl	8002ac6 <HAL_GPIO_TogglePin>
		}

		esp8266_recv();
 8000860:	f000 ffc8 	bl	80017f4 <esp8266_recv>
		if (HAL_GetTick() - lastTicks >= 1000) {
 8000864:	e7e7      	b.n	8000836 <main+0xce>
 8000866:	bf00      	nop
 8000868:	2000019c 	.word	0x2000019c
 800086c:	200001e4 	.word	0x200001e4
 8000870:	08000681 	.word	0x08000681
 8000874:	0800c384 	.word	0x0800c384
 8000878:	0800c3a4 	.word	0x0800c3a4
 800087c:	0800c3c4 	.word	0x0800c3c4
 8000880:	0800c3d8 	.word	0x0800c3d8
 8000884:	0800c3f0 	.word	0x0800c3f0
 8000888:	0800c408 	.word	0x0800c408
 800088c:	0800c424 	.word	0x0800c424
 8000890:	0800064d 	.word	0x0800064d
 8000894:	2000022c 	.word	0x2000022c
 8000898:	40020800 	.word	0x40020800

0800089c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f00a fb6c 	bl	800af88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <SystemClock_Config+0xd0>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a28      	ldr	r2, [pc, #160]	; (800096c <SystemClock_Config+0xd0>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b26      	ldr	r3, [pc, #152]	; (800096c <SystemClock_Config+0xd0>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <SystemClock_Config+0xd4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e8:	4a21      	ldr	r2, [pc, #132]	; (8000970 <SystemClock_Config+0xd4>)
 80008ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <SystemClock_Config+0xd4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000910:	2319      	movs	r3, #25
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000914:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000918:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800091a:	2304      	movs	r3, #4
 800091c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800091e:	2307      	movs	r3, #7
 8000920:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	4618      	mov	r0, r3
 8000928:	f003 ffd6 	bl	80048d8 <HAL_RCC_OscConfig>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0x9a>
		Error_Handler();
 8000932:	f000 f8f5 	bl	8000b20 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2302      	movs	r3, #2
 800093c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000946:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	2102      	movs	r1, #2
 8000952:	4618      	mov	r0, r3
 8000954:	f004 fa38 	bl	8004dc8 <HAL_RCC_ClockConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0xc6>
		Error_Handler();
 800095e:	f000 f8df 	bl	8000b20 <Error_Handler>
	}
}
 8000962:	bf00      	nop
 8000964:	3750      	adds	r7, #80	; 0x50
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800097a:	f107 0308 	add.w	r3, r7, #8
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000988:	463b      	mov	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_TIM2_Init+0x94>)
 8000992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000996:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 84 - 1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_TIM2_Init+0x94>)
 800099a:	2253      	movs	r2, #83	; 0x53
 800099c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_TIM2_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_TIM2_Init+0x94>)
 80009a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009aa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_TIM2_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_TIM2_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009b8:	4813      	ldr	r0, [pc, #76]	; (8000a08 <MX_TIM2_Init+0x94>)
 80009ba:	f004 fbe5 	bl	8005188 <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x54>
		Error_Handler();
 80009c4:	f000 f8ac 	bl	8000b20 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009cc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	480c      	ldr	r0, [pc, #48]	; (8000a08 <MX_TIM2_Init+0x94>)
 80009d6:	f004 fc81 	bl	80052dc <HAL_TIM_ConfigClockSource>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x70>
		Error_Handler();
 80009e0:	f000 f89e 	bl	8000b20 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_TIM2_Init+0x94>)
 80009f2:	f004 fe61 	bl	80056b8 <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80009fc:	f000 f890 	bl	8000b20 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000019c 	.word	0x2000019c

08000a0c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_USART1_UART_Init+0x50>)
 8000a14:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART1_UART_Init+0x4c>)
 8000a44:	f004 fea6 	bl	8005794 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a4e:	f000 f867 	bl	8000b20 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001e4 	.word	0x200001e4
 8000a5c:	40011000 	.word	0x40011000

08000a60 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
 8000a7a:	4b27      	ldr	r3, [pc, #156]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a26      	ldr	r2, [pc, #152]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b24      	ldr	r3, [pc, #144]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_GPIO_Init+0xb8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000aee:	f001 ffd1 	bl	8002a94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_GPIO_Init+0xbc>)
 8000b0c:	f001 fe3e 	bl	800278c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	; 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020800 	.word	0x40020800

08000b20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b28:	e7fe      	b.n	8000b28 <Error_Handler+0x8>
	...

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x4c>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800

08000b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_I2C_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12c      	bne.n	8000bf8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc0:	2312      	movs	r3, #18
 8000bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <HAL_I2C_MspInit+0x8c>)
 8000bd8:	f001 fdd8 	bl	800278c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <HAL_I2C_MspInit+0x88>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40005400 	.word	0x40005400
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020400 	.word	0x40020400

08000c0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c1c:	d10d      	bne.n	8000c3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_TIM_Base_MspInit+0x3c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_TIM_Base_MspInit+0x3c>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_TIM_Base_MspInit+0x3c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a1d      	ldr	r2, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0x94>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d134      	bne.n	8000cd8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a1b      	ldr	r2, [pc, #108]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <HAL_UART_MspInit+0x98>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <HAL_UART_MspInit+0x9c>)
 8000cc4:	f001 fd62 	bl	800278c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2025      	movs	r0, #37	; 0x25
 8000cce:	f001 fc94 	bl	80025fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cd2:	2025      	movs	r0, #37	; 0x25
 8000cd4:	f001 fcad 	bl	8002632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40011000 	.word	0x40011000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020000 	.word	0x40020000

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d38:	f001 fb40 	bl	80023bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <USART1_IRQHandler+0x10>)
 8000d46:	f004 fe25 	bl	8005994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200001e4 	.word	0x200001e4

08000d54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <OTG_FS_IRQHandler+0x10>)
 8000d5a:	f002 fcb0 	bl	80036be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20001a0c 	.word	0x20001a0c

08000d68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return 1;
 8000d6c:	2301      	movs	r3, #1
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <_kill>:

int _kill(int pid, int sig)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d82:	f00a f9df 	bl	800b144 <__errno>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2216      	movs	r2, #22
 8000d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <_exit>:

void _exit (int status)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ffe7 	bl	8000d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000daa:	e7fe      	b.n	8000daa <_exit+0x12>

08000dac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e00a      	b.n	8000dd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dbe:	f3af 8000 	nop.w
 8000dc2:	4601      	mov	r1, r0
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	60ba      	str	r2, [r7, #8]
 8000dca:	b2ca      	uxtb	r2, r1
 8000dcc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf0      	blt.n	8000dbe <_read+0x12>
  }

  return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	60f8      	str	r0, [r7, #12]
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e009      	b.n	8000e0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	60ba      	str	r2, [r7, #8]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	697a      	ldr	r2, [r7, #20]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	dbf1      	blt.n	8000df8 <_write+0x12>
  }
  return len;
 8000e14:	687b      	ldr	r3, [r7, #4]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <_close>:

int _close(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e46:	605a      	str	r2, [r3, #4]
  return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_isatty>:

int _isatty(int file)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
	...

08000e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e90:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <_sbrk+0x5c>)
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <_sbrk+0x60>)
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <_sbrk+0x64>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d102      	bne.n	8000eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <_sbrk+0x64>)
 8000ea6:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <_sbrk+0x68>)
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eaa:	4b10      	ldr	r3, [pc, #64]	; (8000eec <_sbrk+0x64>)
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d207      	bcs.n	8000ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb8:	f00a f944 	bl	800b144 <__errno>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ec6:	e009      	b.n	8000edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <_sbrk+0x64>)
 8000ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20010000 	.word	0x20010000
 8000ee8:	00000400 	.word	0x00000400
 8000eec:	20000230 	.word	0x20000230
 8000ef0:	20002260 	.word	0x20002260

08000ef4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <SystemInit+0x20>)
 8000efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000efe:	4a05      	ldr	r2, [pc, #20]	; (8000f14 <SystemInit+0x20>)
 8000f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f1c:	f7ff ffea 	bl	8000ef4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f22:	490d      	ldr	r1, [pc, #52]	; (8000f58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f38:	4c0a      	ldr	r4, [pc, #40]	; (8000f64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f46:	f00a f903 	bl	800b150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4a:	f7ff fc0d 	bl	8000768 <main>
  bx  lr    
 8000f4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f50:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f58:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8000f5c:	0800d8f0 	.word	0x0800d8f0
  ldr r2, =_sbss
 8000f60:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8000f64:	2000225c 	.word	0x2000225c

08000f68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f68:	e7fe      	b.n	8000f68 <ADC_IRQHandler>
	...

08000f6c <ntp_request_server>:
static uint32_t lastUpdate;
static uint32_t updateInterval = 120000; // in ms
static uint32_t requestInterval = 5000; //ms
static uint32_t lastRequested;

static void ntp_request_server() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	memset((uint8_t*) &ntp_packet, 0, sizeof(ntp_packet_t));
 8000f70:	2230      	movs	r2, #48	; 0x30
 8000f72:	2100      	movs	r1, #0
 8000f74:	4807      	ldr	r0, [pc, #28]	; (8000f94 <ntp_request_server+0x28>)
 8000f76:	f00a f807 	bl	800af88 <memset>
	// Set the first byte's bits to 00,011,011 for li = 0, vn = 3, and mode = 3. The rest will be left set to zero.
	ntp_packet.li_vn_mode = 0b11100011;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <ntp_request_server+0x28>)
 8000f7c:	22e3      	movs	r2, #227	; 0xe3
 8000f7e:	701a      	strb	r2, [r3, #0]
	ntp_packet.poll = 11;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <ntp_request_server+0x28>)
 8000f82:	220b      	movs	r2, #11
 8000f84:	709a      	strb	r2, [r3, #2]

	esp8266_send_ip_data(NTP_LINK, (uint8_t*) &ntp_packet, sizeof(ntp_packet_t));
 8000f86:	2230      	movs	r2, #48	; 0x30
 8000f88:	4902      	ldr	r1, [pc, #8]	; (8000f94 <ntp_request_server+0x28>)
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 fd40 	bl	8001a10 <esp8266_send_ip_data>

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000234 	.word	0x20000234

08000f98 <ntp_display_time>:

static void ntp_display_time(struct tm *time) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	; 0x28
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]

	// Print the time we got from the server, accounting for local timezone and conversion from UTC time.
	//USB_SerialPrint("%d-%d-%d\n%d:%d:%d\n%s\n\n", time->tm_year + 1900,
	//time->tm_mon + 1, time->tm_mday, time->tm_hour, time->tm_min,
	//time->tm_sec, weekdays[time->tm_wday]);
	char formatted_date[10] = "";
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	809a      	strh	r2, [r3, #4]
	char formatted_time[9] = "";
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	711a      	strb	r2, [r3, #4]
	sprintf(formatted_date, "%d-%d-%d", time->tm_year + 1900, time->tm_mon + 1,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	1c59      	adds	r1, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	f107 0014 	add.w	r0, r7, #20
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	491a      	ldr	r1, [pc, #104]	; (8001040 <ntp_display_time+0xa8>)
 8000fd8:	f009 fc4c 	bl	800a874 <siprintf>
			time->tm_mday);
	sprintf(formatted_time, "%d:%d:%d", time->tm_hour, time->tm_min,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6859      	ldr	r1, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f107 0008 	add.w	r0, r7, #8
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	4914      	ldr	r1, [pc, #80]	; (8001044 <ntp_display_time+0xac>)
 8000ff2:	f009 fc3f 	bl	800a874 <siprintf>
			time->tm_sec);

	oled_clearDisplay();
 8000ff6:	f000 ffb7 	bl	8001f68 <oled_clearDisplay>
	oled_printString(weekdays[time->tm_wday], 0, 0, 16, false);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <ntp_display_time+0xb0>)
 8001000:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001004:	2300      	movs	r3, #0
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2310      	movs	r3, #16
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	f001 f8b1 	bl	8002174 <oled_printString>
	oled_printString(formatted_date, 0, 16, 16, false);
 8001012:	f107 0014 	add.w	r0, r7, #20
 8001016:	2300      	movs	r3, #0
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2310      	movs	r3, #16
 800101c:	2210      	movs	r2, #16
 800101e:	2100      	movs	r1, #0
 8001020:	f001 f8a8 	bl	8002174 <oled_printString>
	oled_print7Seg_number(formatted_time, 0, 40);
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	2228      	movs	r2, #40	; 0x28
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f001 f941 	bl	80022b4 <oled_print7Seg_number>
	oled_display();
 8001032:	f000 ff4f 	bl	8001ed4 <oled_display>

}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	0800c470 	.word	0x0800c470
 8001044:	0800c47c 	.word	0x0800c47c
 8001048:	20000004 	.word	0x20000004

0800104c <rx_cb_1>:

void rx_cb_1(esp8266_rx_data_t *rx_data) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	USB_SerialPrint("Update from NTP Server on Link:%d\n", rx_data->link_id);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4815      	ldr	r0, [pc, #84]	; (80010b0 <rx_cb_1+0x64>)
 800105c:	f000 fa4c 	bl	80014f8 <USB_SerialPrint>

	memset(&ntp_packet, 0, sizeof(ntp_packet_t));
 8001060:	2230      	movs	r2, #48	; 0x30
 8001062:	2100      	movs	r1, #0
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <rx_cb_1+0x68>)
 8001066:	f009 ff8f 	bl	800af88 <memset>
	memcpy(&ntp_packet, rx_data->data, 48);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3304      	adds	r3, #4
 800106e:	2230      	movs	r2, #48	; 0x30
 8001070:	4619      	mov	r1, r3
 8001072:	4810      	ldr	r0, [pc, #64]	; (80010b4 <rx_cb_1+0x68>)
 8001074:	f00a f893 	bl	800b19e <memcpy>
	if (ntp_packet.txTm_s == 0) //Invalid data received, return from here.
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <rx_cb_1+0x68>)
 800107a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107c:	2b00      	cmp	r3, #0
 800107e:	d012      	beq.n	80010a6 <rx_cb_1+0x5a>
		return;

	update_received = true;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <rx_cb_1+0x6c>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
	if (!first_updated)
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <rx_cb_1+0x70>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	f083 0301 	eor.w	r3, r3, #1
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <rx_cb_1+0x4e>
		first_updated = true;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <rx_cb_1+0x70>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]

	lastUpdate = HAL_GetTick();
 800109a:	f001 f9a3 	bl	80023e4 <HAL_GetTick>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <rx_cb_1+0x74>)
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e000      	b.n	80010a8 <rx_cb_1+0x5c>
		return;
 80010a6:	bf00      	nop
}
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800c488 	.word	0x0800c488
 80010b4:	20000234 	.word	0x20000234
 80010b8:	20000271 	.word	0x20000271
 80010bc:	20000270 	.word	0x20000270
 80010c0:	20000274 	.word	0x20000274

080010c4 <ntp_update_time>:

void ntp_update_time() {
 80010c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010c8:	b08a      	sub	sp, #40	; 0x28
 80010ca:	af00      	add	r7, sp, #0

	if (!first_updated
 80010cc:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <ntp_update_time+0x11c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f083 0301 	eor.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d110      	bne.n	80010fc <ntp_update_time+0x38>
			|| (((HAL_GetTick() - lastUpdate) >= updateInterval)
 80010da:	f001 f983 	bl	80023e4 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	4b40      	ldr	r3, [pc, #256]	; (80011e4 <ntp_update_time+0x120>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	1ad2      	subs	r2, r2, r3
 80010e6:	4b40      	ldr	r3, [pc, #256]	; (80011e8 <ntp_update_time+0x124>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d318      	bcc.n	8001120 <ntp_update_time+0x5c>
					&& !update_received)) {
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <ntp_update_time+0x128>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	f083 0301 	eor.w	r3, r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d011      	beq.n	8001120 <ntp_update_time+0x5c>
		if (HAL_GetTick() - lastRequested >= requestInterval) {
 80010fc:	f001 f972 	bl	80023e4 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	4b3b      	ldr	r3, [pc, #236]	; (80011f0 <ntp_update_time+0x12c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1ad2      	subs	r2, r2, r3
 8001108:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <ntp_update_time+0x130>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d307      	bcc.n	8001120 <ntp_update_time+0x5c>
			ntp_request_server();
 8001110:	f7ff ff2c 	bl	8000f6c <ntp_request_server>
			lastRequested = HAL_GetTick();
 8001114:	f001 f966 	bl	80023e4 <HAL_GetTick>
 8001118:	4603      	mov	r3, r0
 800111a:	4a35      	ldr	r2, [pc, #212]	; (80011f0 <ntp_update_time+0x12c>)
 800111c:	6013      	str	r3, [r2, #0]
			return; //return immediatly for reading rx data
 800111e:	e05b      	b.n	80011d8 <ntp_update_time+0x114>
		}

	}

	struct tm *time;
	if (update_received) {
 8001120:	4b32      	ldr	r3, [pc, #200]	; (80011ec <ntp_update_time+0x128>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d02e      	beq.n	8001186 <ntp_update_time+0xc2>
		update_received = false;
 8001128:	4b30      	ldr	r3, [pc, #192]	; (80011ec <ntp_update_time+0x128>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
		ntp_packet.txTm_s = __builtin_bswap32(ntp_packet.txTm_s); // Time-stamp seconds.
 800112e:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <ntp_update_time+0x134>)
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	ba1b      	rev	r3, r3
 8001134:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <ntp_update_time+0x134>)
 8001136:	6293      	str	r3, [r2, #40]	; 0x28
		ntp_packet.txTm_f = __builtin_bswap32(ntp_packet.txTm_f); // Time-stamp fraction of a second.
 8001138:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <ntp_update_time+0x134>)
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	ba1b      	rev	r3, r3
 800113e:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <ntp_update_time+0x134>)
 8001140:	62d3      	str	r3, [r2, #44]	; 0x2c

		epochTime = (time_t) (ntp_packet.txTm_s - NTP_TIMESTAMP_DELTA
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <ntp_update_time+0x134>)
 8001144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001146:	2200      	movs	r2, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	617a      	str	r2, [r7, #20]
				+ nepal_offset);
 800114c:	f245 03dc 	movw	r3, #20700	; 0x50dc
 8001150:	17da      	asrs	r2, r3, #31
 8001152:	469a      	mov	sl, r3
 8001154:	4693      	mov	fp, r2
 8001156:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800115a:	460b      	mov	r3, r1
 800115c:	eb13 040a 	adds.w	r4, r3, sl
 8001160:	4613      	mov	r3, r2
 8001162:	eb43 050b 	adc.w	r5, r3, fp
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <ntp_update_time+0x138>)
 8001168:	18e3      	adds	r3, r4, r3
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	f145 33ff 	adc.w	r3, r5, #4294967295	; 0xffffffff
 8001170:	60fb      	str	r3, [r7, #12]
		epochTime = (time_t) (ntp_packet.txTm_s - NTP_TIMESTAMP_DELTA
 8001172:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001176:	4922      	ldr	r1, [pc, #136]	; (8001200 <ntp_update_time+0x13c>)
 8001178:	e9c1 2300 	strd	r2, r3, [r1]
		time = gmtime((const time_t*) &epochTime);
 800117c:	4820      	ldr	r0, [pc, #128]	; (8001200 <ntp_update_time+0x13c>)
 800117e:	f009 ff0b 	bl	800af98 <gmtime>
 8001182:	6278      	str	r0, [r7, #36]	; 0x24
 8001184:	e023      	b.n	80011ce <ntp_update_time+0x10a>
	} else {
		if (first_updated) {
 8001186:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <ntp_update_time+0x11c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d023      	beq.n	80011d6 <ntp_update_time+0x112>
			time_t epochTimeTemp = epochTime
					+ ((HAL_GetTick() - lastUpdate) / 1000);
 800118e:	f001 f929 	bl	80023e4 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <ntp_update_time+0x120>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	4a1a      	ldr	r2, [pc, #104]	; (8001204 <ntp_update_time+0x140>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	099b      	lsrs	r3, r3, #6
 80011a2:	2200      	movs	r2, #0
 80011a4:	4698      	mov	r8, r3
 80011a6:	4691      	mov	r9, r2
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <ntp_update_time+0x13c>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	eb18 0102 	adds.w	r1, r8, r2
 80011b2:	6039      	str	r1, [r7, #0]
 80011b4:	eb49 0303 	adc.w	r3, r9, r3
 80011b8:	607b      	str	r3, [r7, #4]
			time_t epochTimeTemp = epochTime
 80011ba:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011be:	e9c7 3406 	strd	r3, r4, [r7, #24]
			time = gmtime((const time_t*) &epochTimeTemp);
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fee6 	bl	800af98 <gmtime>
 80011cc:	6278      	str	r0, [r7, #36]	; 0x24
		} else
			return;
	}
	ntp_display_time(time);
 80011ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011d0:	f7ff fee2 	bl	8000f98 <ntp_display_time>
 80011d4:	e000      	b.n	80011d8 <ntp_update_time+0x114>
			return;
 80011d6:	bf00      	nop
}
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011e0:	20000270 	.word	0x20000270
 80011e4:	20000274 	.word	0x20000274
 80011e8:	20000020 	.word	0x20000020
 80011ec:	20000271 	.word	0x20000271
 80011f0:	20000278 	.word	0x20000278
 80011f4:	20000024 	.word	0x20000024
 80011f8:	20000234 	.word	0x20000234
 80011fc:	7c558180 	.word	0x7c558180
 8001200:	20000268 	.word	0x20000268
 8001204:	10624dd3 	.word	0x10624dd3

08001208 <ntp_begin>:

bool ntp_begin() {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af02      	add	r7, sp, #8
	esp8266_cb_register_ip(NTP_LINK, rx_cb_1);
 800120e:	490c      	ldr	r1, [pc, #48]	; (8001240 <ntp_begin+0x38>)
 8001210:	2001      	movs	r0, #1
 8001212:	f000 fa65 	bl	80016e0 <esp8266_cb_register_ip>
	if (!esp8266_udp_begin(NTP_LINK, NTP_SERVER, NTP_SERVER_PORT,
 8001216:	2300      	movs	r3, #0
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	f241 03f7 	movw	r3, #4343	; 0x10f7
 800121e:	227b      	movs	r2, #123	; 0x7b
 8001220:	4908      	ldr	r1, [pc, #32]	; (8001244 <ntp_begin+0x3c>)
 8001222:	2001      	movs	r0, #1
 8001224:	f000 fc3c 	bl	8001aa0 <esp8266_udp_begin>
 8001228:	4603      	mov	r3, r0
 800122a:	f083 0301 	eor.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <ntp_begin+0x30>
	NTP_LOCAL_PORT, 0)) {
		return false;
 8001234:	2300      	movs	r3, #0
 8001236:	e000      	b.n	800123a <ntp_begin+0x32>
	}
	return true;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	0800104d 	.word	0x0800104d
 8001244:	0800c4ac 	.word	0x0800c4ac

08001248 <HAL_UART_RxCpltCallback>:
static uint8_t byte;
static UART_HandleTypeDef *huart;
static uint32_t serial_cnt;
static bool timed_out = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *p_huart) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	serial_buffer[write_index] = byte;
 8001250:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_UART_RxCpltCallback+0x6c>)
 8001252:	881b      	ldrh	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 8001258:	7819      	ldrb	r1, [r3, #0]
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_UART_RxCpltCallback+0x74>)
 800125c:	5499      	strb	r1, [r3, r2]
	write_index = (write_index + 1) % MAX_BUF_SIZE;
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_UART_RxCpltCallback+0x6c>)
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	3301      	adds	r3, #1
 8001264:	425a      	negs	r2, r3
 8001266:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800126a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800126e:	bf58      	it	pl
 8001270:	4253      	negpl	r3, r2
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_UART_RxCpltCallback+0x6c>)
 8001276:	801a      	strh	r2, [r3, #0]
	byte_cnt++;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <HAL_UART_RxCpltCallback+0x78>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a10      	ldr	r2, [pc, #64]	; (80012c0 <HAL_UART_RxCpltCallback+0x78>)
 8001280:	6013      	str	r3, [r2, #0]
	serial_cnt++;
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_UART_RxCpltCallback+0x7c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	4a0e      	ldr	r2, [pc, #56]	; (80012c4 <HAL_UART_RxCpltCallback+0x7c>)
 800128a:	6013      	str	r3, [r2, #0]
	if (byte_cnt == MAX_BUF_SIZE + 1) //if byte_cnt exceeds MAX_BUF_SIZE, wrap around the buffer.
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_UART_RxCpltCallback+0x78>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f240 4201 	movw	r2, #1025	; 0x401
 8001294:	4293      	cmp	r3, r2
 8001296:	d102      	bne.n	800129e <HAL_UART_RxCpltCallback+0x56>
		byte_cnt = 1;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_UART_RxCpltCallback+0x78>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(huart, &byte, 1);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_UART_RxCpltCallback+0x80>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4904      	ldr	r1, [pc, #16]	; (80012b8 <HAL_UART_RxCpltCallback+0x70>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 fb4f 	bl	800594a <HAL_UART_Receive_IT>
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000077e 	.word	0x2000077e
 80012b8:	20000784 	.word	0x20000784
 80012bc:	2000027c 	.word	0x2000027c
 80012c0:	20000780 	.word	0x20000780
 80012c4:	2000078c 	.word	0x2000078c
 80012c8:	20000788 	.word	0x20000788

080012cc <Serial_Available>:
/*Check if data is available in Serial buffer */
bool Serial_Available() {
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
	return ((byte_cnt != 0) && (byte_cnt > 0));
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <Serial_Available+0x2c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <Serial_Available+0x18>
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <Serial_Available+0x2c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	dd01      	ble.n	80012e4 <Serial_Available+0x18>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <Serial_Available+0x1a>
 80012e4:	2300      	movs	r3, #0
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000780 	.word	0x20000780

080012fc <NextByteAvailable>:

/*Wait until timeout for availability of next byte in Serial Buffer */
static bool NextByteAvailable() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	uint32_t lastMillis = HAL_GetTick();
 8001302:	f001 f86f 	bl	80023e4 <HAL_GetTick>
 8001306:	6078      	str	r0, [r7, #4]
	while (!Serial_Available()) {
 8001308:	e00c      	b.n	8001324 <NextByteAvailable+0x28>
		if (HAL_GetTick() - lastMillis >= SERIAL_TIMEOUT) {
 800130a:	f001 f86b 	bl	80023e4 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001318:	d304      	bcc.n	8001324 <NextByteAvailable+0x28>
			timed_out = true;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <NextByteAvailable+0x48>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
			return false;
 8001320:	2300      	movs	r3, #0
 8001322:	e00b      	b.n	800133c <NextByteAvailable+0x40>
	while (!Serial_Available()) {
 8001324:	f7ff ffd2 	bl	80012cc <Serial_Available>
 8001328:	4603      	mov	r3, r0
 800132a:	f083 0301 	eor.w	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1ea      	bne.n	800130a <NextByteAvailable+0xe>
		}
	}
	timed_out = false;
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <NextByteAvailable+0x48>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
	return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000790 	.word	0x20000790

08001348 <Serial_Flush>:

/*Flush Serial buffer*/
void Serial_Flush() {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	memset(serial_buffer, 0, sizeof(serial_buffer));
 800134c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001350:	2100      	movs	r1, #0
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <Serial_Flush+0x28>)
 8001354:	f009 fe18 	bl	800af88 <memset>
	read_index = 0;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <Serial_Flush+0x2c>)
 800135a:	2200      	movs	r2, #0
 800135c:	801a      	strh	r2, [r3, #0]
	write_index = 0;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <Serial_Flush+0x30>)
 8001360:	2200      	movs	r2, #0
 8001362:	801a      	strh	r2, [r3, #0]
	byte_cnt = 0;
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <Serial_Flush+0x34>)
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	2000027c 	.word	0x2000027c
 8001374:	2000077c 	.word	0x2000077c
 8001378:	2000077e 	.word	0x2000077e
 800137c:	20000780 	.word	0x20000780

08001380 <Serial_Write>:

void Serial_Write(uint8_t *tx_data, uint16_t len) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(huart, tx_data, len, HAL_MAX_DELAY);
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <Serial_Write+0x24>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f004 fa4c 	bl	8005834 <HAL_UART_Transmit>
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000788 	.word	0x20000788

080013a8 <Serial_ReadByte>:

uint8_t Serial_ReadByte() {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
	uint8_t c = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	71fb      	strb	r3, [r7, #7]
	if (NextByteAvailable()) {
 80013b2:	f7ff ffa3 	bl	80012fc <NextByteAvailable>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d017      	beq.n	80013ec <Serial_ReadByte+0x44>
		c = serial_buffer[read_index];
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <Serial_ReadByte+0x50>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <Serial_ReadByte+0x54>)
 80013c4:	5c9b      	ldrb	r3, [r3, r2]
 80013c6:	71fb      	strb	r3, [r7, #7]
		read_index = (read_index + 1) % MAX_BUF_SIZE;
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <Serial_ReadByte+0x50>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	3301      	adds	r3, #1
 80013ce:	425a      	negs	r2, r3
 80013d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013d4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80013d8:	bf58      	it	pl
 80013da:	4253      	negpl	r3, r2
 80013dc:	b29a      	uxth	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <Serial_ReadByte+0x50>)
 80013e0:	801a      	strh	r2, [r3, #0]
		byte_cnt--;
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <Serial_ReadByte+0x58>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	4a05      	ldr	r2, [pc, #20]	; (8001400 <Serial_ReadByte+0x58>)
 80013ea:	6013      	str	r3, [r2, #0]
	}
	return c;
 80013ec:	79fb      	ldrb	r3, [r7, #7]

}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	2000077c 	.word	0x2000077c
 80013fc:	2000027c 	.word	0x2000027c
 8001400:	20000780 	.word	0x20000780

08001404 <Serial_ReadLine>:

char* Serial_ReadLine() {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
	uint8_t idx = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	71fb      	strb	r3, [r7, #7]
	uint8_t c;
	memset(line_buffer, 0, sizeof(line_buffer));
 800140e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001412:	2100      	movs	r1, #0
 8001414:	4824      	ldr	r0, [pc, #144]	; (80014a8 <Serial_ReadLine+0xa4>)
 8001416:	f009 fdb7 	bl	800af88 <memset>

	while (NextByteAvailable()) {
 800141a:	e021      	b.n	8001460 <Serial_ReadLine+0x5c>

		c = serial_buffer[read_index];
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <Serial_ReadLine+0xa8>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b23      	ldr	r3, [pc, #140]	; (80014b0 <Serial_ReadLine+0xac>)
 8001424:	5c9b      	ldrb	r3, [r3, r2]
 8001426:	71bb      	strb	r3, [r7, #6]
		read_index = (read_index + 1) % MAX_BUF_SIZE;
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <Serial_ReadLine+0xa8>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	425a      	negs	r2, r3
 8001430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001434:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001438:	bf58      	it	pl
 800143a:	4253      	negpl	r3, r2
 800143c:	b29a      	uxth	r2, r3
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <Serial_ReadLine+0xa8>)
 8001440:	801a      	strh	r2, [r3, #0]
		byte_cnt--;
 8001442:	4b1c      	ldr	r3, [pc, #112]	; (80014b4 <Serial_ReadLine+0xb0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3b01      	subs	r3, #1
 8001448:	4a1a      	ldr	r2, [pc, #104]	; (80014b4 <Serial_ReadLine+0xb0>)
 800144a:	6013      	str	r3, [r2, #0]
		if (c == '\r')
 800144c:	79bb      	ldrb	r3, [r7, #6]
 800144e:	2b0d      	cmp	r3, #13
 8001450:	d00c      	beq.n	800146c <Serial_ReadLine+0x68>
			break;
		line_buffer[idx++] = c;
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	71fa      	strb	r2, [r7, #7]
 8001458:	4619      	mov	r1, r3
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <Serial_ReadLine+0xa4>)
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	5453      	strb	r3, [r2, r1]
	while (NextByteAvailable()) {
 8001460:	f7ff ff4c 	bl	80012fc <NextByteAvailable>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1d8      	bne.n	800141c <Serial_ReadLine+0x18>
 800146a:	e000      	b.n	800146e <Serial_ReadLine+0x6a>
			break;
 800146c:	bf00      	nop
		if ((idx == sizeof(line_buffer)))
			goto exit;

	}
	if (timed_out)
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <Serial_ReadLine+0xb4>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d112      	bne.n	800149c <Serial_ReadLine+0x98>
		goto exit;
	read_index = (read_index + 1) % MAX_BUF_SIZE; //line feed
 8001476:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <Serial_ReadLine+0xa8>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	425a      	negs	r2, r3
 800147e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001482:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001486:	bf58      	it	pl
 8001488:	4253      	negpl	r3, r2
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <Serial_ReadLine+0xa8>)
 800148e:	801a      	strh	r2, [r3, #0]
	byte_cnt--;
 8001490:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <Serial_ReadLine+0xb0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3b01      	subs	r3, #1
 8001496:	4a07      	ldr	r2, [pc, #28]	; (80014b4 <Serial_ReadLine+0xb0>)
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e000      	b.n	800149e <Serial_ReadLine+0x9a>
		goto exit;
 800149c:	bf00      	nop

	exit: return line_buffer;
 800149e:	4b02      	ldr	r3, [pc, #8]	; (80014a8 <Serial_ReadLine+0xa4>)
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000067c 	.word	0x2000067c
 80014ac:	2000077c 	.word	0x2000077c
 80014b0:	2000027c 	.word	0x2000027c
 80014b4:	20000780 	.word	0x20000780
 80014b8:	20000790 	.word	0x20000790

080014bc <Serial_Init>:

void Serial_Init(UART_HandleTypeDef *p_huart) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	Serial_Flush();
 80014c4:	f7ff ff40 	bl	8001348 <Serial_Flush>
	huart = p_huart;
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <Serial_Init+0x28>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart, (uint8_t*) &byte, 1); //Initiate UART reception
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <Serial_Init+0x28>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2201      	movs	r2, #1
 80014d4:	4904      	ldr	r1, [pc, #16]	; (80014e8 <Serial_Init+0x2c>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 fa37 	bl	800594a <HAL_UART_Receive_IT>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000788 	.word	0x20000788
 80014e8:	20000784 	.word	0x20000784

080014ec <USB_SerialInit>:
#include "stdarg.h"
#include "main.h"

static uint8_t retry_cnt=0;

void USB_SerialInit() {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	MX_USB_DEVICE_Init();
 80014f0:	f008 fcb0 	bl	8009e54 <MX_USB_DEVICE_Init>

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <USB_SerialPrint>:

void USB_SerialPrint(char *format, ...) {
 80014f8:	b40f      	push	{r0, r1, r2, r3}
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b0a4      	sub	sp, #144	; 0x90
 80014fe:	af00      	add	r7, sp, #0

	char buffer[128];
	va_list args;
	va_start(args, format);
 8001500:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001504:	607b      	str	r3, [r7, #4]
	size_t size=vsprintf(buffer, format, args);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001510:	4618      	mov	r0, r3
 8001512:	f009 faa7 	bl	800aa64 <vsiprintf>
 8001516:	4603      	mov	r3, r0
 8001518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	perror(buffer);
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	4618      	mov	r0, r3
 8001522:	f009 fb2f 	bl	800ab84 <perror>
	va_end(args);

	while(CDC_Transmit_FS((uint8_t*) buffer, size)==(USBD_FAIL || USBD_BUSY)){
 8001526:	e019      	b.n	800155c <USB_SerialPrint+0x64>
 8001528:	2301      	movs	r3, #1
 800152a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

/* USER CODE BEGIN Private defines */
extern TIM_HandleTypeDef htim2;
// delay has to constant expression
void inline __attribute__((always_inline)) DelayUS(uint32_t us) {
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <USB_SerialPrint+0x94>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us)
 8001536:	bf00      	nop
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <USB_SerialPrint+0x94>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001542:	429a      	cmp	r2, r3
 8001544:	d8f8      	bhi.n	8001538 <USB_SerialPrint+0x40>
		;  // wait for the counter to reach the us input in the parameter
}
 8001546:	bf00      	nop
		DelayUS(1);
		retry_cnt++;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <USB_SerialPrint+0x98>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <USB_SerialPrint+0x98>)
 8001552:	701a      	strb	r2, [r3, #0]
		if(retry_cnt==200)
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <USB_SerialPrint+0x98>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2bc8      	cmp	r3, #200	; 0xc8
 800155a:	d00c      	beq.n	8001576 <USB_SerialPrint+0x7e>
	while(CDC_Transmit_FS((uint8_t*) buffer, size)==(USBD_FAIL || USBD_BUSY)){
 800155c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001560:	b29a      	uxth	r2, r3
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f008 fd31 	bl	8009fd0 <CDC_Transmit_FS>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d0d9      	beq.n	8001528 <USB_SerialPrint+0x30>
 8001574:	e000      	b.n	8001578 <USB_SerialPrint+0x80>
			break;
 8001576:	bf00      	nop
	}
	retry_cnt=0;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <USB_SerialPrint+0x98>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]

}
 800157e:	bf00      	nop
 8001580:	3790      	adds	r7, #144	; 0x90
 8001582:	46bd      	mov	sp, r7
 8001584:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001588:	b004      	add	sp, #16
 800158a:	4770      	bx	lr
 800158c:	2000019c 	.word	0x2000019c
 8001590:	20000791 	.word	0x20000791

08001594 <esp8266_mqtt_user_config>:
#include "stm32f4xx_hal.h"
#include "USB_Serial.h"
#include "hal_esp8266.h"
#include "esp8266_mqtt.h"

bool esp8266_mqtt_user_config(mqtt_user_cfg_t *user_config) {
 8001594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001596:	b0a3      	sub	sp, #140	; 0x8c
 8001598:	af06      	add	r7, sp, #24
 800159a:	6078      	str	r0, [r7, #4]
	char cmd[100] = "";
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2260      	movs	r2, #96	; 0x60
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f009 fced 	bl	800af88 <memset>
	sprintf(cmd, "at+mqttusercfg=%d,%d,\"%s\",\"%s\",\"%s\",%d,%d,\"%s\"\r\n",
			user_config->link_id, user_config->scheme, user_config->client_id,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	781b      	ldrb	r3, [r3, #0]
	sprintf(cmd, "at+mqttusercfg=%d,%d,\"%s\",\"%s\",\"%s\",%d,%d,\"%s\"\r\n",
 80015b2:	469c      	mov	ip, r3
			user_config->link_id, user_config->scheme, user_config->client_id,
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	785b      	ldrb	r3, [r3, #1]
	sprintf(cmd, "at+mqttusercfg=%d,%d,\"%s\",\"%s\",\"%s\",%d,%d,\"%s\"\r\n",
 80015b8:	469e      	mov	lr, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6892      	ldr	r2, [r2, #8]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	68c9      	ldr	r1, [r1, #12]
			user_config->username, user_config->password,
			user_config->cert_key_id, user_config->ca_id, user_config->path);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	7c00      	ldrb	r0, [r0, #16]
	sprintf(cmd, "at+mqttusercfg=%d,%d,\"%s\",\"%s\",\"%s\",%d,%d,\"%s\"\r\n",
 80015ca:	4605      	mov	r5, r0
			user_config->cert_key_id, user_config->ca_id, user_config->path);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	7c40      	ldrb	r0, [r0, #17]
	sprintf(cmd, "at+mqttusercfg=%d,%d,\"%s\",\"%s\",\"%s\",%d,%d,\"%s\"\r\n",
 80015d0:	4606      	mov	r6, r0
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	6940      	ldr	r0, [r0, #20]
 80015d6:	f107 040c 	add.w	r4, r7, #12
 80015da:	9005      	str	r0, [sp, #20]
 80015dc:	9604      	str	r6, [sp, #16]
 80015de:	9503      	str	r5, [sp, #12]
 80015e0:	9102      	str	r1, [sp, #8]
 80015e2:	9201      	str	r2, [sp, #4]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	4673      	mov	r3, lr
 80015e8:	4662      	mov	r2, ip
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <esp8266_mqtt_user_config+0x78>)
 80015ec:	4620      	mov	r0, r4
 80015ee:	f009 f941 	bl	800a874 <siprintf>
	return esp8266_send_cmd(cmd, 5000);
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	f241 3188 	movw	r1, #5000	; 0x1388
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f9ee 	bl	80019dc <esp8266_send_cmd>
 8001600:	4603      	mov	r3, r0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3774      	adds	r7, #116	; 0x74
 8001606:	46bd      	mov	sp, r7
 8001608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160a:	bf00      	nop
 800160c:	0800c4bc 	.word	0x0800c4bc

08001610 <esp8266_mqtt_cb_register>:

void esp8266_mqtt_cb_register(uint8_t link_id, mqtt_cb_t callback) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
	esp8266_cb_register_mqtt(link_id, callback);
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 f871 	bl	8001708 <esp8266_cb_register_mqtt>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <esp8266_mqtt_connect>:

bool esp8266_mqtt_connect(mqtt_connect_params_t *conn_params) {
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b09f      	sub	sp, #124	; 0x7c
 8001634:	af02      	add	r7, sp, #8
 8001636:	6078      	str	r0, [r7, #4]
	char cmd[100] = "";
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	2260      	movs	r2, #96	; 0x60
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f009 fc9f 	bl	800af88 <memset>
	sprintf(cmd, "at+mqttconn=%d,\"%s\",%d,%d\r\n", conn_params->link_id,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461c      	mov	r4, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685a      	ldr	r2, [r3, #4]
			conn_params->broker, conn_params->port, conn_params->reconnect);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	891b      	ldrh	r3, [r3, #8]
	sprintf(cmd, "at+mqttconn=%d,\"%s\",%d,%d\r\n", conn_params->link_id,
 8001658:	4619      	mov	r1, r3
			conn_params->broker, conn_params->port, conn_params->reconnect);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(cmd, "at+mqttconn=%d,\"%s\",%d,%d\r\n", conn_params->link_id,
 800165e:	f107 000c 	add.w	r0, r7, #12
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	9100      	str	r1, [sp, #0]
 8001666:	4613      	mov	r3, r2
 8001668:	4622      	mov	r2, r4
 800166a:	4907      	ldr	r1, [pc, #28]	; (8001688 <esp8266_mqtt_connect+0x58>)
 800166c:	f009 f902 	bl	800a874 <siprintf>
	return esp8266_send_cmd(cmd, 5000);
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	f241 3188 	movw	r1, #5000	; 0x1388
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f9af 	bl	80019dc <esp8266_send_cmd>
 800167e:	4603      	mov	r3, r0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3774      	adds	r7, #116	; 0x74
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	0800c4f0 	.word	0x0800c4f0

0800168c <esp8266_mqtt_subscribe>:

bool esp8266_mqtt_subscribe(mqtt_subscribe_params_t *subscribe_params) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b09e      	sub	sp, #120	; 0x78
 8001690:	af02      	add	r7, sp, #8
 8001692:	6078      	str	r0, [r7, #4]
	char cmd[100] = "";
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2260      	movs	r2, #96	; 0x60
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f009 fc71 	bl	800af88 <memset>
	sprintf(cmd, "at+mqttsub=%d,\"%s\",%d\r\n", subscribe_params->link_id,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4619      	mov	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
			subscribe_params->topic, subscribe_params->qos);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(cmd, "at+mqttsub=%d,\"%s\",%d\r\n", subscribe_params->link_id,
 80016b4:	f107 000c 	add.w	r0, r7, #12
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4613      	mov	r3, r2
 80016bc:	460a      	mov	r2, r1
 80016be:	4907      	ldr	r1, [pc, #28]	; (80016dc <esp8266_mqtt_subscribe+0x50>)
 80016c0:	f009 f8d8 	bl	800a874 <siprintf>
	return esp8266_send_cmd(cmd, 2000);
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f985 	bl	80019dc <esp8266_send_cmd>
 80016d2:	4603      	mov	r3, r0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3770      	adds	r7, #112	; 0x70
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	0800c50c 	.word	0x0800c50c

080016e0 <esp8266_cb_register_ip>:
static esp8266_rx_data_t rx_data = { 0 };

static char ip_address[15] = "";
static char wifi[20] = "";

void esp8266_cb_register_ip(uint8_t link_id, esp8266_rx_cb_t callback) {
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
	rx_callbacks[link_id] = callback;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4905      	ldr	r1, [pc, #20]	; (8001704 <esp8266_cb_register_ip+0x24>)
 80016f0:	683a      	ldr	r2, [r7, #0]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000794 	.word	0x20000794

08001708 <esp8266_cb_register_mqtt>:

void esp8266_cb_register_mqtt(uint8_t link_id, mqtt_cb_t mqtt_cb) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
	mqtt_callbacks[link_id] = mqtt_cb;
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4905      	ldr	r1, [pc, #20]	; (800172c <esp8266_cb_register_mqtt+0x24>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200007a8 	.word	0x200007a8

08001730 <WaitForResponse>:

static bool WaitForResponse(char *response, uint32_t timeout) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	char *prx;
	uint32_t lastMillis = HAL_GetTick();
 800173a:	f000 fe53 	bl	80023e4 <HAL_GetTick>
 800173e:	60f8      	str	r0, [r7, #12]
	lastMillis = HAL_GetTick();
 8001740:	f000 fe50 	bl	80023e4 <HAL_GetTick>
 8001744:	60f8      	str	r0, [r7, #12]
	do {
		prx = Serial_ReadLine();
 8001746:	f7ff fe5d 	bl	8001404 <Serial_ReadLine>
 800174a:	60b8      	str	r0, [r7, #8]
		USB_SerialPrint("%s\n", prx);
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	4811      	ldr	r0, [pc, #68]	; (8001794 <WaitForResponse+0x64>)
 8001750:	f7ff fed2 	bl	80014f8 <USB_SerialPrint>
		if (strcmp(prx, "ERROR") == 0)
 8001754:	4910      	ldr	r1, [pc, #64]	; (8001798 <WaitForResponse+0x68>)
 8001756:	68b8      	ldr	r0, [r7, #8]
 8001758:	f7fe fd4a 	bl	80001f0 <strcmp>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <WaitForResponse+0x36>
			return false;
 8001762:	2300      	movs	r3, #0
 8001764:	e011      	b.n	800178a <WaitForResponse+0x5a>
		if (HAL_GetTick() - lastMillis >= timeout)
 8001766:	f000 fe3d 	bl	80023e4 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d801      	bhi.n	800177a <WaitForResponse+0x4a>
			return false;
 8001776:	2300      	movs	r3, #0
 8001778:	e007      	b.n	800178a <WaitForResponse+0x5a>

	} while ((strcmp(response, prx) != 0));
 800177a:	68b9      	ldr	r1, [r7, #8]
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7fe fd37 	bl	80001f0 <strcmp>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1de      	bne.n	8001746 <WaitForResponse+0x16>

	return true;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0800c570 	.word	0x0800c570
 8001798:	0800c574 	.word	0x0800c574

0800179c <isIpData>:

bool isIpData(const char *data) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	return strncmp(data, "+IPD", 4) == 0;
 80017a4:	2204      	movs	r2, #4
 80017a6:	4907      	ldr	r1, [pc, #28]	; (80017c4 <isIpData+0x28>)
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f009 fbd9 	bl	800af60 <strncmp>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf0c      	ite	eq
 80017b4:	2301      	moveq	r3, #1
 80017b6:	2300      	movne	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	0800c57c 	.word	0x0800c57c

080017c8 <isMqttData>:

bool isMqttData(const char *data) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	return strncmp(data, "+MQTTSUBRECV", 12) == 0;
 80017d0:	220c      	movs	r2, #12
 80017d2:	4907      	ldr	r1, [pc, #28]	; (80017f0 <isMqttData+0x28>)
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f009 fbc3 	bl	800af60 <strncmp>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2db      	uxtb	r3, r3
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0800c584 	.word	0x0800c584

080017f4 <esp8266_recv>:

bool esp8266_recv() {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0aa      	sub	sp, #168	; 0xa8
 80017f8:	af00      	add	r7, sp, #0
	char *prx;
	if (Serial_Available()) {
 80017fa:	f7ff fd67 	bl	80012cc <Serial_Available>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	f000 80cd 	beq.w	80019a0 <esp8266_recv+0x1ac>
		memset((uint8_t*) &rx_data, 0, sizeof(esp8266_rx_data_t));
 8001806:	2268      	movs	r2, #104	; 0x68
 8001808:	2100      	movs	r1, #0
 800180a:	4868      	ldr	r0, [pc, #416]	; (80019ac <esp8266_recv+0x1b8>)
 800180c:	f009 fbbc 	bl	800af88 <memset>
		prx = Serial_ReadLine();
 8001810:	f7ff fdf8 	bl	8001404 <Serial_ReadLine>
 8001814:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

		if (isIpData(prx)) {
 8001818:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800181c:	f7ff ffbe 	bl	800179c <isIpData>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d048      	beq.n	80018b8 <esp8266_recv+0xc4>
			rx_data.link_id = (uint8_t) prx[5] - 48;
 8001826:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800182a:	3305      	adds	r3, #5
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	3b30      	subs	r3, #48	; 0x30
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <esp8266_recv+0x1b8>)
 8001834:	701a      	strb	r2, [r3, #0]
			uint8_t index = 7;
 8001836:	2307      	movs	r3, #7
 8001838:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			while (prx[index] != ':') {
 800183c:	e01e      	b.n	800187c <esp8266_recv+0x88>

				rx_data.len = rx_data.len * 10 + ((uint8_t) prx[index] - 48);
 800183e:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <esp8266_recv+0x1b8>)
 8001840:	885b      	ldrh	r3, [r3, #2]
 8001842:	461a      	mov	r2, r3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4413      	add	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001850:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001854:	440b      	add	r3, r1
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	4413      	add	r3, r2
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b30      	subs	r3, #48	; 0x30
 8001860:	b29a      	uxth	r2, r3
 8001862:	4b52      	ldr	r3, [pc, #328]	; (80019ac <esp8266_recv+0x1b8>)
 8001864:	805a      	strh	r2, [r3, #2]
				index++;
 8001866:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800186a:	3301      	adds	r3, #1
 800186c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				if (index == 12)
 8001870:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d101      	bne.n	800187c <esp8266_recv+0x88>
					return false;
 8001878:	2300      	movs	r3, #0
 800187a:	e092      	b.n	80019a2 <esp8266_recv+0x1ae>
			while (prx[index] != ':') {
 800187c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001880:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001884:	4413      	add	r3, r2
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b3a      	cmp	r3, #58	; 0x3a
 800188a:	d1d8      	bne.n	800183e <esp8266_recv+0x4a>
			}
			memcpy(rx_data.data, &prx[index + 1], rx_data.len);
 800188c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001890:	3301      	adds	r3, #1
 8001892:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001896:	4413      	add	r3, r2
 8001898:	4a44      	ldr	r2, [pc, #272]	; (80019ac <esp8266_recv+0x1b8>)
 800189a:	8852      	ldrh	r2, [r2, #2]
 800189c:	4619      	mov	r1, r3
 800189e:	4844      	ldr	r0, [pc, #272]	; (80019b0 <esp8266_recv+0x1bc>)
 80018a0:	f009 fc7d 	bl	800b19e <memcpy>
			rx_callbacks[rx_data.link_id](&rx_data);
 80018a4:	4b41      	ldr	r3, [pc, #260]	; (80019ac <esp8266_recv+0x1b8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b42      	ldr	r3, [pc, #264]	; (80019b4 <esp8266_recv+0x1c0>)
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	483e      	ldr	r0, [pc, #248]	; (80019ac <esp8266_recv+0x1b8>)
 80018b2:	4798      	blx	r3
			return true;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e074      	b.n	80019a2 <esp8266_recv+0x1ae>
		} else if (isMqttData(prx)) {
 80018b8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80018bc:	f7ff ff84 	bl	80017c8 <isMqttData>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06a      	beq.n	800199c <esp8266_recv+0x1a8>

			mqtt_data_t mqtt_data = { 0 };
 80018c6:	463b      	mov	r3, r7
 80018c8:	2296      	movs	r2, #150	; 0x96
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f009 fb5b 	bl	800af88 <memset>
			mqtt_data.link_id = (uint8_t) prx[13] - 48;
 80018d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018d6:	330d      	adds	r3, #13
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	3b30      	subs	r3, #48	; 0x30
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	703b      	strb	r3, [r7, #0]

			int r_idx = 16;
 80018e0:	2310      	movs	r3, #16
 80018e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			int w_idx = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			while (prx[r_idx] != '"') {
 80018ec:	e013      	b.n	8001916 <esp8266_recv+0x122>
				mqtt_data.topic[w_idx++] = prx[r_idx];
 80018ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018f6:	441a      	add	r2, r3
 80018f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018fc:	1c59      	adds	r1, r3, #1
 80018fe:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8001902:	7812      	ldrb	r2, [r2, #0]
 8001904:	33a8      	adds	r3, #168	; 0xa8
 8001906:	443b      	add	r3, r7
 8001908:	f803 2ca6 	strb.w	r2, [r3, #-166]
				r_idx++;
 800190c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001910:	3301      	adds	r3, #1
 8001912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			while (prx[r_idx] != '"') {
 8001916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800191a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800191e:	4413      	add	r3, r2
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b22      	cmp	r3, #34	; 0x22
 8001924:	d1e3      	bne.n	80018ee <esp8266_recv+0xfa>
			}
			r_idx += 2;
 8001926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800192a:	3302      	adds	r3, #2
 800192c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			while (prx[r_idx] != ',') {
 8001930:	e015      	b.n	800195e <esp8266_recv+0x16a>

				mqtt_data.len = mqtt_data.len * 10
 8001932:	787b      	ldrb	r3, [r7, #1]
						+ ((uint8_t) prx[r_idx] - 48);
 8001934:	461a      	mov	r2, r3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4413      	add	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001942:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001946:	440b      	add	r3, r1
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3b30      	subs	r3, #48	; 0x30
 8001950:	b2db      	uxtb	r3, r3
				mqtt_data.len = mqtt_data.len * 10
 8001952:	707b      	strb	r3, [r7, #1]
				r_idx++;
 8001954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001958:	3301      	adds	r3, #1
 800195a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			while (prx[r_idx] != ',') {
 800195e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001962:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001966:	4413      	add	r3, r2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b2c      	cmp	r3, #44	; 0x2c
 800196c:	d1e1      	bne.n	8001932 <esp8266_recv+0x13e>
			}
			memcpy(mqtt_data.data, &prx[r_idx + 1], mqtt_data.len);
 800196e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001972:	3301      	adds	r3, #1
 8001974:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001978:	18d1      	adds	r1, r2, r3
 800197a:	787b      	ldrb	r3, [r7, #1]
 800197c:	461a      	mov	r2, r3
 800197e:	463b      	mov	r3, r7
 8001980:	3316      	adds	r3, #22
 8001982:	4618      	mov	r0, r3
 8001984:	f009 fc0b 	bl	800b19e <memcpy>
			mqtt_callbacks[mqtt_data.link_id](&mqtt_data);
 8001988:	783b      	ldrb	r3, [r7, #0]
 800198a:	461a      	mov	r2, r3
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <esp8266_recv+0x1c4>)
 800198e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001992:	463a      	mov	r2, r7
 8001994:	4610      	mov	r0, r2
 8001996:	4798      	blx	r3
			return true;
 8001998:	2301      	movs	r3, #1
 800199a:	e002      	b.n	80019a2 <esp8266_recv+0x1ae>

		} else
			return false;
 800199c:	2300      	movs	r3, #0
 800199e:	e000      	b.n	80019a2 <esp8266_recv+0x1ae>
	}
	return false;
 80019a0:	2300      	movs	r3, #0

}
 80019a2:	4618      	mov	r0, r3
 80019a4:	37a8      	adds	r7, #168	; 0xa8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200007bc 	.word	0x200007bc
 80019b0:	200007c0 	.word	0x200007c0
 80019b4:	20000794 	.word	0x20000794
 80019b8:	200007a8 	.word	0x200007a8

080019bc <esp8266_tx>:

static inline void esp8266_tx(uint8_t *tx_data, uint16_t len) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
	Serial_Write(tx_data, len);
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	4619      	mov	r1, r3
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fcd7 	bl	8001380 <Serial_Write>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <esp8266_send_cmd>:

bool esp8266_send_cmd(char *cmd, uint32_t timeout) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
	esp8266_tx((uint8_t*) cmd, strlen(cmd));
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7fe fbfa 	bl	80001e0 <strlen>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ffe2 	bl	80019bc <esp8266_tx>
	return WaitForResponse("OK", timeout);
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	4804      	ldr	r0, [pc, #16]	; (8001a0c <esp8266_send_cmd+0x30>)
 80019fc:	f7ff fe98 	bl	8001730 <WaitForResponse>
 8001a00:	4603      	mov	r3, r0

}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	0800c594 	.word	0x0800c594

08001a10 <esp8266_send_ip_data>:

bool esp8266_send_ip_data(uint8_t link_id, uint8_t *data, uint16_t len) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	80bb      	strh	r3, [r7, #4]
	char cmd_buf[20] = "";
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
	uint8_t cmd_len = sprintf(cmd_buf, "at+cipsend=%d,%d\r\n", link_id, len);
 8001a32:	79fa      	ldrb	r2, [r7, #7]
 8001a34:	88bb      	ldrh	r3, [r7, #4]
 8001a36:	f107 0008 	add.w	r0, r7, #8
 8001a3a:	4917      	ldr	r1, [pc, #92]	; (8001a98 <esp8266_send_ip_data+0x88>)
 8001a3c:	f008 ff1a 	bl	800a874 <siprintf>
 8001a40:	4603      	mov	r3, r0
 8001a42:	77bb      	strb	r3, [r7, #30]
	esp8266_tx((uint8_t*) cmd_buf, cmd_len);
 8001a44:	7fbb      	ldrb	r3, [r7, #30]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	f107 0308 	add.w	r3, r7, #8
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff ffb4 	bl	80019bc <esp8266_tx>
	for (uint8_t i = 0; i < 3; i++) //'>' occurs on the fourth line
 8001a54:	2300      	movs	r3, #0
 8001a56:	77fb      	strb	r3, [r7, #31]
 8001a58:	e004      	b.n	8001a64 <esp8266_send_ip_data+0x54>
		Serial_ReadLine();
 8001a5a:	f7ff fcd3 	bl	8001404 <Serial_ReadLine>
	for (uint8_t i = 0; i < 3; i++) //'>' occurs on the fourth line
 8001a5e:	7ffb      	ldrb	r3, [r7, #31]
 8001a60:	3301      	adds	r3, #1
 8001a62:	77fb      	strb	r3, [r7, #31]
 8001a64:	7ffb      	ldrb	r3, [r7, #31]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d9f7      	bls.n	8001a5a <esp8266_send_ip_data+0x4a>
	if (Serial_ReadByte() != '>')
 8001a6a:	f7ff fc9d 	bl	80013a8 <Serial_ReadByte>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b3e      	cmp	r3, #62	; 0x3e
 8001a72:	d001      	beq.n	8001a78 <esp8266_send_ip_data+0x68>
		return false;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e00a      	b.n	8001a8e <esp8266_send_ip_data+0x7e>

	esp8266_tx(data, len);
 8001a78:	88bb      	ldrh	r3, [r7, #4]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6838      	ldr	r0, [r7, #0]
 8001a7e:	f7ff ff9d 	bl	80019bc <esp8266_tx>
	return WaitForResponse("SEND OK", TIMEOUT);
 8001a82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <esp8266_send_ip_data+0x8c>)
 8001a88:	f7ff fe52 	bl	8001730 <WaitForResponse>
 8001a8c:	4603      	mov	r3, r0

}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	0800c598 	.word	0x0800c598
 8001a9c:	0800c5ac 	.word	0x0800c5ac

08001aa0 <esp8266_udp_begin>:

bool esp8266_udp_begin(uint8_t link_id, char *remote_ip, uint16_t remote_port,
		uint16_t local_port, uint8_t mode) {
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b099      	sub	sp, #100	; 0x64
 8001aa4:	af04      	add	r7, sp, #16
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4603      	mov	r3, r0
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	81bb      	strh	r3, [r7, #12]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
	char tx_buf[64] = "";
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	223c      	movs	r2, #60	; 0x3c
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f009 fa5f 	bl	800af88 <memset>
	sprintf(tx_buf, "at+cipstart=%d,\"UDP\",\"%s\",%d,%d,%d\r\n", link_id,
 8001aca:	7bfc      	ldrb	r4, [r7, #15]
 8001acc:	89bb      	ldrh	r3, [r7, #12]
 8001ace:	88fa      	ldrh	r2, [r7, #6]
 8001ad0:	f897 1060 	ldrb.w	r1, [r7, #96]	; 0x60
 8001ad4:	f107 0010 	add.w	r0, r7, #16
 8001ad8:	9102      	str	r1, [sp, #8]
 8001ada:	9201      	str	r2, [sp, #4]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	4622      	mov	r2, r4
 8001ae2:	4907      	ldr	r1, [pc, #28]	; (8001b00 <esp8266_udp_begin+0x60>)
 8001ae4:	f008 fec6 	bl	800a874 <siprintf>
			remote_ip, remote_port, local_port, mode);
	return esp8266_send_cmd(tx_buf, TIMEOUT);
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff73 	bl	80019dc <esp8266_send_cmd>
 8001af6:	4603      	mov	r3, r0

}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3754      	adds	r7, #84	; 0x54
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd90      	pop	{r4, r7, pc}
 8001b00:	0800c5b4 	.word	0x0800c5b4

08001b04 <esp8266_wifi_connect>:

bool esp8266_wifi_connect() {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	; 0x38
 8001b08:	af00      	add	r7, sp, #0
	char conn_cmd[50] = "";
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	222e      	movs	r2, #46	; 0x2e
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f009 fa37 	bl	800af88 <memset>
	int cmdlen = sprintf(conn_cmd, "at+cwjap=\"%s\",\"%s\"\r\n", SSID,
 8001b1a:	4638      	mov	r0, r7
 8001b1c:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <esp8266_wifi_connect+0x5c>)
 8001b1e:	4a11      	ldr	r2, [pc, #68]	; (8001b64 <esp8266_wifi_connect+0x60>)
 8001b20:	4911      	ldr	r1, [pc, #68]	; (8001b68 <esp8266_wifi_connect+0x64>)
 8001b22:	f008 fea7 	bl	800a874 <siprintf>
 8001b26:	6378      	str	r0, [r7, #52]	; 0x34
	PASSWORD);
	Serial_Flush();
 8001b28:	f7ff fc0e 	bl	8001348 <Serial_Flush>
	esp8266_send_cmd("at+cwmode=1\r\n", TIMEOUT);
 8001b2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b30:	480e      	ldr	r0, [pc, #56]	; (8001b6c <esp8266_wifi_connect+0x68>)
 8001b32:	f7ff ff53 	bl	80019dc <esp8266_send_cmd>
	esp8266_tx((uint8_t*) conn_cmd, cmdlen);
 8001b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff3c 	bl	80019bc <esp8266_tx>

	USB_SerialPrint("Connecting to Wifi:%s\n", SSID);
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <esp8266_wifi_connect+0x60>)
 8001b46:	480a      	ldr	r0, [pc, #40]	; (8001b70 <esp8266_wifi_connect+0x6c>)
 8001b48:	f7ff fcd6 	bl	80014f8 <USB_SerialPrint>

	return WaitForResponse("OK", 5000); //Max wait for 5seconds
 8001b4c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001b50:	4808      	ldr	r0, [pc, #32]	; (8001b74 <esp8266_wifi_connect+0x70>)
 8001b52:	f7ff fded 	bl	8001730 <WaitForResponse>
 8001b56:	4603      	mov	r3, r0

}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3738      	adds	r7, #56	; 0x38
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	0800c5dc 	.word	0x0800c5dc
 8001b64:	0800c5f0 	.word	0x0800c5f0
 8001b68:	0800c600 	.word	0x0800c600
 8001b6c:	0800c618 	.word	0x0800c618
 8001b70:	0800c628 	.word	0x0800c628
 8001b74:	0800c594 	.word	0x0800c594

08001b78 <get_ip_address>:

static void get_ip_address() {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
	char *prx;
	char *cmd = "at+cifsr\r\n";
 8001b7e:	4b1f      	ldr	r3, [pc, #124]	; (8001bfc <get_ip_address+0x84>)
 8001b80:	607b      	str	r3, [r7, #4]
	esp8266_tx((uint8_t*) cmd, strlen(cmd));
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7fe fb2c 	bl	80001e0 <strlen>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff14 	bl	80019bc <esp8266_tx>
	prx = Serial_ReadLine();
 8001b94:	f7ff fc36 	bl	8001404 <Serial_ReadLine>
 8001b98:	6038      	str	r0, [r7, #0]
	if (strncmp(prx, "+CIFSR", 6) == 0) {
 8001b9a:	2206      	movs	r2, #6
 8001b9c:	4918      	ldr	r1, [pc, #96]	; (8001c00 <get_ip_address+0x88>)
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f009 f9de 	bl	800af60 <strncmp>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d125      	bne.n	8001bf6 <get_ip_address+0x7e>
		int r_idx = 14;
 8001baa:	230e      	movs	r3, #14
 8001bac:	60fb      	str	r3, [r7, #12]
		int w_idx = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60bb      	str	r3, [r7, #8]
		memset(ip_address, 0, sizeof(ip_address));
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4813      	ldr	r0, [pc, #76]	; (8001c04 <get_ip_address+0x8c>)
 8001bb8:	f009 f9e6 	bl	800af88 <memset>
		while (prx[r_idx] != '"') {
 8001bbc:	e00b      	b.n	8001bd6 <get_ip_address+0x5e>
			ip_address[w_idx++] = prx[r_idx];
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	441a      	add	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	1c59      	adds	r1, r3, #1
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	7811      	ldrb	r1, [r2, #0]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	; (8001c04 <get_ip_address+0x8c>)
 8001bce:	54d1      	strb	r1, [r2, r3]
			r_idx++;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
		while (prx[r_idx] != '"') {
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b22      	cmp	r3, #34	; 0x22
 8001be0:	d1ed      	bne.n	8001bbe <get_ip_address+0x46>
		}
		if (!WaitForResponse("OK", TIMEOUT))
 8001be2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001be6:	4808      	ldr	r0, [pc, #32]	; (8001c08 <get_ip_address+0x90>)
 8001be8:	f7ff fda2 	bl	8001730 <WaitForResponse>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
			return;

	}

}
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	0800c640 	.word	0x0800c640
 8001c00:	0800c64c 	.word	0x0800c64c
 8001c04:	20000824 	.word	0x20000824
 8001c08:	0800c594 	.word	0x0800c594

08001c0c <get_wifi_details>:

static void get_wifi_details() {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
	char *prx;
	char *cmd = "at+cwjap?\r\n";
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <get_wifi_details+0x94>)
 8001c14:	607b      	str	r3, [r7, #4]
	esp8266_tx((uint8_t*) cmd, strlen(cmd));
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7fe fae2 	bl	80001e0 <strlen>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff feca 	bl	80019bc <esp8266_tx>
	prx = Serial_ReadLine();
 8001c28:	f7ff fbec 	bl	8001404 <Serial_ReadLine>
 8001c2c:	6038      	str	r0, [r7, #0]

	if (strncmp(prx, "+CWJAP", 6) == 0) {
 8001c2e:	2206      	movs	r2, #6
 8001c30:	491c      	ldr	r1, [pc, #112]	; (8001ca4 <get_wifi_details+0x98>)
 8001c32:	6838      	ldr	r0, [r7, #0]
 8001c34:	f009 f994 	bl	800af60 <strncmp>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d12c      	bne.n	8001c98 <get_wifi_details+0x8c>
		int r_idx = 8;
 8001c3e:	2308      	movs	r3, #8
 8001c40:	60fb      	str	r3, [r7, #12]
		int w_idx = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60bb      	str	r3, [r7, #8]
		memset(wifi, 0, sizeof(wifi));
 8001c46:	2214      	movs	r2, #20
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4817      	ldr	r0, [pc, #92]	; (8001ca8 <get_wifi_details+0x9c>)
 8001c4c:	f009 f99c 	bl	800af88 <memset>
		while (prx[r_idx] != '"') {
 8001c50:	e00b      	b.n	8001c6a <get_wifi_details+0x5e>
			wifi[w_idx++] = prx[r_idx];
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	441a      	add	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c59      	adds	r1, r3, #1
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	7811      	ldrb	r1, [r2, #0]
 8001c60:	4a11      	ldr	r2, [pc, #68]	; (8001ca8 <get_wifi_details+0x9c>)
 8001c62:	54d1      	strb	r1, [r2, r3]
			r_idx++;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3301      	adds	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
		while (prx[r_idx] != '"') {
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b22      	cmp	r3, #34	; 0x22
 8001c74:	d1ed      	bne.n	8001c52 <get_wifi_details+0x46>
		}
		if (!WaitForResponse("OK", TIMEOUT))
 8001c76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c7a:	480c      	ldr	r0, [pc, #48]	; (8001cac <get_wifi_details+0xa0>)
 8001c7c:	f7ff fd58 	bl	8001730 <WaitForResponse>
 8001c80:	4603      	mov	r3, r0
 8001c82:	f083 0301 	eor.w	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d104      	bne.n	8001c96 <get_wifi_details+0x8a>
			return;

		USB_SerialPrint("Connected to WiFi: %s\n", wifi);
 8001c8c:	4906      	ldr	r1, [pc, #24]	; (8001ca8 <get_wifi_details+0x9c>)
 8001c8e:	4808      	ldr	r0, [pc, #32]	; (8001cb0 <get_wifi_details+0xa4>)
 8001c90:	f7ff fc32 	bl	80014f8 <USB_SerialPrint>
 8001c94:	e000      	b.n	8001c98 <get_wifi_details+0x8c>
			return;
 8001c96:	bf00      	nop

	}

}
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	0800c654 	.word	0x0800c654
 8001ca4:	0800c660 	.word	0x0800c660
 8001ca8:	20000834 	.word	0x20000834
 8001cac:	0800c594 	.word	0x0800c594
 8001cb0:	0800c668 	.word	0x0800c668

08001cb4 <esp8266_reset>:

bool esp8266_reset() {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
	char *cmd = "at+rst\r\n";
 8001cba:	4b0a      	ldr	r3, [pc, #40]	; (8001ce4 <esp8266_reset+0x30>)
 8001cbc:	607b      	str	r3, [r7, #4]
	esp8266_tx((uint8_t*) cmd, strlen(cmd));
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe fa8e 	bl	80001e0 <strlen>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fe76 	bl	80019bc <esp8266_tx>
	return WaitForResponse("WIFI GOT IP", 4000);
 8001cd0:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <esp8266_reset+0x34>)
 8001cd6:	f7ff fd2b 	bl	8001730 <WaitForResponse>
 8001cda:	4603      	mov	r3, r0

}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	0800c680 	.word	0x0800c680
 8001ce8:	0800c68c 	.word	0x0800c68c

08001cec <esp8266_init>:

bool esp8266_init(UART_HandleTypeDef *huart) {
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	6078      	str	r0, [r7, #4]

	Serial_Init(huart);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fbe1 	bl	80014bc <Serial_Init>
	if (!esp8266_reset()) { // if reset function returns false, there is a chance that wifi is not connected. Try to connect here.
 8001cfa:	f7ff ffdb 	bl	8001cb4 <esp8266_reset>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f083 0301 	eor.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <esp8266_init+0x32>
		if (!esp8266_wifi_connect())
 8001d0a:	f7ff fefb 	bl	8001b04 <esp8266_wifi_connect>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f083 0301 	eor.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <esp8266_init+0x32>
			return false;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e03a      	b.n	8001d94 <esp8266_init+0xa8>

	}
	esp8266_send_cmd("ate0\r\n", TIMEOUT); //Disable command echo
 8001d1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d22:	481e      	ldr	r0, [pc, #120]	; (8001d9c <esp8266_init+0xb0>)
 8001d24:	f7ff fe5a 	bl	80019dc <esp8266_send_cmd>
	get_wifi_details();
 8001d28:	f7ff ff70 	bl	8001c0c <get_wifi_details>
	get_ip_address();
 8001d2c:	f7ff ff24 	bl	8001b78 <get_ip_address>
	oled_clearDisplay();
 8001d30:	f000 f91a 	bl	8001f68 <oled_clearDisplay>
	oled_printString("WiFi SSID:", 0, 0, 16, true);
 8001d34:	2301      	movs	r3, #1
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2310      	movs	r3, #16
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	4818      	ldr	r0, [pc, #96]	; (8001da0 <esp8266_init+0xb4>)
 8001d40:	f000 fa18 	bl	8002174 <oled_printString>
	oled_printString(wifi, 0, 16, 16, false);
 8001d44:	2300      	movs	r3, #0
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2310      	movs	r3, #16
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4815      	ldr	r0, [pc, #84]	; (8001da4 <esp8266_init+0xb8>)
 8001d50:	f000 fa10 	bl	8002174 <oled_printString>
	oled_printString("IP Address:", 0, 32, 16, true);
 8001d54:	2301      	movs	r3, #1
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2310      	movs	r3, #16
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4812      	ldr	r0, [pc, #72]	; (8001da8 <esp8266_init+0xbc>)
 8001d60:	f000 fa08 	bl	8002174 <oled_printString>
	oled_printString(ip_address, 0, 48, 16, false);
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2310      	movs	r3, #16
 8001d6a:	2230      	movs	r2, #48	; 0x30
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	480f      	ldr	r0, [pc, #60]	; (8001dac <esp8266_init+0xc0>)
 8001d70:	f000 fa00 	bl	8002174 <oled_printString>
	oled_display();
 8001d74:	f000 f8ae 	bl	8001ed4 <oled_display>
	if (!esp8266_send_cmd("at+cipmux=1\r\n", TIMEOUT))
 8001d78:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <esp8266_init+0xc4>)
 8001d7e:	f7ff fe2d 	bl	80019dc <esp8266_send_cmd>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f083 0301 	eor.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <esp8266_init+0xa6>
		return false;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <esp8266_init+0xa8>
	return true;
 8001d92:	2301      	movs	r3, #1

}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	0800c698 	.word	0x0800c698
 8001da0:	0800c6a0 	.word	0x0800c6a0
 8001da4:	20000834 	.word	0x20000834
 8001da8:	0800c6ac 	.word	0x0800c6ac
 8001dac:	20000824 	.word	0x20000824
 8001db0:	0800c6b8 	.word	0x0800c6b8

08001db4 <Error_Handler>:

static uint8_t i2c_tx_buf_temp[129];

static I2C_HandleTypeDef hi2c1;

static void Error_Handler(void) {
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dbc:	e7fe      	b.n	8001dbc <Error_Handler+0x8>
	...

08001dc0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dc6:	4a13      	ldr	r2, [pc, #76]	; (8001e14 <MX_I2C1_Init+0x54>)
 8001dc8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dcc:	4a12      	ldr	r2, [pc, #72]	; (8001e18 <MX_I2C1_Init+0x58>)
 8001dce:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001de2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001dfc:	4804      	ldr	r0, [pc, #16]	; (8001e10 <MX_I2C1_Init+0x50>)
 8001dfe:	f000 fe7d 	bl	8002afc <HAL_I2C_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001e08:	f7ff ffd4 	bl	8001db4 <Error_Handler>
	}

}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000cd4 	.word	0x20000cd4
 8001e14:	40005400 	.word	0x40005400
 8001e18:	00061a80 	.word	0x00061a80

08001e1c <oled_sendCommand>:

void oled_sendCommand(uint8_t cmd) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd_buf[2] = { 0 };
 8001e26:	2300      	movs	r3, #0
 8001e28:	81bb      	strh	r3, [r7, #12]
	cmd_buf[0] = TYPE_CMD;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	733b      	strb	r3, [r7, #12]
	cmd_buf[1] = cmd;
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, cmd_buf, 2, HAL_MAX_DELAY);
 8001e32:	f107 020c 	add.w	r2, r7, #12
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	2178      	movs	r1, #120	; 0x78
 8001e40:	4803      	ldr	r0, [pc, #12]	; (8001e50 <oled_sendCommand+0x34>)
 8001e42:	f000 ff9f 	bl	8002d84 <HAL_I2C_Master_Transmit>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000cd4 	.word	0x20000cd4

08001e54 <oled_setCursorPos>:

void oled_setCursorPos(uint8_t x, uint8_t y) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	71fb      	strb	r3, [r7, #7]
 8001e60:	4613      	mov	r3, r2
 8001e62:	71bb      	strb	r3, [r7, #6]

	// the SH1106 display starts at x = 2! (there are two columns of off screen pixels)
	x += 2;
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	3302      	adds	r3, #2
 8001e68:	71fb      	strb	r3, [r7, #7]
	oled_sendCommand(0xB0 + (y >> 3));
 8001e6a:	79bb      	ldrb	r3, [r7, #6]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	3b50      	subs	r3, #80	; 0x50
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ffd1 	bl	8001e1c <oled_sendCommand>
	// set lower column address  (00H - 0FH) => need the upper half only - THIS IS THE x, 0->127
	oled_sendCommand((x & 0x0F));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ffca 	bl	8001e1c <oled_sendCommand>
	// set higher column address (10H - 1FH) => 0x10 | (2 >> 4) = 10
	oled_sendCommand(0x10 + (x >> 4));
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	3310      	adds	r3, #16
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ffc2 	bl	8001e1c <oled_sendCommand>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <oled_setCursor>:

void oled_setCursor(uint8_t x, uint8_t y) {
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460a      	mov	r2, r1
 8001eaa:	71fb      	strb	r3, [r7, #7]
 8001eac:	4613      	mov	r3, r2
 8001eae:	71bb      	strb	r3, [r7, #6]

	disp_column = x;
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <oled_setCursor+0x2c>)
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	7013      	strb	r3, [r2, #0]
	disp_row = y / 8;
 8001eb6:	79bb      	ldrb	r3, [r7, #6]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <oled_setCursor+0x30>)
 8001ebe:	701a      	strb	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	20000c4d 	.word	0x20000c4d
 8001ed0:	20000c4c 	.word	0x20000c4c

08001ed4 <oled_display>:

void oled_display() {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af02      	add	r7, sp, #8

	i2c_tx_buf_temp[0] = TYPE_DATA;
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <oled_display+0x5c>)
 8001edc:	2240      	movs	r2, #64	; 0x40
 8001ede:	701a      	strb	r2, [r3, #0]
	for (uint8_t page = 0; page < 8; page++) {
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	e01b      	b.n	8001f1e <oled_display+0x4a>
		memcpy(&i2c_tx_buf_temp[1], dispBuffer[page], 128);
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	01db      	lsls	r3, r3, #7
 8001eea:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <oled_display+0x60>)
 8001eec:	4413      	add	r3, r2
 8001eee:	2280      	movs	r2, #128	; 0x80
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4811      	ldr	r0, [pc, #68]	; (8001f38 <oled_display+0x64>)
 8001ef4:	f009 f953 	bl	800b19e <memcpy>

		oled_setCursorPos(0, page * 8);
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4619      	mov	r1, r3
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff ffa7 	bl	8001e54 <oled_setCursorPos>

		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, i2c_tx_buf_temp, 129,
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2381      	movs	r3, #129	; 0x81
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <oled_display+0x5c>)
 8001f10:	2178      	movs	r1, #120	; 0x78
 8001f12:	480a      	ldr	r0, [pc, #40]	; (8001f3c <oled_display+0x68>)
 8001f14:	f000 ff36 	bl	8002d84 <HAL_I2C_Master_Transmit>
	for (uint8_t page = 0; page < 8; page++) {
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b07      	cmp	r3, #7
 8001f22:	d9e0      	bls.n	8001ee6 <oled_display+0x12>
				HAL_MAX_DELAY);
	}

}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3708      	adds	r7, #8
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000c50 	.word	0x20000c50
 8001f34:	2000084c 	.word	0x2000084c
 8001f38:	20000c51 	.word	0x20000c51
 8001f3c:	20000cd4 	.word	0x20000cd4

08001f40 <oled_setPageMode>:

void oled_setPageMode() {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	oled_sendCommand(0x20);
 8001f44:	2020      	movs	r0, #32
 8001f46:	f7ff ff69 	bl	8001e1c <oled_sendCommand>
	oled_sendCommand(PAGE_ADDRESSING_MODE);
 8001f4a:	2002      	movs	r0, #2
 8001f4c:	f7ff ff66 	bl	8001e1c <oled_sendCommand>
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <oled_setChargePump>:

void oled_setChargePump() {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	oled_sendCommand(0x8d);
 8001f58:	208d      	movs	r0, #141	; 0x8d
 8001f5a:	f7ff ff5f 	bl	8001e1c <oled_sendCommand>
	oled_sendCommand(0x14);
 8001f5e:	2014      	movs	r0, #20
 8001f60:	f7ff ff5c 	bl	8001e1c <oled_sendCommand>
}
 8001f64:	bf00      	nop
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <oled_clearDisplay>:

	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, temp_buff, 129,
			HAL_MAX_DELAY);
}

void oled_clearDisplay() {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0

	for (uint8_t page = 0; page < 8; page++) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71fb      	strb	r3, [r7, #7]
 8001f72:	e014      	b.n	8001f9e <oled_clearDisplay+0x36>
		for (uint8_t column = 0; column < 128; column++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	71bb      	strb	r3, [r7, #6]
 8001f78:	e00a      	b.n	8001f90 <oled_clearDisplay+0x28>
			dispBuffer[page][column] = 0;
 8001f7a:	79fa      	ldrb	r2, [r7, #7]
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	490d      	ldr	r1, [pc, #52]	; (8001fb4 <oled_clearDisplay+0x4c>)
 8001f80:	01d2      	lsls	r2, r2, #7
 8001f82:	440a      	add	r2, r1
 8001f84:	4413      	add	r3, r2
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
		for (uint8_t column = 0; column < 128; column++)
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	71bb      	strb	r3, [r7, #6]
 8001f90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	daf0      	bge.n	8001f7a <oled_clearDisplay+0x12>
	for (uint8_t page = 0; page < 8; page++) {
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	71fb      	strb	r3, [r7, #7]
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	2b07      	cmp	r3, #7
 8001fa2:	d9e7      	bls.n	8001f74 <oled_clearDisplay+0xc>
	}

}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	2000084c 	.word	0x2000084c

08001fb8 <oled_init>:

void oled_init() {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
	MX_I2C1_Init();
 8001fbc:	f7ff ff00 	bl	8001dc0 <MX_I2C1_Init>
	oled_sendCommand(DISP_ON);
 8001fc0:	20af      	movs	r0, #175	; 0xaf
 8001fc2:	f7ff ff2b 	bl	8001e1c <oled_sendCommand>
	oled_sendCommand(NORM_MODE);
 8001fc6:	20a6      	movs	r0, #166	; 0xa6
 8001fc8:	f7ff ff28 	bl	8001e1c <oled_sendCommand>
	oled_sendCommand(CMD_ROL);        // Rotate 90 degrees
 8001fcc:	20a1      	movs	r0, #161	; 0xa1
 8001fce:	f7ff ff25 	bl	8001e1c <oled_sendCommand>
	oled_sendCommand(CMD_SCAN_COM63); // start scan from COM63 to COM0
 8001fd2:	20c8      	movs	r0, #200	; 0xc8
 8001fd4:	f7ff ff22 	bl	8001e1c <oled_sendCommand>
	oled_setPageMode();
 8001fd8:	f7ff ffb2 	bl	8001f40 <oled_setPageMode>
	oled_setChargePump();
 8001fdc:	f7ff ffba 	bl	8001f54 <oled_setChargePump>
	oled_clearDisplay();
 8001fe0:	f7ff ffc2 	bl	8001f68 <oled_clearDisplay>
	oled_display();
 8001fe4:	f7ff ff76 	bl	8001ed4 <oled_display>
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}

08001fec <oled_printChar>:

void oled_printChar(char C, uint8_t xpos, uint8_t ypos, uint8_t font_size,
bool Highlight) {
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	71fb      	strb	r3, [r7, #7]
 8001ffe:	4603      	mov	r3, r0
 8002000:	71bb      	strb	r3, [r7, #6]
 8002002:	460b      	mov	r3, r1
 8002004:	717b      	strb	r3, [r7, #5]
 8002006:	4613      	mov	r3, r2
 8002008:	713b      	strb	r3, [r7, #4]
	char chr;

	if (font_size == 6) {
 800200a:	793b      	ldrb	r3, [r7, #4]
 800200c:	2b06      	cmp	r3, #6
 800200e:	d12d      	bne.n	800206c <oled_printChar+0x80>
		for (uint8_t i = 0; i < 6; i++) {
 8002010:	2300      	movs	r3, #0
 8002012:	73bb      	strb	r3, [r7, #14]
 8002014:	e026      	b.n	8002064 <oled_printChar+0x78>
			chr = font6x8[((int) C - 32) * 6 + i];
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	f1a3 0220 	sub.w	r2, r3, #32
 800201c:	4613      	mov	r3, r2
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4413      	add	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	461a      	mov	r2, r3
 8002026:	7bbb      	ldrb	r3, [r7, #14]
 8002028:	4413      	add	r3, r2
 800202a:	4a4c      	ldr	r2, [pc, #304]	; (800215c <oled_printChar+0x170>)
 800202c:	5cd3      	ldrb	r3, [r2, r3]
 800202e:	73fb      	strb	r3, [r7, #15]
			if (Highlight)
 8002030:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <oled_printChar+0x52>
				chr = ~chr;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	43db      	mvns	r3, r3
 800203c:	73fb      	strb	r3, [r7, #15]

			dispBuffer[disp_row][disp_column++] = chr;
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <oled_printChar+0x174>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	4b47      	ldr	r3, [pc, #284]	; (8002164 <oled_printChar+0x178>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	b2d1      	uxtb	r1, r2
 800204c:	4a45      	ldr	r2, [pc, #276]	; (8002164 <oled_printChar+0x178>)
 800204e:	7011      	strb	r1, [r2, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	4a45      	ldr	r2, [pc, #276]	; (8002168 <oled_printChar+0x17c>)
 8002054:	01c3      	lsls	r3, r0, #7
 8002056:	4413      	add	r3, r2
 8002058:	440b      	add	r3, r1
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 6; i++) {
 800205e:	7bbb      	ldrb	r3, [r7, #14]
 8002060:	3301      	adds	r3, #1
 8002062:	73bb      	strb	r3, [r7, #14]
 8002064:	7bbb      	ldrb	r3, [r7, #14]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d9d5      	bls.n	8002016 <oled_printChar+0x2a>
 800206a:	e074      	b.n	8002156 <oled_printChar+0x16a>
		}
	} else if (font_size == 16) {
 800206c:	793b      	ldrb	r3, [r7, #4]
 800206e:	2b10      	cmp	r3, #16
 8002070:	d170      	bne.n	8002154 <oled_printChar+0x168>
		oled_setCursor(xpos + (char_cnt) * 8, ypos);
 8002072:	4b3e      	ldr	r3, [pc, #248]	; (800216c <oled_printChar+0x180>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	b2da      	uxtb	r2, r3
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	4413      	add	r3, r2
 800207e:	b2db      	uxtb	r3, r3
 8002080:	797a      	ldrb	r2, [r7, #5]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff0b 	bl	8001ea0 <oled_setCursor>

		for (uint8_t i = 0; i < 8; i++) {
 800208a:	2300      	movs	r3, #0
 800208c:	737b      	strb	r3, [r7, #13]
 800208e:	e021      	b.n	80020d4 <oled_printChar+0xe8>
			chr = font16x8[((int) C - 32) * 16 + i];
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	3b20      	subs	r3, #32
 8002094:	011a      	lsls	r2, r3, #4
 8002096:	7b7b      	ldrb	r3, [r7, #13]
 8002098:	4413      	add	r3, r2
 800209a:	4a35      	ldr	r2, [pc, #212]	; (8002170 <oled_printChar+0x184>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	73fb      	strb	r3, [r7, #15]
			if (Highlight)
 80020a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <oled_printChar+0xc2>
				chr = ~chr;
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	73fb      	strb	r3, [r7, #15]
			dispBuffer[disp_row][disp_column++] = chr;
 80020ae:	4b2c      	ldr	r3, [pc, #176]	; (8002160 <oled_printChar+0x174>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <oled_printChar+0x178>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	b2d1      	uxtb	r1, r2
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <oled_printChar+0x178>)
 80020be:	7011      	strb	r1, [r2, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4a29      	ldr	r2, [pc, #164]	; (8002168 <oled_printChar+0x17c>)
 80020c4:	01c3      	lsls	r3, r0, #7
 80020c6:	4413      	add	r3, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 8; i++) {
 80020ce:	7b7b      	ldrb	r3, [r7, #13]
 80020d0:	3301      	adds	r3, #1
 80020d2:	737b      	strb	r3, [r7, #13]
 80020d4:	7b7b      	ldrb	r3, [r7, #13]
 80020d6:	2b07      	cmp	r3, #7
 80020d8:	d9da      	bls.n	8002090 <oled_printChar+0xa4>
		}

		oled_setCursor(xpos + (char_cnt) * 8, ypos + 8);
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <oled_printChar+0x180>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	4413      	add	r3, r2
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	797b      	ldrb	r3, [r7, #5]
 80020ea:	3308      	adds	r3, #8
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4619      	mov	r1, r3
 80020f0:	4610      	mov	r0, r2
 80020f2:	f7ff fed5 	bl	8001ea0 <oled_setCursor>

		for (uint8_t i = 8; i < 16; i++) {
 80020f6:	2308      	movs	r3, #8
 80020f8:	733b      	strb	r3, [r7, #12]
 80020fa:	e021      	b.n	8002140 <oled_printChar+0x154>
			chr = font16x8[((int) C - 32) * 16 + i];
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	3b20      	subs	r3, #32
 8002100:	011a      	lsls	r2, r3, #4
 8002102:	7b3b      	ldrb	r3, [r7, #12]
 8002104:	4413      	add	r3, r2
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <oled_printChar+0x184>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	73fb      	strb	r3, [r7, #15]
			if (Highlight)
 800210c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <oled_printChar+0x12e>
				chr = ~chr;
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	43db      	mvns	r3, r3
 8002118:	73fb      	strb	r3, [r7, #15]

			dispBuffer[disp_row][disp_column++] = chr;
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <oled_printChar+0x174>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <oled_printChar+0x178>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	b2d1      	uxtb	r1, r2
 8002128:	4a0e      	ldr	r2, [pc, #56]	; (8002164 <oled_printChar+0x178>)
 800212a:	7011      	strb	r1, [r2, #0]
 800212c:	4619      	mov	r1, r3
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <oled_printChar+0x17c>)
 8002130:	01c3      	lsls	r3, r0, #7
 8002132:	4413      	add	r3, r2
 8002134:	440b      	add	r3, r1
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 8; i < 16; i++) {
 800213a:	7b3b      	ldrb	r3, [r7, #12]
 800213c:	3301      	adds	r3, #1
 800213e:	733b      	strb	r3, [r7, #12]
 8002140:	7b3b      	ldrb	r3, [r7, #12]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	d9da      	bls.n	80020fc <oled_printChar+0x110>
		}

		char_cnt++;
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <oled_printChar+0x180>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <oled_printChar+0x180>)
 8002150:	701a      	strb	r2, [r3, #0]
 8002152:	e000      	b.n	8002156 <oled_printChar+0x16a>
	} else
		return;
 8002154:	bf00      	nop
}
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	bd90      	pop	{r4, r7, pc}
 800215c:	0800c728 	.word	0x0800c728
 8002160:	20000c4c 	.word	0x20000c4c
 8002164:	20000c4d 	.word	0x20000c4d
 8002168:	2000084c 	.word	0x2000084c
 800216c:	20000848 	.word	0x20000848
 8002170:	0800c96c 	.word	0x0800c96c

08002174 <oled_printString>:

void oled_printString(const char *str, uint8_t xpos, uint8_t ypos,
		uint8_t font_size, bool Highlight) {
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b087      	sub	sp, #28
 8002178:	af02      	add	r7, sp, #8
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	4608      	mov	r0, r1
 800217e:	4611      	mov	r1, r2
 8002180:	461a      	mov	r2, r3
 8002182:	4603      	mov	r3, r0
 8002184:	70fb      	strb	r3, [r7, #3]
 8002186:	460b      	mov	r3, r1
 8002188:	70bb      	strb	r3, [r7, #2]
 800218a:	4613      	mov	r3, r2
 800218c:	707b      	strb	r3, [r7, #1]
	uint8_t len = strlen(str);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe f826 	bl	80001e0 <strlen>
 8002194:	4603      	mov	r3, r0
 8002196:	73bb      	strb	r3, [r7, #14]
	char_cnt = 0;
 8002198:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <oled_printString+0x74>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
	oled_setCursor(xpos, ypos);
 800219e:	78ba      	ldrb	r2, [r7, #2]
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fe7b 	bl	8001ea0 <oled_setCursor>
	for (uint8_t i = 0; i < len; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e00f      	b.n	80021d0 <oled_printString+0x5c>
		oled_printChar(str[i], xpos, ypos, font_size, Highlight);
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	7818      	ldrb	r0, [r3, #0]
 80021b8:	787c      	ldrb	r4, [r7, #1]
 80021ba:	78ba      	ldrb	r2, [r7, #2]
 80021bc:	78f9      	ldrb	r1, [r7, #3]
 80021be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	4623      	mov	r3, r4
 80021c6:	f7ff ff11 	bl	8001fec <oled_printChar>
	for (uint8_t i = 0; i < len; i++)
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	3301      	adds	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	7bbb      	ldrb	r3, [r7, #14]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d3eb      	bcc.n	80021b0 <oled_printString+0x3c>
	char_cnt = 0;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <oled_printString+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000848 	.word	0x20000848

080021ec <oled_print7Seg_digit>:

void oled_print7Seg_digit(char C, uint8_t xpos, uint8_t ypos) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
 80021f6:	460b      	mov	r3, r1
 80021f8:	71bb      	strb	r3, [r7, #6]
 80021fa:	4613      	mov	r3, r2
 80021fc:	717b      	strb	r3, [r7, #5]
	char chr;

	for (uint8_t column = 0; column < 16; column++) {
 80021fe:	2300      	movs	r3, #0
 8002200:	73fb      	strb	r3, [r7, #15]
 8002202:	e040      	b.n	8002286 <oled_print7Seg_digit+0x9a>
		for (uint8_t page = 0; page < 3; page++) {
 8002204:	2300      	movs	r3, #0
 8002206:	73bb      	strb	r3, [r7, #14]
 8002208:	e037      	b.n	800227a <oled_print7Seg_digit+0x8e>
			oled_setCursor(xpos + column + (num_cnt * 16), ypos + page * 8);
 800220a:	79ba      	ldrb	r2, [r7, #6]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	4413      	add	r3, r2
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <oled_print7Seg_digit+0xb4>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	b2db      	uxtb	r3, r3
 800221a:	4413      	add	r3, r2
 800221c:	b2d8      	uxtb	r0, r3
 800221e:	7bbb      	ldrb	r3, [r7, #14]
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	b2da      	uxtb	r2, r3
 8002224:	797b      	ldrb	r3, [r7, #5]
 8002226:	4413      	add	r3, r2
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4619      	mov	r1, r3
 800222c:	f7ff fe38 	bl	8001ea0 <oled_setCursor>
			chr = font_7SEG[((int) C - 48) * 48 + (page + column * 3)];
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4618      	mov	r0, r3
 8002240:	7bb9      	ldrb	r1, [r7, #14]
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	440b      	add	r3, r1
 800224c:	4403      	add	r3, r0
 800224e:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <oled_print7Seg_digit+0xb8>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	737b      	strb	r3, [r7, #13]
			dispBuffer[disp_row][disp_column++] = chr;
 8002254:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <oled_print7Seg_digit+0xbc>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <oled_print7Seg_digit+0xc0>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	b2d1      	uxtb	r1, r2
 8002262:	4a12      	ldr	r2, [pc, #72]	; (80022ac <oled_print7Seg_digit+0xc0>)
 8002264:	7011      	strb	r1, [r2, #0]
 8002266:	4619      	mov	r1, r3
 8002268:	4a11      	ldr	r2, [pc, #68]	; (80022b0 <oled_print7Seg_digit+0xc4>)
 800226a:	01c3      	lsls	r3, r0, #7
 800226c:	4413      	add	r3, r2
 800226e:	440b      	add	r3, r1
 8002270:	7b7a      	ldrb	r2, [r7, #13]
 8002272:	701a      	strb	r2, [r3, #0]
		for (uint8_t page = 0; page < 3; page++) {
 8002274:	7bbb      	ldrb	r3, [r7, #14]
 8002276:	3301      	adds	r3, #1
 8002278:	73bb      	strb	r3, [r7, #14]
 800227a:	7bbb      	ldrb	r3, [r7, #14]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d9c4      	bls.n	800220a <oled_print7Seg_digit+0x1e>
	for (uint8_t column = 0; column < 16; column++) {
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	3301      	adds	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b0f      	cmp	r3, #15
 800228a:	d9bb      	bls.n	8002204 <oled_print7Seg_digit+0x18>
		}
	}

	num_cnt++;
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <oled_print7Seg_digit+0xb4>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <oled_print7Seg_digit+0xb4>)
 8002296:	701a      	strb	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000849 	.word	0x20000849
 80022a4:	0800cf5c 	.word	0x0800cf5c
 80022a8:	20000c4c 	.word	0x20000c4c
 80022ac:	20000c4d 	.word	0x20000c4d
 80022b0:	2000084c 	.word	0x2000084c

080022b4 <oled_print7Seg_number>:

void oled_print7Seg_number(const char *str, uint8_t xpos, uint8_t ypos) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	70fb      	strb	r3, [r7, #3]
 80022c0:	4613      	mov	r3, r2
 80022c2:	70bb      	strb	r3, [r7, #2]
	uint8_t len = strlen(str);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7fd ff8b 	bl	80001e0 <strlen>
 80022ca:	4603      	mov	r3, r0
 80022cc:	73bb      	strb	r3, [r7, #14]
	num_cnt = 0;
 80022ce:	4b11      	ldr	r3, [pc, #68]	; (8002314 <oled_print7Seg_number+0x60>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
	oled_setCursor(xpos, ypos);
 80022d4:	78ba      	ldrb	r2, [r7, #2]
 80022d6:	78fb      	ldrb	r3, [r7, #3]
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fde0 	bl	8001ea0 <oled_setCursor>

	for (uint8_t i = 0; i < len; i++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
 80022e4:	e00b      	b.n	80022fe <oled_print7Seg_number+0x4a>
		oled_print7Seg_digit(str[i], xpos, ypos);
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4413      	add	r3, r2
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	78ba      	ldrb	r2, [r7, #2]
 80022f0:	78f9      	ldrb	r1, [r7, #3]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff ff7a 	bl	80021ec <oled_print7Seg_digit>
	for (uint8_t i = 0; i < len; i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	429a      	cmp	r2, r3
 8002304:	d3ef      	bcc.n	80022e6 <oled_print7Seg_number+0x32>
	num_cnt = 0;
 8002306:	4b03      	ldr	r3, [pc, #12]	; (8002314 <oled_print7Seg_number+0x60>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000849 	.word	0x20000849

08002318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <HAL_Init+0x40>)
 8002322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <HAL_Init+0x40>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_Init+0x40>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a07      	ldr	r2, [pc, #28]	; (8002358 <HAL_Init+0x40>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002340:	2003      	movs	r0, #3
 8002342:	f000 f94f 	bl	80025e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002346:	200f      	movs	r0, #15
 8002348:	f000 f808 	bl	800235c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800234c:	f7fe fbee 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023c00 	.word	0x40023c00

0800235c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_InitTick+0x54>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_InitTick+0x58>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	4619      	mov	r1, r3
 800236e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002372:	fbb3 f3f1 	udiv	r3, r3, r1
 8002376:	fbb2 f3f3 	udiv	r3, r2, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f967 	bl	800264e <HAL_SYSTICK_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e00e      	b.n	80023a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b0f      	cmp	r3, #15
 800238e:	d80a      	bhi.n	80023a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002398:	f000 f92f 	bl	80025fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800239c:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <HAL_InitTick+0x5c>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000000 	.word	0x20000000
 80023b4:	2000002c 	.word	0x2000002c
 80023b8:	20000028 	.word	0x20000028

080023bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_IncTick+0x20>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_IncTick+0x24>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_IncTick+0x24>)
 80023ce:	6013      	str	r3, [r2, #0]
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	2000002c 	.word	0x2000002c
 80023e0:	20000d28 	.word	0x20000d28

080023e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return uwTick;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_GetTick+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000d28 	.word	0x20000d28

080023fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff ffee 	bl	80023e4 <HAL_GetTick>
 8002408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002414:	d005      	beq.n	8002422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_Delay+0x44>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	461a      	mov	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002422:	bf00      	nop
 8002424:	f7ff ffde 	bl	80023e4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	d8f7      	bhi.n	8002424 <HAL_Delay+0x28>
  {
  }
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	2000002c 	.word	0x2000002c

08002444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002460:	4013      	ands	r3, r2
 8002462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800246c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002476:	4a04      	ldr	r2, [pc, #16]	; (8002488 <__NVIC_SetPriorityGrouping+0x44>)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	60d3      	str	r3, [r2, #12]
}
 800247c:	bf00      	nop
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	0a1b      	lsrs	r3, r3, #8
 8002496:	f003 0307 	and.w	r3, r3, #7
}
 800249a:	4618      	mov	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db0b      	blt.n	80024d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	f003 021f 	and.w	r2, r3, #31
 80024c0:	4907      	ldr	r1, [pc, #28]	; (80024e0 <__NVIC_EnableIRQ+0x38>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	2001      	movs	r0, #1
 80024ca:	fa00 f202 	lsl.w	r2, r0, r2
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e100 	.word	0xe000e100

080024e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	db0a      	blt.n	800250e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	490c      	ldr	r1, [pc, #48]	; (8002530 <__NVIC_SetPriority+0x4c>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	440b      	add	r3, r1
 8002508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800250c:	e00a      	b.n	8002524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4908      	ldr	r1, [pc, #32]	; (8002534 <__NVIC_SetPriority+0x50>)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3b04      	subs	r3, #4
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	440b      	add	r3, r1
 8002522:	761a      	strb	r2, [r3, #24]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000e100 	.word	0xe000e100
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002538:	b480      	push	{r7}
 800253a:	b089      	sub	sp, #36	; 0x24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f1c3 0307 	rsb	r3, r3, #7
 8002552:	2b04      	cmp	r3, #4
 8002554:	bf28      	it	cs
 8002556:	2304      	movcs	r3, #4
 8002558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3304      	adds	r3, #4
 800255e:	2b06      	cmp	r3, #6
 8002560:	d902      	bls.n	8002568 <NVIC_EncodePriority+0x30>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	3b03      	subs	r3, #3
 8002566:	e000      	b.n	800256a <NVIC_EncodePriority+0x32>
 8002568:	2300      	movs	r3, #0
 800256a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800256c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	401a      	ands	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	fa01 f303 	lsl.w	r3, r1, r3
 800258a:	43d9      	mvns	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002590:	4313      	orrs	r3, r2
         );
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b0:	d301      	bcc.n	80025b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00f      	b.n	80025d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <SysTick_Config+0x40>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025be:	210f      	movs	r1, #15
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c4:	f7ff ff8e 	bl	80024e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <SysTick_Config+0x40>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ce:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <SysTick_Config+0x40>)
 80025d0:	2207      	movs	r2, #7
 80025d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	e000e010 	.word	0xe000e010

080025e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff29 	bl	8002444 <__NVIC_SetPriorityGrouping>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b086      	sub	sp, #24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800260c:	f7ff ff3e 	bl	800248c <__NVIC_GetPriorityGrouping>
 8002610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	6978      	ldr	r0, [r7, #20]
 8002618:	f7ff ff8e 	bl	8002538 <NVIC_EncodePriority>
 800261c:	4602      	mov	r2, r0
 800261e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff5d 	bl	80024e4 <__NVIC_SetPriority>
}
 800262a:	bf00      	nop
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff31 	bl	80024a8 <__NVIC_EnableIRQ>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffa2 	bl	80025a0 <SysTick_Config>
 800265c:	4603      	mov	r3, r0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002674:	f7ff feb6 	bl	80023e4 <HAL_GetTick>
 8002678:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d008      	beq.n	8002698 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e052      	b.n	800273e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0216 	bic.w	r2, r2, #22
 80026a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d103      	bne.n	80026c8 <HAL_DMA_Abort+0x62>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0208 	bic.w	r2, r2, #8
 80026d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e8:	e013      	b.n	8002712 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ea:	f7ff fe7b 	bl	80023e4 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b05      	cmp	r3, #5
 80026f6:	d90c      	bls.n	8002712 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2203      	movs	r2, #3
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e015      	b.n	800273e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e4      	bne.n	80026ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002724:	223f      	movs	r2, #63	; 0x3f
 8002726:	409a      	lsls	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d004      	beq.n	8002764 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e00c      	b.n	800277e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2205      	movs	r2, #5
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
	...

0800278c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800278c:	b480      	push	{r7}
 800278e:	b089      	sub	sp, #36	; 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e159      	b.n	8002a5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	f040 8148 	bne.w	8002a56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d005      	beq.n	80027de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d130      	bne.n	8002840 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2203      	movs	r2, #3
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002814:	2201      	movs	r2, #1
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	091b      	lsrs	r3, r3, #4
 800282a:	f003 0201 	and.w	r2, r3, #1
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b03      	cmp	r3, #3
 800284a:	d017      	beq.n	800287c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d123      	bne.n	80028d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	220f      	movs	r2, #15
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	08da      	lsrs	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3208      	adds	r2, #8
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0203 	and.w	r2, r3, #3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80a2 	beq.w	8002a56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b57      	ldr	r3, [pc, #348]	; (8002a74 <HAL_GPIO_Init+0x2e8>)
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	4a56      	ldr	r2, [pc, #344]	; (8002a74 <HAL_GPIO_Init+0x2e8>)
 800291c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002920:	6453      	str	r3, [r2, #68]	; 0x44
 8002922:	4b54      	ldr	r3, [pc, #336]	; (8002a74 <HAL_GPIO_Init+0x2e8>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800292e:	4a52      	ldr	r2, [pc, #328]	; (8002a78 <HAL_GPIO_Init+0x2ec>)
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	089b      	lsrs	r3, r3, #2
 8002934:	3302      	adds	r3, #2
 8002936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	220f      	movs	r2, #15
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a49      	ldr	r2, [pc, #292]	; (8002a7c <HAL_GPIO_Init+0x2f0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d019      	beq.n	800298e <HAL_GPIO_Init+0x202>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a48      	ldr	r2, [pc, #288]	; (8002a80 <HAL_GPIO_Init+0x2f4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d013      	beq.n	800298a <HAL_GPIO_Init+0x1fe>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a47      	ldr	r2, [pc, #284]	; (8002a84 <HAL_GPIO_Init+0x2f8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00d      	beq.n	8002986 <HAL_GPIO_Init+0x1fa>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a46      	ldr	r2, [pc, #280]	; (8002a88 <HAL_GPIO_Init+0x2fc>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <HAL_GPIO_Init+0x1f6>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a45      	ldr	r2, [pc, #276]	; (8002a8c <HAL_GPIO_Init+0x300>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_GPIO_Init+0x1f2>
 800297a:	2304      	movs	r3, #4
 800297c:	e008      	b.n	8002990 <HAL_GPIO_Init+0x204>
 800297e:	2307      	movs	r3, #7
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x204>
 8002982:	2303      	movs	r3, #3
 8002984:	e004      	b.n	8002990 <HAL_GPIO_Init+0x204>
 8002986:	2302      	movs	r3, #2
 8002988:	e002      	b.n	8002990 <HAL_GPIO_Init+0x204>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_GPIO_Init+0x204>
 800298e:	2300      	movs	r3, #0
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f002 0203 	and.w	r2, r2, #3
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	4093      	lsls	r3, r2
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a0:	4935      	ldr	r1, [pc, #212]	; (8002a78 <HAL_GPIO_Init+0x2ec>)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ae:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <HAL_GPIO_Init+0x304>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029d2:	4a2f      	ldr	r2, [pc, #188]	; (8002a90 <HAL_GPIO_Init+0x304>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_GPIO_Init+0x304>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029fc:	4a24      	ldr	r2, [pc, #144]	; (8002a90 <HAL_GPIO_Init+0x304>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_GPIO_Init+0x304>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a26:	4a1a      	ldr	r2, [pc, #104]	; (8002a90 <HAL_GPIO_Init+0x304>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a2c:	4b18      	ldr	r3, [pc, #96]	; (8002a90 <HAL_GPIO_Init+0x304>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a50:	4a0f      	ldr	r2, [pc, #60]	; (8002a90 <HAL_GPIO_Init+0x304>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	f67f aea2 	bls.w	80027a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	bf00      	nop
 8002a68:	3724      	adds	r7, #36	; 0x24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40013800 	.word	0x40013800
 8002a7c:	40020000 	.word	0x40020000
 8002a80:	40020400 	.word	0x40020400
 8002a84:	40020800 	.word	0x40020800
 8002a88:	40020c00 	.word	0x40020c00
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40013c00 	.word	0x40013c00

08002a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa4:	787b      	ldrb	r3, [r7, #1]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ab0:	e003      	b.n	8002aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ab2:	887b      	ldrh	r3, [r7, #2]
 8002ab4:	041a      	lsls	r2, r3, #16
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	619a      	str	r2, [r3, #24]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b085      	sub	sp, #20
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ad8:	887a      	ldrh	r2, [r7, #2]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4013      	ands	r3, r2
 8002ade:	041a      	lsls	r2, r3, #16
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	43d9      	mvns	r1, r3
 8002ae4:	887b      	ldrh	r3, [r7, #2]
 8002ae6:	400b      	ands	r3, r1
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	619a      	str	r2, [r3, #24]
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e12b      	b.n	8002d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe f82a 	bl	8000b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2224      	movs	r2, #36	; 0x24
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b60:	f002 faea 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 8002b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4a81      	ldr	r2, [pc, #516]	; (8002d70 <HAL_I2C_Init+0x274>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d807      	bhi.n	8002b80 <HAL_I2C_Init+0x84>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4a80      	ldr	r2, [pc, #512]	; (8002d74 <HAL_I2C_Init+0x278>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	bf94      	ite	ls
 8002b78:	2301      	movls	r3, #1
 8002b7a:	2300      	movhi	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e006      	b.n	8002b8e <HAL_I2C_Init+0x92>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a7d      	ldr	r2, [pc, #500]	; (8002d78 <HAL_I2C_Init+0x27c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	bf94      	ite	ls
 8002b88:	2301      	movls	r3, #1
 8002b8a:	2300      	movhi	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0e7      	b.n	8002d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4a78      	ldr	r2, [pc, #480]	; (8002d7c <HAL_I2C_Init+0x280>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0c9b      	lsrs	r3, r3, #18
 8002ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a6a      	ldr	r2, [pc, #424]	; (8002d70 <HAL_I2C_Init+0x274>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d802      	bhi.n	8002bd0 <HAL_I2C_Init+0xd4>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	e009      	b.n	8002be4 <HAL_I2C_Init+0xe8>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	4a69      	ldr	r2, [pc, #420]	; (8002d80 <HAL_I2C_Init+0x284>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	099b      	lsrs	r3, r3, #6
 8002be2:	3301      	adds	r3, #1
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	495c      	ldr	r1, [pc, #368]	; (8002d70 <HAL_I2C_Init+0x274>)
 8002c00:	428b      	cmp	r3, r1
 8002c02:	d819      	bhi.n	8002c38 <HAL_I2C_Init+0x13c>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1e59      	subs	r1, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c12:	1c59      	adds	r1, r3, #1
 8002c14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c18:	400b      	ands	r3, r1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_I2C_Init+0x138>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1e59      	subs	r1, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c32:	e051      	b.n	8002cd8 <HAL_I2C_Init+0x1dc>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e04f      	b.n	8002cd8 <HAL_I2C_Init+0x1dc>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d111      	bne.n	8002c64 <HAL_I2C_Init+0x168>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1e58      	subs	r0, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	440b      	add	r3, r1
 8002c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c52:	3301      	adds	r3, #1
 8002c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	bf0c      	ite	eq
 8002c5c:	2301      	moveq	r3, #1
 8002c5e:	2300      	movne	r3, #0
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	e012      	b.n	8002c8a <HAL_I2C_Init+0x18e>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1e58      	subs	r0, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	0099      	lsls	r1, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Init+0x196>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e022      	b.n	8002cd8 <HAL_I2C_Init+0x1dc>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10e      	bne.n	8002cb8 <HAL_I2C_Init+0x1bc>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1e58      	subs	r0, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	440b      	add	r3, r1
 8002ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cac:	3301      	adds	r3, #1
 8002cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cb6:	e00f      	b.n	8002cd8 <HAL_I2C_Init+0x1dc>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	1e58      	subs	r0, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6859      	ldr	r1, [r3, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	0099      	lsls	r1, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	6809      	ldr	r1, [r1, #0]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69da      	ldr	r2, [r3, #28]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6911      	ldr	r1, [r2, #16]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68d2      	ldr	r2, [r2, #12]
 8002d12:	4311      	orrs	r1, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2220      	movs	r2, #32
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	000186a0 	.word	0x000186a0
 8002d74:	001e847f 	.word	0x001e847f
 8002d78:	003d08ff 	.word	0x003d08ff
 8002d7c:	431bde83 	.word	0x431bde83
 8002d80:	10624dd3 	.word	0x10624dd3

08002d84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b088      	sub	sp, #32
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	460b      	mov	r3, r1
 8002d92:	817b      	strh	r3, [r7, #10]
 8002d94:	4613      	mov	r3, r2
 8002d96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff fb24 	bl	80023e4 <HAL_GetTick>
 8002d9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	f040 80e0 	bne.w	8002f6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2319      	movs	r3, #25
 8002db2:	2201      	movs	r2, #1
 8002db4:	4970      	ldr	r1, [pc, #448]	; (8002f78 <HAL_I2C_Master_Transmit+0x1f4>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f964 	bl	8003084 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e0d3      	b.n	8002f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2C_Master_Transmit+0x50>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0cc      	b.n	8002f6e <HAL_I2C_Master_Transmit+0x1ea>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d007      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2221      	movs	r2, #33	; 0x21
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2210      	movs	r2, #16
 8002e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	893a      	ldrh	r2, [r7, #8]
 8002e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4a50      	ldr	r2, [pc, #320]	; (8002f7c <HAL_I2C_Master_Transmit+0x1f8>)
 8002e3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e3c:	8979      	ldrh	r1, [r7, #10]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f89c 	bl	8002f80 <I2C_MasterRequestWrite>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e08d      	b.n	8002f6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e68:	e066      	b.n	8002f38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	6a39      	ldr	r1, [r7, #32]
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 fa22 	bl	80032b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d107      	bne.n	8002e92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e06b      	b.n	8002f6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9a:	781a      	ldrb	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0304 	and.w	r3, r3, #4
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d11b      	bne.n	8002f0c <HAL_I2C_Master_Transmit+0x188>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d017      	beq.n	8002f0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	781a      	ldrb	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	6a39      	ldr	r1, [r7, #32]
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fa19 	bl	8003348 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00d      	beq.n	8002f38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d107      	bne.n	8002f34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e01a      	b.n	8002f6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d194      	bne.n	8002e6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e000      	b.n	8002f6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	00100002 	.word	0x00100002
 8002f7c:	ffff0000 	.word	0xffff0000

08002f80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af02      	add	r7, sp, #8
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	603b      	str	r3, [r7, #0]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2b08      	cmp	r3, #8
 8002f9a:	d006      	beq.n	8002faa <I2C_MasterRequestWrite+0x2a>
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d003      	beq.n	8002faa <I2C_MasterRequestWrite+0x2a>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fa8:	d108      	bne.n	8002fbc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e00b      	b.n	8002fd4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	2b12      	cmp	r3, #18
 8002fc2:	d107      	bne.n	8002fd4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f84f 	bl	8003084 <I2C_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffa:	d103      	bne.n	8003004 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e035      	b.n	8003074 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003010:	d108      	bne.n	8003024 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	e01b      	b.n	800305c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003024:	897b      	ldrh	r3, [r7, #10]
 8003026:	11db      	asrs	r3, r3, #7
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0306 	and.w	r3, r3, #6
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f063 030f 	orn	r3, r3, #15
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	490e      	ldr	r1, [pc, #56]	; (800307c <I2C_MasterRequestWrite+0xfc>)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f898 	bl	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e010      	b.n	8003074 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003052:	897b      	ldrh	r3, [r7, #10]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4907      	ldr	r1, [pc, #28]	; (8003080 <I2C_MasterRequestWrite+0x100>)
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f888 	bl	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e000      	b.n	8003074 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	00010008 	.word	0x00010008
 8003080:	00010002 	.word	0x00010002

08003084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003094:	e048      	b.n	8003128 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800309c:	d044      	beq.n	8003128 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309e:	f7ff f9a1 	bl	80023e4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d139      	bne.n	8003128 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	0c1b      	lsrs	r3, r3, #16
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d10d      	bne.n	80030da <I2C_WaitOnFlagUntilTimeout+0x56>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	43da      	mvns	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4013      	ands	r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf0c      	ite	eq
 80030d0:	2301      	moveq	r3, #1
 80030d2:	2300      	movne	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	461a      	mov	r2, r3
 80030d8:	e00c      	b.n	80030f4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	43da      	mvns	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4013      	ands	r3, r2
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	79fb      	ldrb	r3, [r7, #7]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d116      	bne.n	8003128 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e023      	b.n	8003170 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10d      	bne.n	800314e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	43da      	mvns	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	e00c      	b.n	8003168 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	43da      	mvns	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4013      	ands	r3, r2
 800315a:	b29b      	uxth	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	461a      	mov	r2, r3
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	429a      	cmp	r2, r3
 800316c:	d093      	beq.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003186:	e071      	b.n	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d123      	bne.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031a6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0204 	orr.w	r2, r3, #4
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e067      	b.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e6:	d041      	beq.n	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e8:	f7ff f8fc 	bl	80023e4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d302      	bcc.n	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d136      	bne.n	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10c      	bne.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e00b      	b.n	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	43da      	mvns	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d016      	beq.n	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e021      	b.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d10c      	bne.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	43da      	mvns	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4013      	ands	r3, r2
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e00b      	b.n	80032a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	43da      	mvns	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf14      	ite	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	2300      	moveq	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f47f af6d 	bne.w	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032c4:	e034      	b.n	8003330 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 f886 	bl	80033d8 <I2C_IsAcknowledgeFailed>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e034      	b.n	8003340 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032dc:	d028      	beq.n	8003330 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032de:	f7ff f881 	bl	80023e4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d11d      	bne.n	8003330 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fe:	2b80      	cmp	r3, #128	; 0x80
 8003300:	d016      	beq.n	8003330 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e007      	b.n	8003340 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800333a:	2b80      	cmp	r3, #128	; 0x80
 800333c:	d1c3      	bne.n	80032c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003354:	e034      	b.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f83e 	bl	80033d8 <I2C_IsAcknowledgeFailed>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e034      	b.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800336c:	d028      	beq.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800336e:	f7ff f839 	bl	80023e4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	d302      	bcc.n	8003384 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d11d      	bne.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d016      	beq.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e007      	b.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d1c3      	bne.n	8003356 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d11b      	bne.n	8003428 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af02      	add	r7, sp, #8
 800343c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e101      	b.n	800364c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f006 fefc 	bl	800a260 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2203      	movs	r2, #3
 800346c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003476:	d102      	bne.n	800347e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f003 faf3 	bl	8006a6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7c1a      	ldrb	r2, [r3, #16]
 8003490:	f88d 2000 	strb.w	r2, [sp]
 8003494:	3304      	adds	r3, #4
 8003496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003498:	f003 f9d2 	bl	8006840 <USB_CoreInit>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0ce      	b.n	800364c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2100      	movs	r1, #0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 faeb 	bl	8006a90 <USB_SetCurrentMode>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0bf      	b.n	800364c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	e04a      	b.n	8003568 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3315      	adds	r3, #21
 80034e2:	2201      	movs	r2, #1
 80034e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3314      	adds	r3, #20
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034fa:	7bfa      	ldrb	r2, [r7, #15]
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	b298      	uxth	r0, r3
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	332e      	adds	r3, #46	; 0x2e
 800350e:	4602      	mov	r2, r0
 8003510:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3318      	adds	r3, #24
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	331c      	adds	r3, #28
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3320      	adds	r3, #32
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3324      	adds	r3, #36	; 0x24
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	3301      	adds	r3, #1
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	791b      	ldrb	r3, [r3, #4]
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	429a      	cmp	r2, r3
 8003570:	d3af      	bcc.n	80034d2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
 8003576:	e044      	b.n	8003602 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	f203 2355 	addw	r3, r3, #597	; 0x255
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035e6:	7bfa      	ldrb	r2, [r7, #15]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	3301      	adds	r3, #1
 8003600:	73fb      	strb	r3, [r7, #15]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	791b      	ldrb	r3, [r3, #4]
 8003606:	7bfa      	ldrb	r2, [r7, #15]
 8003608:	429a      	cmp	r2, r3
 800360a:	d3b5      	bcc.n	8003578 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	7c1a      	ldrb	r2, [r3, #16]
 8003614:	f88d 2000 	strb.w	r2, [sp]
 8003618:	3304      	adds	r3, #4
 800361a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800361c:	f003 fa84 	bl	8006b28 <USB_DevInit>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2202      	movs	r2, #2
 800362a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e00c      	b.n	800364c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	f004 fac8 	bl	8007bda <USB_DevDisconnect>

  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_PCD_Start+0x1c>
 800366c:	2302      	movs	r3, #2
 800366e:	e022      	b.n	80036b6 <HAL_PCD_Start+0x62>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003688:	2b01      	cmp	r3, #1
 800368a:	d105      	bne.n	8003698 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f003 f9d5 	bl	8006a4c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 fa76 	bl	8007b98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036be:	b590      	push	{r4, r7, lr}
 80036c0:	b08d      	sub	sp, #52	; 0x34
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f004 fb34 	bl	8007d42 <USB_GetMode>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f040 848c 	bne.w	8003ffa <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 fa98 	bl	8007c1c <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8482 	beq.w	8003ff8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4618      	mov	r0, r3
 800370e:	f004 fa85 	bl	8007c1c <USB_ReadInterrupts>
 8003712:	4603      	mov	r3, r0
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b02      	cmp	r3, #2
 800371a:	d107      	bne.n	800372c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f002 0202 	and.w	r2, r2, #2
 800372a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f004 fa73 	bl	8007c1c <USB_ReadInterrupts>
 8003736:	4603      	mov	r3, r0
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b10      	cmp	r3, #16
 800373e:	d161      	bne.n	8003804 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0210 	bic.w	r2, r2, #16
 800374e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f003 020f 	and.w	r2, r3, #15
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	0c5b      	lsrs	r3, r3, #17
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	2b02      	cmp	r3, #2
 800377a:	d124      	bne.n	80037c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003782:	4013      	ands	r3, r2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d035      	beq.n	80037f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	6a38      	ldr	r0, [r7, #32]
 800379c:	f004 f8aa 	bl	80078f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	68da      	ldr	r2, [r3, #12]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ac:	441a      	add	r2, r3
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037be:	441a      	add	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	615a      	str	r2, [r3, #20]
 80037c4:	e016      	b.n	80037f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	0c5b      	lsrs	r3, r3, #17
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d110      	bne.n	80037f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80037d8:	2208      	movs	r2, #8
 80037da:	4619      	mov	r1, r3
 80037dc:	6a38      	ldr	r0, [r7, #32]
 80037de:	f004 f889 	bl	80078f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	695a      	ldr	r2, [r3, #20]
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037ee:	441a      	add	r2, r3
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699a      	ldr	r2, [r3, #24]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0210 	orr.w	r2, r2, #16
 8003802:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f004 fa07 	bl	8007c1c <USB_ReadInterrupts>
 800380e:	4603      	mov	r3, r0
 8003810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003814:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003818:	f040 80a7 	bne.w	800396a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f004 fa0c 	bl	8007c42 <USB_ReadDevAllOutEpInterrupt>
 800382a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800382c:	e099      	b.n	8003962 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800382e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 808e 	beq.w	8003956 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f004 fa30 	bl	8007caa <USB_ReadDevOutEPInterrupt>
 800384a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003862:	461a      	mov	r2, r3
 8003864:	2301      	movs	r3, #1
 8003866:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fea2 	bl	80045b4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	015a      	lsls	r2, r3, #5
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	4413      	add	r3, r2
 8003882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003886:	461a      	mov	r2, r3
 8003888:	2308      	movs	r3, #8
 800388a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800388c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 ff78 	bl	8004784 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d008      	beq.n	80038b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	461a      	mov	r2, r3
 80038ac:	2310      	movs	r3, #16
 80038ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d030      	beq.n	800391c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d109      	bne.n	80038da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	4413      	add	r3, r2
 80038ec:	3304      	adds	r3, #4
 80038ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	78db      	ldrb	r3, [r3, #3]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d108      	bne.n	800390a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	2200      	movs	r2, #0
 80038fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	b2db      	uxtb	r3, r3
 8003902:	4619      	mov	r1, r3
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f006 fda7 	bl	800a458 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003916:	461a      	mov	r2, r3
 8003918:	2302      	movs	r3, #2
 800391a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003932:	461a      	mov	r2, r3
 8003934:	2320      	movs	r3, #32
 8003936:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d009      	beq.n	8003956 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394e:	461a      	mov	r2, r3
 8003950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003954:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	3301      	adds	r3, #1
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	2b00      	cmp	r3, #0
 8003966:	f47f af62 	bne.w	800382e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f004 f954 	bl	8007c1c <USB_ReadInterrupts>
 8003974:	4603      	mov	r3, r0
 8003976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800397e:	f040 80db 	bne.w	8003b38 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f004 f975 	bl	8007c76 <USB_ReadDevAllInEpInterrupt>
 800398c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003992:	e0cd      	b.n	8003b30 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80c2 	beq.w	8003b24 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 f99b 	bl	8007ce6 <USB_ReadDevInEPInterrupt>
 80039b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d057      	beq.n	8003a6c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2201      	movs	r2, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	69f9      	ldr	r1, [r7, #28]
 80039d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039dc:	4013      	ands	r3, r2
 80039de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ec:	461a      	mov	r2, r3
 80039ee:	2301      	movs	r3, #1
 80039f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	799b      	ldrb	r3, [r3, #6]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d132      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	3320      	adds	r3, #32
 8003a0a:	6819      	ldr	r1, [r3, #0]
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4403      	add	r3, r0
 8003a1a:	331c      	adds	r3, #28
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4419      	add	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4403      	add	r3, r0
 8003a2e:	3320      	adds	r3, #32
 8003a30:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d113      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x3a2>
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3324      	adds	r3, #36	; 0x24
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d108      	bne.n	8003a60 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	f004 f9a2 	bl	8007da4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4619      	mov	r1, r3
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f006 fc7b 	bl	800a362 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	015a      	lsls	r2, r3, #5
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a82:	461a      	mov	r2, r3
 8003a84:	2308      	movs	r3, #8
 8003a86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d008      	beq.n	8003aa4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d008      	beq.n	8003ac0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	461a      	mov	r2, r3
 8003abc:	2340      	movs	r3, #64	; 0x40
 8003abe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d023      	beq.n	8003b12 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003aca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003acc:	6a38      	ldr	r0, [r7, #32]
 8003ace:	f003 f98f 	bl	8006df0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	3310      	adds	r3, #16
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	78db      	ldrb	r3, [r3, #3]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d108      	bne.n	8003b00 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4619      	mov	r1, r3
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f006 fcbe 	bl	800a47c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2302      	movs	r3, #2
 8003b10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fcbb 	bl	800449a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	3301      	adds	r3, #1
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f47f af2e 	bne.w	8003994 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f004 f86d 	bl	8007c1c <USB_ReadInterrupts>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b4c:	d122      	bne.n	8003b94 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d108      	bne.n	8003b7e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b74:	2100      	movs	r1, #0
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fea2 	bl	80048c0 <HAL_PCDEx_LPM_Callback>
 8003b7c:	e002      	b.n	8003b84 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f006 fc5c 	bl	800a43c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f004 f83f 	bl	8007c1c <USB_ReadInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ba8:	d112      	bne.n	8003bd0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d102      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f006 fc18 	bl	800a3f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695a      	ldr	r2, [r3, #20]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bce:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f004 f821 	bl	8007c1c <USB_ReadInterrupts>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be4:	f040 80b7 	bne.w	8003d56 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2110      	movs	r1, #16
 8003c02:	4618      	mov	r0, r3
 8003c04:	f003 f8f4 	bl	8006df0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c0c:	e046      	b.n	8003c9c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c20:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c32:	0151      	lsls	r1, r2, #5
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	440a      	add	r2, r1
 8003c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c54:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c86:	0151      	lsls	r1, r2, #5
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	440a      	add	r2, r1
 8003c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c94:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c98:	3301      	adds	r3, #1
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	791b      	ldrb	r3, [r3, #4]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d3b2      	bcc.n	8003c0e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7bdb      	ldrb	r3, [r3, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d016      	beq.n	8003cf2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd4:	f043 030b 	orr.w	r3, r3, #11
 8003cd8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce4:	69fa      	ldr	r2, [r7, #28]
 8003ce6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cea:	f043 030b 	orr.w	r3, r3, #11
 8003cee:	6453      	str	r3, [r2, #68]	; 0x44
 8003cf0:	e015      	b.n	8003d1e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d04:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d08:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d18:	f043 030b 	orr.w	r3, r3, #11
 8003d1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d40:	461a      	mov	r2, r3
 8003d42:	f004 f82f 	bl	8007da4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f003 ff5e 	bl	8007c1c <USB_ReadInterrupts>
 8003d60:	4603      	mov	r3, r0
 8003d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6a:	d123      	bne.n	8003db4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f003 fff4 	bl	8007d5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f003 f8b1 	bl	8006ee2 <USB_GetDevSpeed>
 8003d80:	4603      	mov	r3, r0
 8003d82:	461a      	mov	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681c      	ldr	r4, [r3, #0]
 8003d8c:	f001 f9c8 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 8003d90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d96:	461a      	mov	r2, r3
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f002 fdb5 	bl	8006908 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f006 fb07 	bl	800a3b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695a      	ldr	r2, [r3, #20]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f003 ff2f 	bl	8007c1c <USB_ReadInterrupts>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d10a      	bne.n	8003dde <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f006 fae4 	bl	800a396 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695a      	ldr	r2, [r3, #20]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f002 0208 	and.w	r2, r2, #8
 8003ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 ff1a 	bl	8007c1c <USB_ReadInterrupts>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b80      	cmp	r3, #128	; 0x80
 8003df0:	d123      	bne.n	8003e3a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dfe:	2301      	movs	r3, #1
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	e014      	b.n	8003e2e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d105      	bne.n	8003e28 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fb08 	bl	8004438 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	791b      	ldrb	r3, [r3, #4]
 8003e32:	461a      	mov	r2, r3
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d3e4      	bcc.n	8003e04 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f003 feec 	bl	8007c1c <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e4e:	d13c      	bne.n	8003eca <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e50:	2301      	movs	r3, #1
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
 8003e54:	e02b      	b.n	8003eae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	3318      	adds	r3, #24
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d115      	bne.n	8003ea8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	da12      	bge.n	8003ea8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	3317      	adds	r3, #23
 8003e92:	2201      	movs	r2, #1
 8003e94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fac8 	bl	8004438 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	3301      	adds	r3, #1
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	791b      	ldrb	r3, [r3, #4]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d3cd      	bcc.n	8003e56 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695a      	ldr	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 fea4 	bl	8007c1c <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ede:	d156      	bne.n	8003f8e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee4:	e045      	b.n	8003f72 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d12e      	bne.n	8003f6c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	da2b      	bge.n	8003f6c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003f20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d121      	bne.n	8003f6c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f68:	6053      	str	r3, [r2, #4]
            break;
 8003f6a:	e008      	b.n	8003f7e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	3301      	adds	r3, #1
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	791b      	ldrb	r3, [r3, #4]
 8003f76:	461a      	mov	r2, r3
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d3b3      	bcc.n	8003ee6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695a      	ldr	r2, [r3, #20]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f003 fe42 	bl	8007c1c <USB_ReadInterrupts>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa2:	d10a      	bne.n	8003fba <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f006 fa7b 	bl	800a4a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f003 fe2c 	bl	8007c1c <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d115      	bne.n	8003ffa <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f006 fa6b 	bl	800a4bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	e000      	b.n	8003ffa <HAL_PCD_IRQHandler+0x93c>
      return;
 8003ff8:	bf00      	nop
    }
  }
}
 8003ffa:	3734      	adds	r7, #52	; 0x34
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd90      	pop	{r4, r7, pc}

08004000 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_PCD_SetAddress+0x1a>
 8004016:	2302      	movs	r3, #2
 8004018:	e012      	b.n	8004040 <HAL_PCD_SetAddress+0x40>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	4611      	mov	r1, r2
 8004030:	4618      	mov	r0, r3
 8004032:	f003 fd8b 	bl	8007b4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	4608      	mov	r0, r1
 8004052:	4611      	mov	r1, r2
 8004054:	461a      	mov	r2, r3
 8004056:	4603      	mov	r3, r0
 8004058:	70fb      	strb	r3, [r7, #3]
 800405a:	460b      	mov	r3, r1
 800405c:	803b      	strh	r3, [r7, #0]
 800405e:	4613      	mov	r3, r2
 8004060:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800406a:	2b00      	cmp	r3, #0
 800406c:	da0f      	bge.n	800408e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	f003 020f 	and.w	r2, r3, #15
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	3310      	adds	r3, #16
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	3304      	adds	r3, #4
 8004084:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	705a      	strb	r2, [r3, #1]
 800408c:	e00f      	b.n	80040ae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	f003 020f 	and.w	r2, r3, #15
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	3304      	adds	r3, #4
 80040a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040ba:	883a      	ldrh	r2, [r7, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	78ba      	ldrb	r2, [r7, #2]
 80040c4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d004      	beq.n	80040d8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040d8:	78bb      	ldrb	r3, [r7, #2]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d102      	bne.n	80040e4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_PCD_EP_Open+0xaa>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e00e      	b.n	8004110 <HAL_PCD_EP_Open+0xc8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	4618      	mov	r0, r3
 8004102:	f002 ff13 	bl	8006f2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 800410e:	7afb      	ldrb	r3, [r7, #11]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004128:	2b00      	cmp	r3, #0
 800412a:	da0f      	bge.n	800414c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	f003 020f 	and.w	r2, r3, #15
 8004132:	4613      	mov	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	3310      	adds	r3, #16
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	4413      	add	r3, r2
 8004140:	3304      	adds	r3, #4
 8004142:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	705a      	strb	r2, [r3, #1]
 800414a:	e00f      	b.n	800416c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	f003 020f 	and.w	r2, r3, #15
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	3304      	adds	r3, #4
 8004164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	b2da      	uxtb	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_PCD_EP_Close+0x6e>
 8004182:	2302      	movs	r3, #2
 8004184:	e00e      	b.n	80041a4 <HAL_PCD_EP_Close+0x8c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68f9      	ldr	r1, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	f002 ff51 	bl	800703c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	460b      	mov	r3, r1
 80041ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041bc:	7afb      	ldrb	r3, [r7, #11]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	3304      	adds	r3, #4
 80041d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2200      	movs	r2, #0
 80041e6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2200      	movs	r2, #0
 80041ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	799b      	ldrb	r3, [r3, #6]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d102      	bne.n	8004208 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	799b      	ldrb	r3, [r3, #6]
 8004210:	461a      	mov	r2, r3
 8004212:	6979      	ldr	r1, [r7, #20]
 8004214:	f002 ffee 	bl	80071f4 <USB_EPStartXfer>

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3718      	adds	r7, #24
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 020f 	and.w	r2, r3, #15
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8004244:	681b      	ldr	r3, [r3, #0]
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
 800425e:	460b      	mov	r3, r1
 8004260:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004262:	7afb      	ldrb	r3, [r7, #11]
 8004264:	f003 020f 	and.w	r2, r3, #15
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	3310      	adds	r3, #16
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2200      	movs	r2, #0
 800428a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2201      	movs	r2, #1
 8004290:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004292:	7afb      	ldrb	r3, [r7, #11]
 8004294:	f003 030f 	and.w	r3, r3, #15
 8004298:	b2da      	uxtb	r2, r3
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	799b      	ldrb	r3, [r3, #6]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d102      	bne.n	80042ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	799b      	ldrb	r3, [r3, #6]
 80042b4:	461a      	mov	r2, r3
 80042b6:	6979      	ldr	r1, [r7, #20]
 80042b8:	f002 ff9c 	bl	80071f4 <USB_EPStartXfer>

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	460b      	mov	r3, r1
 80042d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	7912      	ldrb	r2, [r2, #4]
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e04f      	b.n	8004384 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da0f      	bge.n	800430c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	f003 020f 	and.w	r2, r3, #15
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3310      	adds	r3, #16
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	3304      	adds	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	705a      	strb	r2, [r3, #1]
 800430a:	e00d      	b.n	8004328 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	4613      	mov	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	4413      	add	r3, r2
 800431e:	3304      	adds	r3, #4
 8004320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2201      	movs	r2, #1
 800432c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432e:	78fb      	ldrb	r3, [r7, #3]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	b2da      	uxtb	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_PCD_EP_SetStall+0x82>
 8004344:	2302      	movs	r3, #2
 8004346:	e01d      	b.n	8004384 <HAL_PCD_EP_SetStall+0xbe>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68f9      	ldr	r1, [r7, #12]
 8004356:	4618      	mov	r0, r3
 8004358:	f003 fb24 	bl	80079a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	7999      	ldrb	r1, [r3, #6]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004374:	461a      	mov	r2, r3
 8004376:	f003 fd15 	bl	8007da4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	7912      	ldrb	r2, [r2, #4]
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e042      	b.n	8004430 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da0f      	bge.n	80043d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	f003 020f 	and.w	r2, r3, #15
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	3310      	adds	r3, #16
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	705a      	strb	r2, [r3, #1]
 80043d0:	e00f      	b.n	80043f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	f003 020f 	and.w	r2, r3, #15
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_PCD_EP_ClrStall+0x86>
 800440e:	2302      	movs	r3, #2
 8004410:	e00e      	b.n	8004430 <HAL_PCD_EP_ClrStall+0xa4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	4618      	mov	r0, r3
 8004422:	f003 fb2d 	bl	8007a80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004448:	2b00      	cmp	r3, #0
 800444a:	da0c      	bge.n	8004466 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	f003 020f 	and.w	r2, r3, #15
 8004452:	4613      	mov	r3, r2
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	3310      	adds	r3, #16
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	4413      	add	r3, r2
 8004460:	3304      	adds	r3, #4
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e00c      	b.n	8004480 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	f003 020f 	and.w	r2, r3, #15
 800446c:	4613      	mov	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	4413      	add	r3, r2
 800447c:	3304      	adds	r3, #4
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	4618      	mov	r0, r3
 8004488:	f003 f94c 	bl	8007724 <USB_EPStopXfer>
 800448c:	4603      	mov	r3, r0
 800448e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004490:	7afb      	ldrb	r3, [r7, #11]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b08a      	sub	sp, #40	; 0x28
 800449e:	af02      	add	r7, sp, #8
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044ae:	683a      	ldr	r2, [r7, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	3310      	adds	r3, #16
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	4413      	add	r3, r2
 80044be:	3304      	adds	r3, #4
 80044c0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d901      	bls.n	80044d2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e06b      	b.n	80045aa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d902      	bls.n	80044ee <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3303      	adds	r3, #3
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f6:	e02a      	b.n	800454e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	429a      	cmp	r2, r3
 800450c:	d902      	bls.n	8004514 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	3303      	adds	r3, #3
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68d9      	ldr	r1, [r3, #12]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	4603      	mov	r3, r0
 8004530:	6978      	ldr	r0, [r7, #20]
 8004532:	f003 f9a1 	bl	8007878 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	441a      	add	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	695a      	ldr	r2, [r3, #20]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	441a      	add	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	429a      	cmp	r2, r3
 8004562:	d809      	bhi.n	8004578 <PCD_WriteEmptyTxFifo+0xde>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800456c:	429a      	cmp	r2, r3
 800456e:	d203      	bcs.n	8004578 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1bf      	bne.n	80044f8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	429a      	cmp	r2, r3
 8004582:	d811      	bhi.n	80045a8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	2201      	movs	r2, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	43db      	mvns	r3, r3
 800459e:	6939      	ldr	r1, [r7, #16]
 80045a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a4:	4013      	ands	r3, r2
 80045a6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3720      	adds	r7, #32
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	333c      	adds	r3, #60	; 0x3c
 80045cc:	3304      	adds	r3, #4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	799b      	ldrb	r3, [r3, #6]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d17b      	bne.n	80046e2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	4a61      	ldr	r2, [pc, #388]	; (800477c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	f240 80b9 	bls.w	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80b3 	beq.w	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004616:	461a      	mov	r2, r3
 8004618:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461c:	6093      	str	r3, [r2, #8]
 800461e:	e0a7      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	461a      	mov	r2, r3
 8004638:	2320      	movs	r3, #32
 800463a:	6093      	str	r3, [r2, #8]
 800463c:	e098      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 8093 	bne.w	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	4a4b      	ldr	r2, [pc, #300]	; (800477c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d90f      	bls.n	8004672 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	461a      	mov	r2, r3
 800466a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466e:	6093      	str	r3, [r2, #8]
 8004670:	e07e      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	3304      	adds	r3, #4
 8004686:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a1a      	ldr	r2, [r3, #32]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	0159      	lsls	r1, r3, #5
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	440b      	add	r3, r1
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d114      	bne.n	80046d4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80046bc:	461a      	mov	r2, r3
 80046be:	2101      	movs	r1, #1
 80046c0:	f003 fb70 	bl	8007da4 <USB_EP0_OutStart>
 80046c4:	e006      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	441a      	add	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f005 fe26 	bl	800a32c <HAL_PCD_DataOutStageCallback>
 80046e0:	e046      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	4a26      	ldr	r2, [pc, #152]	; (8004780 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d124      	bne.n	8004734 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00a      	beq.n	800470a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004700:	461a      	mov	r2, r3
 8004702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004706:	6093      	str	r3, [r2, #8]
 8004708:	e032      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f003 0320 	and.w	r3, r3, #32
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004720:	461a      	mov	r2, r3
 8004722:	2320      	movs	r3, #32
 8004724:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	4619      	mov	r1, r3
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f005 fdfd 	bl	800a32c <HAL_PCD_DataOutStageCallback>
 8004732:	e01d      	b.n	8004770 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d114      	bne.n	8004764 <PCD_EP_OutXfrComplete_int+0x1b0>
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800475c:	461a      	mov	r2, r3
 800475e:	2100      	movs	r1, #0
 8004760:	f003 fb20 	bl	8007da4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f005 fdde 	bl	800a32c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3720      	adds	r7, #32
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	4f54300a 	.word	0x4f54300a
 8004780:	4f54310a 	.word	0x4f54310a

08004784 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	333c      	adds	r3, #60	; 0x3c
 800479c:	3304      	adds	r3, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a15      	ldr	r2, [pc, #84]	; (800480c <PCD_EP_OutSetupPacket_int+0x88>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d90e      	bls.n	80047d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	461a      	mov	r2, r3
 80047d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f005 fd95 	bl	800a308 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <PCD_EP_OutSetupPacket_int+0x88>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d90c      	bls.n	8004800 <PCD_EP_OutSetupPacket_int+0x7c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	799b      	ldrb	r3, [r3, #6]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d108      	bne.n	8004800 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80047f8:	461a      	mov	r2, r3
 80047fa:	2101      	movs	r1, #1
 80047fc:	f003 fad2 	bl	8007da4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	4f54300a 	.word	0x4f54300a

08004810 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
 800481c:	4613      	mov	r3, r2
 800481e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d107      	bne.n	800483e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800482e:	883b      	ldrh	r3, [r7, #0]
 8004830:	0419      	lsls	r1, r3, #16
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	430a      	orrs	r2, r1
 800483a:	629a      	str	r2, [r3, #40]	; 0x28
 800483c:	e028      	b.n	8004890 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	0c1b      	lsrs	r3, r3, #16
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	4413      	add	r3, r2
 800484a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e00d      	b.n	800486e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	7bfb      	ldrb	r3, [r7, #15]
 8004858:	3340      	adds	r3, #64	; 0x40
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	4413      	add	r3, r2
 8004866:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004868:	7bfb      	ldrb	r3, [r7, #15]
 800486a:	3301      	adds	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	3b01      	subs	r3, #1
 8004874:	429a      	cmp	r2, r3
 8004876:	d3ec      	bcc.n	8004852 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004878:	883b      	ldrh	r3, [r7, #0]
 800487a:	0418      	lsls	r0, r3, #16
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	3b01      	subs	r3, #1
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	4302      	orrs	r2, r0
 8004888:	3340      	adds	r3, #64	; 0x40
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	887a      	ldrh	r2, [r7, #2]
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e267      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d075      	beq.n	80049e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048f6:	4b88      	ldr	r3, [pc, #544]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 030c 	and.w	r3, r3, #12
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d00c      	beq.n	800491c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004902:	4b85      	ldr	r3, [pc, #532]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800490a:	2b08      	cmp	r3, #8
 800490c:	d112      	bne.n	8004934 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800490e:	4b82      	ldr	r3, [pc, #520]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800491a:	d10b      	bne.n	8004934 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800491c:	4b7e      	ldr	r3, [pc, #504]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d05b      	beq.n	80049e0 <HAL_RCC_OscConfig+0x108>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d157      	bne.n	80049e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e242      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493c:	d106      	bne.n	800494c <HAL_RCC_OscConfig+0x74>
 800493e:	4b76      	ldr	r3, [pc, #472]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a75      	ldr	r2, [pc, #468]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	e01d      	b.n	8004988 <HAL_RCC_OscConfig+0xb0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004954:	d10c      	bne.n	8004970 <HAL_RCC_OscConfig+0x98>
 8004956:	4b70      	ldr	r3, [pc, #448]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a6f      	ldr	r2, [pc, #444]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 800495c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a6c      	ldr	r2, [pc, #432]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e00b      	b.n	8004988 <HAL_RCC_OscConfig+0xb0>
 8004970:	4b69      	ldr	r3, [pc, #420]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a68      	ldr	r2, [pc, #416]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	4b66      	ldr	r3, [pc, #408]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a65      	ldr	r2, [pc, #404]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d013      	beq.n	80049b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fd fd28 	bl	80023e4 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004998:	f7fd fd24 	bl	80023e4 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b64      	cmp	r3, #100	; 0x64
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e207      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b5b      	ldr	r3, [pc, #364]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f0      	beq.n	8004998 <HAL_RCC_OscConfig+0xc0>
 80049b6:	e014      	b.n	80049e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b8:	f7fd fd14 	bl	80023e4 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049c0:	f7fd fd10 	bl	80023e4 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b64      	cmp	r3, #100	; 0x64
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e1f3      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049d2:	4b51      	ldr	r3, [pc, #324]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f0      	bne.n	80049c0 <HAL_RCC_OscConfig+0xe8>
 80049de:	e000      	b.n	80049e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d063      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ee:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 030c 	and.w	r3, r3, #12
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049fa:	4b47      	ldr	r3, [pc, #284]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d11c      	bne.n	8004a40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a06:	4b44      	ldr	r3, [pc, #272]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d116      	bne.n	8004a40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a12:	4b41      	ldr	r3, [pc, #260]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_RCC_OscConfig+0x152>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d001      	beq.n	8004a2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e1c7      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	4937      	ldr	r1, [pc, #220]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a3e:	e03a      	b.n	8004ab6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d020      	beq.n	8004a8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a48:	4b34      	ldr	r3, [pc, #208]	; (8004b1c <HAL_RCC_OscConfig+0x244>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4e:	f7fd fcc9 	bl	80023e4 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a56:	f7fd fcc5 	bl	80023e4 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e1a8      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a68:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0f0      	beq.n	8004a56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a74:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4925      	ldr	r1, [pc, #148]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	600b      	str	r3, [r1, #0]
 8004a88:	e015      	b.n	8004ab6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a8a:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <HAL_RCC_OscConfig+0x244>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fd fca8 	bl	80023e4 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a98:	f7fd fca4 	bl	80023e4 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e187      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0308 	and.w	r3, r3, #8
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d036      	beq.n	8004b30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aca:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <HAL_RCC_OscConfig+0x248>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad0:	f7fd fc88 	bl	80023e4 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad8:	f7fd fc84 	bl	80023e4 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e167      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aea:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_OscConfig+0x240>)
 8004aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x200>
 8004af6:	e01b      	b.n	8004b30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af8:	4b09      	ldr	r3, [pc, #36]	; (8004b20 <HAL_RCC_OscConfig+0x248>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afe:	f7fd fc71 	bl	80023e4 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b04:	e00e      	b.n	8004b24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b06:	f7fd fc6d 	bl	80023e4 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d907      	bls.n	8004b24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e150      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	42470000 	.word	0x42470000
 8004b20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b24:	4b88      	ldr	r3, [pc, #544]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ea      	bne.n	8004b06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8097 	beq.w	8004c6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b42:	4b81      	ldr	r3, [pc, #516]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10f      	bne.n	8004b6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	4b7d      	ldr	r3, [pc, #500]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	4a7c      	ldr	r2, [pc, #496]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5e:	4b7a      	ldr	r3, [pc, #488]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6e:	4b77      	ldr	r3, [pc, #476]	; (8004d4c <HAL_RCC_OscConfig+0x474>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d118      	bne.n	8004bac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b7a:	4b74      	ldr	r3, [pc, #464]	; (8004d4c <HAL_RCC_OscConfig+0x474>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a73      	ldr	r2, [pc, #460]	; (8004d4c <HAL_RCC_OscConfig+0x474>)
 8004b80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b86:	f7fd fc2d 	bl	80023e4 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b8e:	f7fd fc29 	bl	80023e4 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e10c      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba0:	4b6a      	ldr	r3, [pc, #424]	; (8004d4c <HAL_RCC_OscConfig+0x474>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x2ea>
 8004bb4:	4b64      	ldr	r3, [pc, #400]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a63      	ldr	r2, [pc, #396]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc0:	e01c      	b.n	8004bfc <HAL_RCC_OscConfig+0x324>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCC_OscConfig+0x30c>
 8004bca:	4b5f      	ldr	r3, [pc, #380]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a5e      	ldr	r2, [pc, #376]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004bd0:	f043 0304 	orr.w	r3, r3, #4
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd6:	4b5c      	ldr	r3, [pc, #368]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	4a5b      	ldr	r2, [pc, #364]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	f043 0301 	orr.w	r3, r3, #1
 8004be0:	6713      	str	r3, [r2, #112]	; 0x70
 8004be2:	e00b      	b.n	8004bfc <HAL_RCC_OscConfig+0x324>
 8004be4:	4b58      	ldr	r3, [pc, #352]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	4a57      	ldr	r2, [pc, #348]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004bea:	f023 0301 	bic.w	r3, r3, #1
 8004bee:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf0:	4b55      	ldr	r3, [pc, #340]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	4a54      	ldr	r2, [pc, #336]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	f023 0304 	bic.w	r3, r3, #4
 8004bfa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d015      	beq.n	8004c30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c04:	f7fd fbee 	bl	80023e4 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0a:	e00a      	b.n	8004c22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0c:	f7fd fbea 	bl	80023e4 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e0cb      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c22:	4b49      	ldr	r3, [pc, #292]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ee      	beq.n	8004c0c <HAL_RCC_OscConfig+0x334>
 8004c2e:	e014      	b.n	8004c5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c30:	f7fd fbd8 	bl	80023e4 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c36:	e00a      	b.n	8004c4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fd fbd4 	bl	80023e4 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e0b5      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4e:	4b3e      	ldr	r3, [pc, #248]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1ee      	bne.n	8004c38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d105      	bne.n	8004c6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c60:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	4a38      	ldr	r2, [pc, #224]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80a1 	beq.w	8004db8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c76:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d05c      	beq.n	8004d3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d141      	bne.n	8004d0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8a:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <HAL_RCC_OscConfig+0x478>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7fd fba8 	bl	80023e4 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c98:	f7fd fba4 	bl	80023e4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e087      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	4b27      	ldr	r3, [pc, #156]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	019b      	lsls	r3, r3, #6
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	491b      	ldr	r1, [pc, #108]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <HAL_RCC_OscConfig+0x478>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fb7d 	bl	80023e4 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fd fb79 	bl	80023e4 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e05c      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d00:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x416>
 8004d0c:	e054      	b.n	8004db8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0e:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <HAL_RCC_OscConfig+0x478>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d14:	f7fd fb66 	bl	80023e4 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d1c:	f7fd fb62 	bl	80023e4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e045      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <HAL_RCC_OscConfig+0x470>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x444>
 8004d3a:	e03d      	b.n	8004db8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d107      	bne.n	8004d54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e038      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40007000 	.word	0x40007000
 8004d50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d54:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_RCC_OscConfig+0x4ec>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d028      	beq.n	8004db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d121      	bne.n	8004db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d11a      	bne.n	8004db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d84:	4013      	ands	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d111      	bne.n	8004db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9a:	085b      	lsrs	r3, r3, #1
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d107      	bne.n	8004db4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800

08004dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0cc      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ddc:	4b68      	ldr	r3, [pc, #416]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d90c      	bls.n	8004e04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dea:	4b65      	ldr	r3, [pc, #404]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b63      	ldr	r3, [pc, #396]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0b8      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d020      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0304 	and.w	r3, r3, #4
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e1c:	4b59      	ldr	r3, [pc, #356]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a58      	ldr	r2, [pc, #352]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e34:	4b53      	ldr	r3, [pc, #332]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4a52      	ldr	r2, [pc, #328]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e40:	4b50      	ldr	r3, [pc, #320]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	494d      	ldr	r1, [pc, #308]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d044      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d107      	bne.n	8004e76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e66:	4b47      	ldr	r3, [pc, #284]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d119      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e07f      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d003      	beq.n	8004e86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e86:	4b3f      	ldr	r3, [pc, #252]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d109      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e06f      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e96:	4b3b      	ldr	r3, [pc, #236]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e067      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f023 0203 	bic.w	r2, r3, #3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	4934      	ldr	r1, [pc, #208]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eb8:	f7fd fa94 	bl	80023e4 <HAL_GetTick>
 8004ebc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebe:	e00a      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec0:	f7fd fa90 	bl	80023e4 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e04f      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ed6:	4b2b      	ldr	r3, [pc, #172]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 020c 	and.w	r2, r3, #12
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d1eb      	bne.n	8004ec0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ee8:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d20c      	bcs.n	8004f10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ef6:	4b22      	ldr	r3, [pc, #136]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efe:	4b20      	ldr	r3, [pc, #128]	; (8004f80 <HAL_RCC_ClockConfig+0x1b8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d001      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e032      	b.n	8004f76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d008      	beq.n	8004f2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f1c:	4b19      	ldr	r3, [pc, #100]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4916      	ldr	r1, [pc, #88]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f3a:	4b12      	ldr	r3, [pc, #72]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	490e      	ldr	r1, [pc, #56]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f4e:	f000 f821 	bl	8004f94 <HAL_RCC_GetSysClockFreq>
 8004f52:	4602      	mov	r2, r0
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	f003 030f 	and.w	r3, r3, #15
 8004f5e:	490a      	ldr	r1, [pc, #40]	; (8004f88 <HAL_RCC_ClockConfig+0x1c0>)
 8004f60:	5ccb      	ldrb	r3, [r1, r3]
 8004f62:	fa22 f303 	lsr.w	r3, r2, r3
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_RCC_ClockConfig+0x1c8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fd f9f4 	bl	800235c <HAL_InitTick>

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40023c00 	.word	0x40023c00
 8004f84:	40023800 	.word	0x40023800
 8004f88:	0800c710 	.word	0x0800c710
 8004f8c:	20000000 	.word	0x20000000
 8004f90:	20000028 	.word	0x20000028

08004f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f98:	b090      	sub	sp, #64	; 0x40
 8004f9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fac:	4b59      	ldr	r3, [pc, #356]	; (8005114 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f003 030c 	and.w	r3, r3, #12
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d00d      	beq.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	f200 80a1 	bhi.w	8005100 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d003      	beq.n	8004fce <HAL_RCC_GetSysClockFreq+0x3a>
 8004fc6:	e09b      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fc8:	4b53      	ldr	r3, [pc, #332]	; (8005118 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004fcc:	e09b      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fce:	4b53      	ldr	r3, [pc, #332]	; (800511c <HAL_RCC_GetSysClockFreq+0x188>)
 8004fd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004fd2:	e098      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fd4:	4b4f      	ldr	r3, [pc, #316]	; (8005114 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fde:	4b4d      	ldr	r3, [pc, #308]	; (8005114 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d028      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fea:	4b4a      	ldr	r3, [pc, #296]	; (8005114 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	099b      	lsrs	r3, r3, #6
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	623b      	str	r3, [r7, #32]
 8004ff4:	627a      	str	r2, [r7, #36]	; 0x24
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4b47      	ldr	r3, [pc, #284]	; (800511c <HAL_RCC_GetSysClockFreq+0x188>)
 8005000:	fb03 f201 	mul.w	r2, r3, r1
 8005004:	2300      	movs	r3, #0
 8005006:	fb00 f303 	mul.w	r3, r0, r3
 800500a:	4413      	add	r3, r2
 800500c:	4a43      	ldr	r2, [pc, #268]	; (800511c <HAL_RCC_GetSysClockFreq+0x188>)
 800500e:	fba0 1202 	umull	r1, r2, r0, r2
 8005012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005014:	460a      	mov	r2, r1
 8005016:	62ba      	str	r2, [r7, #40]	; 0x28
 8005018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800501a:	4413      	add	r3, r2
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800501e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005020:	2200      	movs	r2, #0
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	61fa      	str	r2, [r7, #28]
 8005026:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800502a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800502e:	f7fb f98f 	bl	8000350 <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4613      	mov	r3, r2
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800503a:	e053      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503c:	4b35      	ldr	r3, [pc, #212]	; (8005114 <HAL_RCC_GetSysClockFreq+0x180>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	099b      	lsrs	r3, r3, #6
 8005042:	2200      	movs	r2, #0
 8005044:	613b      	str	r3, [r7, #16]
 8005046:	617a      	str	r2, [r7, #20]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800504e:	f04f 0b00 	mov.w	fp, #0
 8005052:	4652      	mov	r2, sl
 8005054:	465b      	mov	r3, fp
 8005056:	f04f 0000 	mov.w	r0, #0
 800505a:	f04f 0100 	mov.w	r1, #0
 800505e:	0159      	lsls	r1, r3, #5
 8005060:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005064:	0150      	lsls	r0, r2, #5
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	ebb2 080a 	subs.w	r8, r2, sl
 800506e:	eb63 090b 	sbc.w	r9, r3, fp
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	f04f 0300 	mov.w	r3, #0
 800507a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800507e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005082:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005086:	ebb2 0408 	subs.w	r4, r2, r8
 800508a:	eb63 0509 	sbc.w	r5, r3, r9
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	00eb      	lsls	r3, r5, #3
 8005098:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800509c:	00e2      	lsls	r2, r4, #3
 800509e:	4614      	mov	r4, r2
 80050a0:	461d      	mov	r5, r3
 80050a2:	eb14 030a 	adds.w	r3, r4, sl
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	eb45 030b 	adc.w	r3, r5, fp
 80050ac:	607b      	str	r3, [r7, #4]
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ba:	4629      	mov	r1, r5
 80050bc:	028b      	lsls	r3, r1, #10
 80050be:	4621      	mov	r1, r4
 80050c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050c4:	4621      	mov	r1, r4
 80050c6:	028a      	lsls	r2, r1, #10
 80050c8:	4610      	mov	r0, r2
 80050ca:	4619      	mov	r1, r3
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	2200      	movs	r2, #0
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	60fa      	str	r2, [r7, #12]
 80050d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050d8:	f7fb f93a 	bl	8000350 <__aeabi_uldivmod>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4613      	mov	r3, r2
 80050e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050e4:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <HAL_RCC_GetSysClockFreq+0x180>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	3301      	adds	r3, #1
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80050f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80050fe:	e002      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005100:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCC_GetSysClockFreq+0x184>)
 8005102:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005108:	4618      	mov	r0, r3
 800510a:	3740      	adds	r7, #64	; 0x40
 800510c:	46bd      	mov	sp, r7
 800510e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005112:	bf00      	nop
 8005114:	40023800 	.word	0x40023800
 8005118:	00f42400 	.word	0x00f42400
 800511c:	017d7840 	.word	0x017d7840

08005120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_RCC_GetHCLKFreq+0x14>)
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000000 	.word	0x20000000

08005138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800513c:	f7ff fff0 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 8005140:	4602      	mov	r2, r0
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	0a9b      	lsrs	r3, r3, #10
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	4903      	ldr	r1, [pc, #12]	; (800515c <HAL_RCC_GetPCLK1Freq+0x24>)
 800514e:	5ccb      	ldrb	r3, [r1, r3]
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40023800 	.word	0x40023800
 800515c:	0800c720 	.word	0x0800c720

08005160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005164:	f7ff ffdc 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 8005168:	4602      	mov	r2, r0
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	0b5b      	lsrs	r3, r3, #13
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4903      	ldr	r1, [pc, #12]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005176:	5ccb      	ldrb	r3, [r1, r3]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40023800 	.word	0x40023800
 8005184:	0800c720 	.word	0x0800c720

08005188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e041      	b.n	800521e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fb fd2c 	bl	8000c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f000 f950 	bl	800546c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
	...

08005228 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b01      	cmp	r3, #1
 800523a:	d001      	beq.n	8005240 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e03c      	b.n	80052ba <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <HAL_TIM_Base_Start+0xa0>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d018      	beq.n	8005284 <HAL_TIM_Base_Start+0x5c>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525a:	d013      	beq.n	8005284 <HAL_TIM_Base_Start+0x5c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1a      	ldr	r2, [pc, #104]	; (80052cc <HAL_TIM_Base_Start+0xa4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d00e      	beq.n	8005284 <HAL_TIM_Base_Start+0x5c>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a19      	ldr	r2, [pc, #100]	; (80052d0 <HAL_TIM_Base_Start+0xa8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d009      	beq.n	8005284 <HAL_TIM_Base_Start+0x5c>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a17      	ldr	r2, [pc, #92]	; (80052d4 <HAL_TIM_Base_Start+0xac>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d004      	beq.n	8005284 <HAL_TIM_Base_Start+0x5c>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a16      	ldr	r2, [pc, #88]	; (80052d8 <HAL_TIM_Base_Start+0xb0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d111      	bne.n	80052a8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b06      	cmp	r3, #6
 8005294:	d010      	beq.n	80052b8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	e007      	b.n	80052b8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40014000 	.word	0x40014000

080052dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d101      	bne.n	80052f8 <HAL_TIM_ConfigClockSource+0x1c>
 80052f4:	2302      	movs	r3, #2
 80052f6:	e0b4      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x186>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005330:	d03e      	beq.n	80053b0 <HAL_TIM_ConfigClockSource+0xd4>
 8005332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005336:	f200 8087 	bhi.w	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533e:	f000 8086 	beq.w	800544e <HAL_TIM_ConfigClockSource+0x172>
 8005342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005346:	d87f      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005348:	2b70      	cmp	r3, #112	; 0x70
 800534a:	d01a      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0xa6>
 800534c:	2b70      	cmp	r3, #112	; 0x70
 800534e:	d87b      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005350:	2b60      	cmp	r3, #96	; 0x60
 8005352:	d050      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x11a>
 8005354:	2b60      	cmp	r3, #96	; 0x60
 8005356:	d877      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005358:	2b50      	cmp	r3, #80	; 0x50
 800535a:	d03c      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0xfa>
 800535c:	2b50      	cmp	r3, #80	; 0x50
 800535e:	d873      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d058      	beq.n	8005416 <HAL_TIM_ConfigClockSource+0x13a>
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d86f      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b30      	cmp	r3, #48	; 0x30
 800536a:	d064      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 800536c:	2b30      	cmp	r3, #48	; 0x30
 800536e:	d86b      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b20      	cmp	r3, #32
 8005372:	d060      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 8005374:	2b20      	cmp	r3, #32
 8005376:	d867      	bhi.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d05c      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 800537c:	2b10      	cmp	r3, #16
 800537e:	d05a      	beq.n	8005436 <HAL_TIM_ConfigClockSource+0x15a>
 8005380:	e062      	b.n	8005448 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005392:	f000 f971 	bl	8005678 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	609a      	str	r2, [r3, #8]
      break;
 80053ae:	e04f      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053c0:	f000 f95a 	bl	8005678 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053d2:	609a      	str	r2, [r3, #8]
      break;
 80053d4:	e03c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	461a      	mov	r2, r3
 80053e4:	f000 f8ce 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2150      	movs	r1, #80	; 0x50
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f927 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 80053f4:	e02c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005402:	461a      	mov	r2, r3
 8005404:	f000 f8ed 	bl	80055e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2160      	movs	r1, #96	; 0x60
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f917 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8005414:	e01c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005422:	461a      	mov	r2, r3
 8005424:	f000 f8ae 	bl	8005584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2140      	movs	r1, #64	; 0x40
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f907 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8005434:	e00c      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4619      	mov	r1, r3
 8005440:	4610      	mov	r0, r2
 8005442:	f000 f8fe 	bl	8005642 <TIM_ITRx_SetConfig>
      break;
 8005446:	e003      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	73fb      	strb	r3, [r7, #15]
      break;
 800544c:	e000      	b.n	8005450 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800544e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005460:	7bfb      	ldrb	r3, [r7, #15]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3a      	ldr	r2, [pc, #232]	; (8005568 <TIM_Base_SetConfig+0xfc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00f      	beq.n	80054a4 <TIM_Base_SetConfig+0x38>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d00b      	beq.n	80054a4 <TIM_Base_SetConfig+0x38>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a37      	ldr	r2, [pc, #220]	; (800556c <TIM_Base_SetConfig+0x100>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d007      	beq.n	80054a4 <TIM_Base_SetConfig+0x38>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a36      	ldr	r2, [pc, #216]	; (8005570 <TIM_Base_SetConfig+0x104>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_Base_SetConfig+0x38>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a35      	ldr	r2, [pc, #212]	; (8005574 <TIM_Base_SetConfig+0x108>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d108      	bne.n	80054b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <TIM_Base_SetConfig+0xfc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01b      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c4:	d017      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <TIM_Base_SetConfig+0x100>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a27      	ldr	r2, [pc, #156]	; (8005570 <TIM_Base_SetConfig+0x104>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00f      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <TIM_Base_SetConfig+0x108>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <TIM_Base_SetConfig+0x10c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a24      	ldr	r2, [pc, #144]	; (800557c <TIM_Base_SetConfig+0x110>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_Base_SetConfig+0x8a>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a23      	ldr	r2, [pc, #140]	; (8005580 <TIM_Base_SetConfig+0x114>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d108      	bne.n	8005508 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0e      	ldr	r2, [pc, #56]	; (8005568 <TIM_Base_SetConfig+0xfc>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d103      	bne.n	800553c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b01      	cmp	r3, #1
 800554c:	d105      	bne.n	800555a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f023 0201 	bic.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	611a      	str	r2, [r3, #16]
  }
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40010000 	.word	0x40010000
 800556c:	40000400 	.word	0x40000400
 8005570:	40000800 	.word	0x40000800
 8005574:	40000c00 	.word	0x40000c00
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800

08005584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 030a 	bic.w	r3, r3, #10
 80055c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b087      	sub	sp, #28
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	60b9      	str	r1, [r7, #8]
 80055ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f023 0210 	bic.w	r2, r3, #16
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800560c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	031b      	lsls	r3, r3, #12
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800561e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	f043 0307 	orr.w	r3, r3, #7
 8005664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	3714      	adds	r7, #20
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005692:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	431a      	orrs	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4313      	orrs	r3, r2
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	609a      	str	r2, [r3, #8]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d101      	bne.n	80056d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056cc:	2302      	movs	r3, #2
 80056ce:	e050      	b.n	8005772 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800571c:	d013      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a18      	ldr	r2, [pc, #96]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a16      	ldr	r2, [pc, #88]	; (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a15      	ldr	r2, [pc, #84]	; (800578c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d10c      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800574c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	40010000 	.word	0x40010000
 8005784:	40000400 	.word	0x40000400
 8005788:	40000800 	.word	0x40000800
 800578c:	40000c00 	.word	0x40000c00
 8005790:	40014000 	.word	0x40014000

08005794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e042      	b.n	800582c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fb fa46 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2224      	movs	r2, #36	; 0x24
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fdbd 	bl	8006358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68da      	ldr	r2, [r3, #12]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800580c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08a      	sub	sp, #40	; 0x28
 8005838:	af02      	add	r7, sp, #8
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	603b      	str	r3, [r7, #0]
 8005840:	4613      	mov	r3, r2
 8005842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b20      	cmp	r3, #32
 8005852:	d175      	bne.n	8005940 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_UART_Transmit+0x2c>
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e06e      	b.n	8005942 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2221      	movs	r2, #33	; 0x21
 800586e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005872:	f7fc fdb7 	bl	80023e4 <HAL_GetTick>
 8005876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	88fa      	ldrh	r2, [r7, #6]
 8005882:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588c:	d108      	bne.n	80058a0 <HAL_UART_Transmit+0x6c>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d104      	bne.n	80058a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	e003      	b.n	80058a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058a8:	e02e      	b.n	8005908 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fb1f 	bl	8005ef8 <UART_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e03a      	b.n	8005942 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	3302      	adds	r3, #2
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	e007      	b.n	80058fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	781a      	ldrb	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	3301      	adds	r3, #1
 80058f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800590c:	b29b      	uxth	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1cb      	bne.n	80058aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2200      	movs	r2, #0
 800591a:	2140      	movs	r1, #64	; 0x40
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 faeb 	bl	8005ef8 <UART_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e006      	b.n	8005942 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	e000      	b.n	8005942 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005940:	2302      	movs	r3, #2
  }
}
 8005942:	4618      	mov	r0, r3
 8005944:	3720      	adds	r7, #32
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	4613      	mov	r3, r2
 8005956:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b20      	cmp	r3, #32
 8005962:	d112      	bne.n	800598a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <HAL_UART_Receive_IT+0x26>
 800596a:	88fb      	ldrh	r3, [r7, #6]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e00b      	b.n	800598c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800597a:	88fb      	ldrh	r3, [r7, #6]
 800597c:	461a      	mov	r2, r3
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 fb12 	bl	8005faa <UART_Start_Receive_IT>
 8005986:	4603      	mov	r3, r0
 8005988:	e000      	b.n	800598c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800598a:	2302      	movs	r3, #2
  }
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b0ba      	sub	sp, #232	; 0xe8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80059d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10f      	bne.n	80059fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d009      	beq.n	80059fa <HAL_UART_IRQHandler+0x66>
 80059e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fbf2 	bl	80061dc <UART_Receive_IT>
      return;
 80059f8:	e25b      	b.n	8005eb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 80de 	beq.w	8005bc0 <HAL_UART_IRQHandler+0x22c>
 8005a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d106      	bne.n	8005a1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 80d1 	beq.w	8005bc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0xae>
 8005a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	f043 0201 	orr.w	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_UART_IRQHandler+0xd2>
 8005a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f043 0202 	orr.w	r2, r3, #2
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <HAL_UART_IRQHandler+0xf6>
 8005a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d005      	beq.n	8005a8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0204 	orr.w	r2, r3, #4
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d011      	beq.n	8005aba <HAL_UART_IRQHandler+0x126>
 8005a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d105      	bne.n	8005aae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	f043 0208 	orr.w	r2, r3, #8
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 81f2 	beq.w	8005ea8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x14e>
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 fb7d 	bl	80061dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b40      	cmp	r3, #64	; 0x40
 8005aee:	bf0c      	ite	eq
 8005af0:	2301      	moveq	r3, #1
 8005af2:	2300      	movne	r3, #0
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <HAL_UART_IRQHandler+0x17a>
 8005b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d04f      	beq.n	8005bae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa85 	bl	800601e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d141      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b30:	e853 3f00 	ldrex	r3, [r3]
 8005b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1d9      	bne.n	8005b22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d013      	beq.n	8005b9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	4a7e      	ldr	r2, [pc, #504]	; (8005d74 <HAL_UART_IRQHandler+0x3e0>)
 8005b7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fc fddf 	bl	8002746 <HAL_DMA_Abort_IT>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	e00e      	b.n	8005bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f994 	bl	8005ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba4:	e00a      	b.n	8005bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f990 	bl	8005ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bac:	e006      	b.n	8005bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f98c 	bl	8005ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005bba:	e175      	b.n	8005ea8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bbc:	bf00      	nop
    return;
 8005bbe:	e173      	b.n	8005ea8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	f040 814f 	bne.w	8005e68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bce:	f003 0310 	and.w	r3, r3, #16
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8148 	beq.w	8005e68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bdc:	f003 0310 	and.w	r3, r3, #16
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8141 	beq.w	8005e68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b40      	cmp	r3, #64	; 0x40
 8005c08:	f040 80b6 	bne.w	8005d78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8145 	beq.w	8005eac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	f080 813e 	bcs.w	8005eac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	69db      	ldr	r3, [r3, #28]
 8005c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c42:	f000 8088 	beq.w	8005d56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	330c      	adds	r3, #12
 8005c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005c72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1d9      	bne.n	8005c46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3314      	adds	r3, #20
 8005c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3314      	adds	r3, #20
 8005cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e1      	bne.n	8005c92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3314      	adds	r3, #20
 8005cd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3314      	adds	r3, #20
 8005cee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e3      	bne.n	8005cce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	330c      	adds	r3, #12
 8005d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1e:	e853 3f00 	ldrex	r3, [r3]
 8005d22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d26:	f023 0310 	bic.w	r3, r3, #16
 8005d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005d38:	65ba      	str	r2, [r7, #88]	; 0x58
 8005d3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e3      	bne.n	8005d14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fc fc88 	bl	8002666 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f8b7 	bl	8005ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d72:	e09b      	b.n	8005eac <HAL_UART_IRQHandler+0x518>
 8005d74:	080060e5 	.word	0x080060e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 808e 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8089 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005db4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005dc2:	647a      	str	r2, [r7, #68]	; 0x44
 8005dc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e3      	bne.n	8005d9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3314      	adds	r3, #20
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	e853 3f00 	ldrex	r3, [r3]
 8005de4:	623b      	str	r3, [r7, #32]
   return(result);
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	f023 0301 	bic.w	r3, r3, #1
 8005dec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3314      	adds	r3, #20
 8005df6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dfa:	633a      	str	r2, [r7, #48]	; 0x30
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e3      	bne.n	8005dd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	330c      	adds	r3, #12
 8005e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	e853 3f00 	ldrex	r3, [r3]
 8005e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0310 	bic.w	r3, r3, #16
 8005e32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	330c      	adds	r3, #12
 8005e3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005e40:	61fa      	str	r2, [r7, #28]
 8005e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	69b9      	ldr	r1, [r7, #24]
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	e841 2300 	strex	r3, r2, [r1]
 8005e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1e3      	bne.n	8005e1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f83d 	bl	8005ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e66:	e023      	b.n	8005eb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d009      	beq.n	8005e88 <HAL_UART_IRQHandler+0x4f4>
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f943 	bl	800610c <UART_Transmit_IT>
    return;
 8005e86:	e014      	b.n	8005eb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00e      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x51e>
 8005e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 f983 	bl	80061ac <UART_EndTransmit_IT>
    return;
 8005ea6:	e004      	b.n	8005eb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005ea8:	bf00      	nop
 8005eaa:	e002      	b.n	8005eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005eac:	bf00      	nop
 8005eae:	e000      	b.n	8005eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005eb0:	bf00      	nop
  }
}
 8005eb2:	37e8      	adds	r7, #232	; 0xe8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	460b      	mov	r3, r1
 8005eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	4613      	mov	r3, r2
 8005f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f08:	e03b      	b.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f10:	d037      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f12:	f7fc fa67 	bl	80023e4 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	6a3a      	ldr	r2, [r7, #32]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d302      	bcc.n	8005f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e03a      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d023      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d020      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b40      	cmp	r3, #64	; 0x40
 8005f44:	d01d      	beq.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0308 	and.w	r3, r3, #8
 8005f50:	2b08      	cmp	r3, #8
 8005f52:	d116      	bne.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f857 	bl	800601e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2208      	movs	r2, #8
 8005f74:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e00f      	b.n	8005fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	bf0c      	ite	eq
 8005f92:	2301      	moveq	r3, #1
 8005f94:	2300      	movne	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	79fb      	ldrb	r3, [r7, #7]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d0b4      	beq.n	8005f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	88fa      	ldrh	r2, [r7, #6]
 8005fc2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	88fa      	ldrh	r2, [r7, #6]
 8005fc8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2222      	movs	r2, #34	; 0x22
 8005fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d007      	beq.n	8005ff0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695a      	ldr	r2, [r3, #20]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0220 	orr.w	r2, r2, #32
 800600e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800601e:	b480      	push	{r7}
 8006020:	b095      	sub	sp, #84	; 0x54
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	330c      	adds	r3, #12
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800603c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006046:	643a      	str	r2, [r7, #64]	; 0x40
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800604c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e5      	bne.n	8006026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3314      	adds	r3, #20
 8006060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	61fb      	str	r3, [r7, #28]
   return(result);
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f023 0301 	bic.w	r3, r3, #1
 8006070:	64bb      	str	r3, [r7, #72]	; 0x48
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3314      	adds	r3, #20
 8006078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800607a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e5      	bne.n	800605a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006092:	2b01      	cmp	r3, #1
 8006094:	d119      	bne.n	80060ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f023 0310 	bic.w	r3, r3, #16
 80060ac:	647b      	str	r3, [r7, #68]	; 0x44
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060b6:	61ba      	str	r2, [r7, #24]
 80060b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6979      	ldr	r1, [r7, #20]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	613b      	str	r3, [r7, #16]
   return(result);
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e5      	bne.n	8006096 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060d8:	bf00      	nop
 80060da:	3754      	adds	r7, #84	; 0x54
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff fee4 	bl	8005ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b21      	cmp	r3, #33	; 0x21
 800611e:	d13e      	bne.n	800619e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006128:	d114      	bne.n	8006154 <UART_Transmit_IT+0x48>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d110      	bne.n	8006154 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006146:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	1c9a      	adds	r2, r3, #2
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	621a      	str	r2, [r3, #32]
 8006152:	e008      	b.n	8006166 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	1c59      	adds	r1, r3, #1
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6211      	str	r1, [r2, #32]
 800615e:	781a      	ldrb	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29b      	uxth	r3, r3
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4619      	mov	r1, r3
 8006174:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10f      	bne.n	800619a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006188:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006198:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e000      	b.n	80061a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800619e:	2302      	movs	r3, #2
  }
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7ff fe73 	bl	8005eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08c      	sub	sp, #48	; 0x30
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b22      	cmp	r3, #34	; 0x22
 80061ee:	f040 80ae 	bne.w	800634e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fa:	d117      	bne.n	800622c <UART_Receive_IT+0x50>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d113      	bne.n	800622c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006204:	2300      	movs	r3, #0
 8006206:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621a:	b29a      	uxth	r2, r3
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	1c9a      	adds	r2, r3, #2
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	629a      	str	r2, [r3, #40]	; 0x28
 800622a:	e026      	b.n	800627a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800623e:	d007      	beq.n	8006250 <UART_Receive_IT+0x74>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <UART_Receive_IT+0x82>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b2da      	uxtb	r2, r3
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	701a      	strb	r2, [r3, #0]
 800625c:	e008      	b.n	8006270 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	b2db      	uxtb	r3, r3
 8006266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626a:	b2da      	uxtb	r2, r3
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006274:	1c5a      	adds	r2, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29b      	uxth	r3, r3
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	4619      	mov	r1, r3
 8006288:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800628a:	2b00      	cmp	r3, #0
 800628c:	d15d      	bne.n	800634a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0220 	bic.w	r2, r2, #32
 800629c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695a      	ldr	r2, [r3, #20]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0201 	bic.w	r2, r2, #1
 80062bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2220      	movs	r2, #32
 80062c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d135      	bne.n	8006340 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	613b      	str	r3, [r7, #16]
   return(result);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f023 0310 	bic.w	r3, r3, #16
 80062f0:	627b      	str	r3, [r7, #36]	; 0x24
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	330c      	adds	r3, #12
 80062f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fa:	623a      	str	r2, [r7, #32]
 80062fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fe:	69f9      	ldr	r1, [r7, #28]
 8006300:	6a3a      	ldr	r2, [r7, #32]
 8006302:	e841 2300 	strex	r3, r2, [r1]
 8006306:	61bb      	str	r3, [r7, #24]
   return(result);
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1e5      	bne.n	80062da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b10      	cmp	r3, #16
 800631a:	d10a      	bne.n	8006332 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800631c:	2300      	movs	r3, #0
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f7ff fdd1 	bl	8005ee0 <HAL_UARTEx_RxEventCallback>
 800633e:	e002      	b.n	8006346 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7fa ff81 	bl	8001248 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e002      	b.n	8006350 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800634e:	2302      	movs	r3, #2
  }
}
 8006350:	4618      	mov	r0, r3
 8006352:	3730      	adds	r7, #48	; 0x30
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800635c:	b0c0      	sub	sp, #256	; 0x100
 800635e:	af00      	add	r7, sp, #0
 8006360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	68d9      	ldr	r1, [r3, #12]
 8006376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	ea40 0301 	orr.w	r3, r0, r1
 8006380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	431a      	orrs	r2, r3
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	431a      	orrs	r2, r3
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063b0:	f021 010c 	bic.w	r1, r1, #12
 80063b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063be:	430b      	orrs	r3, r1
 80063c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d2:	6999      	ldr	r1, [r3, #24]
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	ea40 0301 	orr.w	r3, r0, r1
 80063de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b8f      	ldr	r3, [pc, #572]	; (8006624 <UART_SetConfig+0x2cc>)
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d005      	beq.n	80063f8 <UART_SetConfig+0xa0>
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b8d      	ldr	r3, [pc, #564]	; (8006628 <UART_SetConfig+0x2d0>)
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d104      	bne.n	8006402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7fe feb2 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 80063fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006400:	e003      	b.n	800640a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006402:	f7fe fe99 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 8006406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006414:	f040 810c 	bne.w	8006630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641c:	2200      	movs	r2, #0
 800641e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800642a:	4622      	mov	r2, r4
 800642c:	462b      	mov	r3, r5
 800642e:	1891      	adds	r1, r2, r2
 8006430:	65b9      	str	r1, [r7, #88]	; 0x58
 8006432:	415b      	adcs	r3, r3
 8006434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800643a:	4621      	mov	r1, r4
 800643c:	eb12 0801 	adds.w	r8, r2, r1
 8006440:	4629      	mov	r1, r5
 8006442:	eb43 0901 	adc.w	r9, r3, r1
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800645a:	4690      	mov	r8, r2
 800645c:	4699      	mov	r9, r3
 800645e:	4623      	mov	r3, r4
 8006460:	eb18 0303 	adds.w	r3, r8, r3
 8006464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006468:	462b      	mov	r3, r5
 800646a:	eb49 0303 	adc.w	r3, r9, r3
 800646e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800647e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006486:	460b      	mov	r3, r1
 8006488:	18db      	adds	r3, r3, r3
 800648a:	653b      	str	r3, [r7, #80]	; 0x50
 800648c:	4613      	mov	r3, r2
 800648e:	eb42 0303 	adc.w	r3, r2, r3
 8006492:	657b      	str	r3, [r7, #84]	; 0x54
 8006494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800649c:	f7f9 ff58 	bl	8000350 <__aeabi_uldivmod>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4b61      	ldr	r3, [pc, #388]	; (800662c <UART_SetConfig+0x2d4>)
 80064a6:	fba3 2302 	umull	r2, r3, r3, r2
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	011c      	lsls	r4, r3, #4
 80064ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	1891      	adds	r1, r2, r2
 80064c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80064c8:	415b      	adcs	r3, r3
 80064ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064d0:	4641      	mov	r1, r8
 80064d2:	eb12 0a01 	adds.w	sl, r2, r1
 80064d6:	4649      	mov	r1, r9
 80064d8:	eb43 0b01 	adc.w	fp, r3, r1
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064f0:	4692      	mov	sl, r2
 80064f2:	469b      	mov	fp, r3
 80064f4:	4643      	mov	r3, r8
 80064f6:	eb1a 0303 	adds.w	r3, sl, r3
 80064fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064fe:	464b      	mov	r3, r9
 8006500:	eb4b 0303 	adc.w	r3, fp, r3
 8006504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800651c:	460b      	mov	r3, r1
 800651e:	18db      	adds	r3, r3, r3
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
 8006522:	4613      	mov	r3, r2
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	647b      	str	r3, [r7, #68]	; 0x44
 800652a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800652e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006532:	f7f9 ff0d 	bl	8000350 <__aeabi_uldivmod>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4611      	mov	r1, r2
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <UART_SetConfig+0x2d4>)
 800653e:	fba3 2301 	umull	r2, r3, r3, r1
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	2264      	movs	r2, #100	; 0x64
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	1acb      	subs	r3, r1, r3
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <UART_SetConfig+0x2d4>)
 8006554:	fba3 2302 	umull	r2, r3, r3, r2
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006560:	441c      	add	r4, r3
 8006562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006566:	2200      	movs	r2, #0
 8006568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800656c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	1891      	adds	r1, r2, r2
 800657a:	63b9      	str	r1, [r7, #56]	; 0x38
 800657c:	415b      	adcs	r3, r3
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006584:	4641      	mov	r1, r8
 8006586:	1851      	adds	r1, r2, r1
 8006588:	6339      	str	r1, [r7, #48]	; 0x30
 800658a:	4649      	mov	r1, r9
 800658c:	414b      	adcs	r3, r1
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800659c:	4659      	mov	r1, fp
 800659e:	00cb      	lsls	r3, r1, #3
 80065a0:	4651      	mov	r1, sl
 80065a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a6:	4651      	mov	r1, sl
 80065a8:	00ca      	lsls	r2, r1, #3
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	4642      	mov	r2, r8
 80065b2:	189b      	adds	r3, r3, r2
 80065b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065b8:	464b      	mov	r3, r9
 80065ba:	460a      	mov	r2, r1
 80065bc:	eb42 0303 	adc.w	r3, r2, r3
 80065c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80065d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065d8:	460b      	mov	r3, r1
 80065da:	18db      	adds	r3, r3, r3
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065de:	4613      	mov	r3, r2
 80065e0:	eb42 0303 	adc.w	r3, r2, r3
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065ee:	f7f9 feaf 	bl	8000350 <__aeabi_uldivmod>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4b0d      	ldr	r3, [pc, #52]	; (800662c <UART_SetConfig+0x2d4>)
 80065f8:	fba3 1302 	umull	r1, r3, r3, r2
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	2164      	movs	r1, #100	; 0x64
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	3332      	adds	r3, #50	; 0x32
 800660a:	4a08      	ldr	r2, [pc, #32]	; (800662c <UART_SetConfig+0x2d4>)
 800660c:	fba2 2303 	umull	r2, r3, r2, r3
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	f003 0207 	and.w	r2, r3, #7
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4422      	add	r2, r4
 800661e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006620:	e106      	b.n	8006830 <UART_SetConfig+0x4d8>
 8006622:	bf00      	nop
 8006624:	40011000 	.word	0x40011000
 8006628:	40011400 	.word	0x40011400
 800662c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006634:	2200      	movs	r2, #0
 8006636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800663a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800663e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006642:	4642      	mov	r2, r8
 8006644:	464b      	mov	r3, r9
 8006646:	1891      	adds	r1, r2, r2
 8006648:	6239      	str	r1, [r7, #32]
 800664a:	415b      	adcs	r3, r3
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006652:	4641      	mov	r1, r8
 8006654:	1854      	adds	r4, r2, r1
 8006656:	4649      	mov	r1, r9
 8006658:	eb43 0501 	adc.w	r5, r3, r1
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	00eb      	lsls	r3, r5, #3
 8006666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800666a:	00e2      	lsls	r2, r4, #3
 800666c:	4614      	mov	r4, r2
 800666e:	461d      	mov	r5, r3
 8006670:	4643      	mov	r3, r8
 8006672:	18e3      	adds	r3, r4, r3
 8006674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006678:	464b      	mov	r3, r9
 800667a:	eb45 0303 	adc.w	r3, r5, r3
 800667e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800668e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800669e:	4629      	mov	r1, r5
 80066a0:	008b      	lsls	r3, r1, #2
 80066a2:	4621      	mov	r1, r4
 80066a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a8:	4621      	mov	r1, r4
 80066aa:	008a      	lsls	r2, r1, #2
 80066ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066b0:	f7f9 fe4e 	bl	8000350 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4b60      	ldr	r3, [pc, #384]	; (800683c <UART_SetConfig+0x4e4>)
 80066ba:	fba3 2302 	umull	r2, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	011c      	lsls	r4, r3, #4
 80066c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80066d4:	4642      	mov	r2, r8
 80066d6:	464b      	mov	r3, r9
 80066d8:	1891      	adds	r1, r2, r2
 80066da:	61b9      	str	r1, [r7, #24]
 80066dc:	415b      	adcs	r3, r3
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066e4:	4641      	mov	r1, r8
 80066e6:	1851      	adds	r1, r2, r1
 80066e8:	6139      	str	r1, [r7, #16]
 80066ea:	4649      	mov	r1, r9
 80066ec:	414b      	adcs	r3, r1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066fc:	4659      	mov	r1, fp
 80066fe:	00cb      	lsls	r3, r1, #3
 8006700:	4651      	mov	r1, sl
 8006702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006706:	4651      	mov	r1, sl
 8006708:	00ca      	lsls	r2, r1, #3
 800670a:	4610      	mov	r0, r2
 800670c:	4619      	mov	r1, r3
 800670e:	4603      	mov	r3, r0
 8006710:	4642      	mov	r2, r8
 8006712:	189b      	adds	r3, r3, r2
 8006714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006718:	464b      	mov	r3, r9
 800671a:	460a      	mov	r2, r1
 800671c:	eb42 0303 	adc.w	r3, r2, r3
 8006720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	67bb      	str	r3, [r7, #120]	; 0x78
 800672e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800673c:	4649      	mov	r1, r9
 800673e:	008b      	lsls	r3, r1, #2
 8006740:	4641      	mov	r1, r8
 8006742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006746:	4641      	mov	r1, r8
 8006748:	008a      	lsls	r2, r1, #2
 800674a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800674e:	f7f9 fdff 	bl	8000350 <__aeabi_uldivmod>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4611      	mov	r1, r2
 8006758:	4b38      	ldr	r3, [pc, #224]	; (800683c <UART_SetConfig+0x4e4>)
 800675a:	fba3 2301 	umull	r2, r3, r3, r1
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	2264      	movs	r2, #100	; 0x64
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	1acb      	subs	r3, r1, r3
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	3332      	adds	r3, #50	; 0x32
 800676c:	4a33      	ldr	r2, [pc, #204]	; (800683c <UART_SetConfig+0x4e4>)
 800676e:	fba2 2303 	umull	r2, r3, r2, r3
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006778:	441c      	add	r4, r3
 800677a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800677e:	2200      	movs	r2, #0
 8006780:	673b      	str	r3, [r7, #112]	; 0x70
 8006782:	677a      	str	r2, [r7, #116]	; 0x74
 8006784:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006788:	4642      	mov	r2, r8
 800678a:	464b      	mov	r3, r9
 800678c:	1891      	adds	r1, r2, r2
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	415b      	adcs	r3, r3
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006798:	4641      	mov	r1, r8
 800679a:	1851      	adds	r1, r2, r1
 800679c:	6039      	str	r1, [r7, #0]
 800679e:	4649      	mov	r1, r9
 80067a0:	414b      	adcs	r3, r1
 80067a2:	607b      	str	r3, [r7, #4]
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067b0:	4659      	mov	r1, fp
 80067b2:	00cb      	lsls	r3, r1, #3
 80067b4:	4651      	mov	r1, sl
 80067b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ba:	4651      	mov	r1, sl
 80067bc:	00ca      	lsls	r2, r1, #3
 80067be:	4610      	mov	r0, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	4603      	mov	r3, r0
 80067c4:	4642      	mov	r2, r8
 80067c6:	189b      	adds	r3, r3, r2
 80067c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ca:	464b      	mov	r3, r9
 80067cc:	460a      	mov	r2, r1
 80067ce:	eb42 0303 	adc.w	r3, r2, r3
 80067d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	663b      	str	r3, [r7, #96]	; 0x60
 80067de:	667a      	str	r2, [r7, #100]	; 0x64
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80067ec:	4649      	mov	r1, r9
 80067ee:	008b      	lsls	r3, r1, #2
 80067f0:	4641      	mov	r1, r8
 80067f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f6:	4641      	mov	r1, r8
 80067f8:	008a      	lsls	r2, r1, #2
 80067fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067fe:	f7f9 fda7 	bl	8000350 <__aeabi_uldivmod>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <UART_SetConfig+0x4e4>)
 8006808:	fba3 1302 	umull	r1, r3, r3, r2
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	2164      	movs	r1, #100	; 0x64
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	3332      	adds	r3, #50	; 0x32
 800681a:	4a08      	ldr	r2, [pc, #32]	; (800683c <UART_SetConfig+0x4e4>)
 800681c:	fba2 2303 	umull	r2, r3, r2, r3
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	f003 020f 	and.w	r2, r3, #15
 8006826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4422      	add	r2, r4
 800682e:	609a      	str	r2, [r3, #8]
}
 8006830:	bf00      	nop
 8006832:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006836:	46bd      	mov	sp, r7
 8006838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800683c:	51eb851f 	.word	0x51eb851f

08006840 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006840:	b084      	sub	sp, #16
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
 800684a:	f107 001c 	add.w	r0, r7, #28
 800684e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006852:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8006856:	2b01      	cmp	r3, #1
 8006858:	d123      	bne.n	80068a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800686e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006882:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 fae2 	bl	8007e60 <USB_CoreReset>
 800689c:	4603      	mov	r3, r0
 800689e:	73fb      	strb	r3, [r7, #15]
 80068a0:	e01b      	b.n	80068da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fad6 	bl	8007e60 <USB_CoreReset>
 80068b4:	4603      	mov	r3, r0
 80068b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80068b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d106      	bne.n	80068ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38
 80068cc:	e005      	b.n	80068da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80068da:	7fbb      	ldrb	r3, [r7, #30]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d10b      	bne.n	80068f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f043 0206 	orr.w	r2, r3, #6
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f043 0220 	orr.w	r2, r3, #32
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006904:	b004      	add	sp, #16
 8006906:	4770      	bx	lr

08006908 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006916:	79fb      	ldrb	r3, [r7, #7]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d165      	bne.n	80069e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	4a41      	ldr	r2, [pc, #260]	; (8006a24 <USB_SetTurnaroundTime+0x11c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d906      	bls.n	8006932 <USB_SetTurnaroundTime+0x2a>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4a40      	ldr	r2, [pc, #256]	; (8006a28 <USB_SetTurnaroundTime+0x120>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d202      	bcs.n	8006932 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800692c:	230f      	movs	r3, #15
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	e062      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4a3c      	ldr	r2, [pc, #240]	; (8006a28 <USB_SetTurnaroundTime+0x120>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d306      	bcc.n	8006948 <USB_SetTurnaroundTime+0x40>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	4a3b      	ldr	r2, [pc, #236]	; (8006a2c <USB_SetTurnaroundTime+0x124>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d202      	bcs.n	8006948 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006942:	230e      	movs	r3, #14
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	e057      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4a38      	ldr	r2, [pc, #224]	; (8006a2c <USB_SetTurnaroundTime+0x124>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d306      	bcc.n	800695e <USB_SetTurnaroundTime+0x56>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	4a37      	ldr	r2, [pc, #220]	; (8006a30 <USB_SetTurnaroundTime+0x128>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d202      	bcs.n	800695e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006958:	230d      	movs	r3, #13
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	e04c      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4a33      	ldr	r2, [pc, #204]	; (8006a30 <USB_SetTurnaroundTime+0x128>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d306      	bcc.n	8006974 <USB_SetTurnaroundTime+0x6c>
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4a32      	ldr	r2, [pc, #200]	; (8006a34 <USB_SetTurnaroundTime+0x12c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d802      	bhi.n	8006974 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800696e:	230c      	movs	r3, #12
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e041      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4a2f      	ldr	r2, [pc, #188]	; (8006a34 <USB_SetTurnaroundTime+0x12c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d906      	bls.n	800698a <USB_SetTurnaroundTime+0x82>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	4a2e      	ldr	r2, [pc, #184]	; (8006a38 <USB_SetTurnaroundTime+0x130>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d802      	bhi.n	800698a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006984:	230b      	movs	r3, #11
 8006986:	617b      	str	r3, [r7, #20]
 8006988:	e036      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4a2a      	ldr	r2, [pc, #168]	; (8006a38 <USB_SetTurnaroundTime+0x130>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d906      	bls.n	80069a0 <USB_SetTurnaroundTime+0x98>
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4a29      	ldr	r2, [pc, #164]	; (8006a3c <USB_SetTurnaroundTime+0x134>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d802      	bhi.n	80069a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800699a:	230a      	movs	r3, #10
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	e02b      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a26      	ldr	r2, [pc, #152]	; (8006a3c <USB_SetTurnaroundTime+0x134>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d906      	bls.n	80069b6 <USB_SetTurnaroundTime+0xae>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4a25      	ldr	r2, [pc, #148]	; (8006a40 <USB_SetTurnaroundTime+0x138>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d202      	bcs.n	80069b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80069b0:	2309      	movs	r3, #9
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e020      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4a21      	ldr	r2, [pc, #132]	; (8006a40 <USB_SetTurnaroundTime+0x138>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d306      	bcc.n	80069cc <USB_SetTurnaroundTime+0xc4>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4a20      	ldr	r2, [pc, #128]	; (8006a44 <USB_SetTurnaroundTime+0x13c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d802      	bhi.n	80069cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80069c6:	2308      	movs	r3, #8
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e015      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a1d      	ldr	r2, [pc, #116]	; (8006a44 <USB_SetTurnaroundTime+0x13c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d906      	bls.n	80069e2 <USB_SetTurnaroundTime+0xda>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4a1c      	ldr	r2, [pc, #112]	; (8006a48 <USB_SetTurnaroundTime+0x140>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d202      	bcs.n	80069e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80069dc:	2307      	movs	r3, #7
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e00a      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80069e2:	2306      	movs	r3, #6
 80069e4:	617b      	str	r3, [r7, #20]
 80069e6:	e007      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80069e8:	79fb      	ldrb	r3, [r7, #7]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80069ee:	2309      	movs	r3, #9
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	e001      	b.n	80069f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80069f4:	2309      	movs	r3, #9
 80069f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	68da      	ldr	r2, [r3, #12]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	029b      	lsls	r3, r3, #10
 8006a0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a10:	431a      	orrs	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	00d8acbf 	.word	0x00d8acbf
 8006a28:	00e4e1c0 	.word	0x00e4e1c0
 8006a2c:	00f42400 	.word	0x00f42400
 8006a30:	01067380 	.word	0x01067380
 8006a34:	011a499f 	.word	0x011a499f
 8006a38:	01312cff 	.word	0x01312cff
 8006a3c:	014ca43f 	.word	0x014ca43f
 8006a40:	016e3600 	.word	0x016e3600
 8006a44:	01a6ab1f 	.word	0x01a6ab1f
 8006a48:	01e84800 	.word	0x01e84800

08006a4c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f043 0201 	orr.w	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f023 0201 	bic.w	r2, r3, #1
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d115      	bne.n	8006ade <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006abe:	200a      	movs	r0, #10
 8006ac0:	f7fb fc9c 	bl	80023fc <HAL_Delay>
      ms += 10U;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	330a      	adds	r3, #10
 8006ac8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f939 	bl	8007d42 <USB_GetMode>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d01e      	beq.n	8006b14 <USB_SetCurrentMode+0x84>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2bc7      	cmp	r3, #199	; 0xc7
 8006ada:	d9f0      	bls.n	8006abe <USB_SetCurrentMode+0x2e>
 8006adc:	e01a      	b.n	8006b14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ade:	78fb      	ldrb	r3, [r7, #3]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d115      	bne.n	8006b10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006af0:	200a      	movs	r0, #10
 8006af2:	f7fb fc83 	bl	80023fc <HAL_Delay>
      ms += 10U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	330a      	adds	r3, #10
 8006afa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f920 	bl	8007d42 <USB_GetMode>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <USB_SetCurrentMode+0x84>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2bc7      	cmp	r3, #199	; 0xc7
 8006b0c:	d9f0      	bls.n	8006af0 <USB_SetCurrentMode+0x60>
 8006b0e:	e001      	b.n	8006b14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e005      	b.n	8006b20 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2bc8      	cmp	r3, #200	; 0xc8
 8006b18:	d101      	bne.n	8006b1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b28:	b084      	sub	sp, #16
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b42:	2300      	movs	r3, #0
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	e009      	b.n	8006b5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	3340      	adds	r3, #64	; 0x40
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	2200      	movs	r2, #0
 8006b54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b0e      	cmp	r3, #14
 8006b60:	d9f2      	bls.n	8006b48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d11c      	bne.n	8006ba4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b78:	f043 0302 	orr.w	r3, r3, #2
 8006b7c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ba2:	e00b      	b.n	8006bbc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bc8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d10d      	bne.n	8006bec <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006bd8:	2100      	movs	r1, #0
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f968 	bl	8006eb0 <USB_SetDevSpeed>
 8006be0:	e008      	b.n	8006bf4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006be2:	2101      	movs	r1, #1
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f963 	bl	8006eb0 <USB_SetDevSpeed>
 8006bea:	e003      	b.n	8006bf4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006bec:	2103      	movs	r1, #3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f95e 	bl	8006eb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bf4:	2110      	movs	r1, #16
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f8fa 	bl	8006df0 <USB_FlushTxFifo>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f924 	bl	8006e54 <USB_FlushRxFifo>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	2300      	movs	r3, #0
 8006c20:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c28:	461a      	mov	r2, r3
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c34:	461a      	mov	r2, r3
 8006c36:	2300      	movs	r3, #0
 8006c38:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	e043      	b.n	8006cc8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c56:	d118      	bne.n	8006c8a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e013      	b.n	8006c9c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c80:	461a      	mov	r2, r3
 8006c82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	e008      	b.n	8006c9c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c96:	461a      	mov	r2, r3
 8006c98:	2300      	movs	r3, #0
 8006c9a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca8:	461a      	mov	r2, r3
 8006caa:	2300      	movs	r3, #0
 8006cac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ccc:	461a      	mov	r2, r3
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d3b5      	bcc.n	8006c40 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	e043      	b.n	8006d62 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cf0:	d118      	bne.n	8006d24 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d04:	461a      	mov	r2, r3
 8006d06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	e013      	b.n	8006d36 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	e008      	b.n	8006d36 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d30:	461a      	mov	r2, r3
 8006d32:	2300      	movs	r3, #0
 8006d34:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d42:	461a      	mov	r2, r3
 8006d44:	2300      	movs	r3, #0
 8006d46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	461a      	mov	r2, r3
 8006d56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d66:	461a      	mov	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d3b5      	bcc.n	8006cda <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d80:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d8e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d105      	bne.n	8006da4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	f043 0210 	orr.w	r2, r3, #16
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	4b10      	ldr	r3, [pc, #64]	; (8006dec <USB_DevInit+0x2c4>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006db0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d005      	beq.n	8006dc4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	f043 0208 	orr.w	r2, r3, #8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006dc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d107      	bne.n	8006ddc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dd4:	f043 0304 	orr.w	r3, r3, #4
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006de8:	b004      	add	sp, #16
 8006dea:	4770      	bx	lr
 8006dec:	803c3800 	.word	0x803c3800

08006df0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e0a:	d901      	bls.n	8006e10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e01b      	b.n	8006e48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	daf2      	bge.n	8006dfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	019b      	lsls	r3, r3, #6
 8006e20:	f043 0220 	orr.w	r2, r3, #32
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e34:	d901      	bls.n	8006e3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e006      	b.n	8006e48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	d0f0      	beq.n	8006e28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3714      	adds	r7, #20
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e6c:	d901      	bls.n	8006e72 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e018      	b.n	8006ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	daf2      	bge.n	8006e60 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2210      	movs	r2, #16
 8006e82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3301      	adds	r3, #1
 8006e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006e90:	d901      	bls.n	8006e96 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e006      	b.n	8006ea4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d0f0      	beq.n	8006e84 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b087      	sub	sp, #28
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 0306 	and.w	r3, r3, #6
 8006efa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d102      	bne.n	8006f08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f02:	2300      	movs	r3, #0
 8006f04:	75fb      	strb	r3, [r7, #23]
 8006f06:	e00a      	b.n	8006f1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d002      	beq.n	8006f14 <USB_GetDevSpeed+0x32>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b06      	cmp	r3, #6
 8006f12:	d102      	bne.n	8006f1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f14:	2302      	movs	r3, #2
 8006f16:	75fb      	strb	r3, [r7, #23]
 8006f18:	e001      	b.n	8006f1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f1a:	230f      	movs	r3, #15
 8006f1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d13a      	bne.n	8006fbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	69da      	ldr	r2, [r3, #28]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	2101      	movs	r1, #1
 8006f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	68f9      	ldr	r1, [r7, #12]
 8006f62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f66:	4313      	orrs	r3, r2
 8006f68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	015a      	lsls	r2, r3, #5
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	4413      	add	r3, r2
 8006f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d155      	bne.n	800702c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	791b      	ldrb	r3, [r3, #4]
 8006f9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	059b      	lsls	r3, r3, #22
 8006fa2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	0151      	lsls	r1, r2, #5
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	440a      	add	r2, r1
 8006fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fba:	6013      	str	r3, [r2, #0]
 8006fbc:	e036      	b.n	800702c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc4:	69da      	ldr	r2, [r3, #28]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	2101      	movs	r1, #1
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	041b      	lsls	r3, r3, #16
 8006fd6:	68f9      	ldr	r1, [r7, #12]
 8006fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d11a      	bne.n	800702c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	791b      	ldrb	r3, [r3, #4]
 8007010:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007012:	430b      	orrs	r3, r1
 8007014:	4313      	orrs	r3, r2
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	440a      	add	r2, r1
 800701e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800702a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
	...

0800703c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d161      	bne.n	800711c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800706a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800706e:	d11f      	bne.n	80070b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	440a      	add	r2, r1
 8007086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800708e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	f003 030f 	and.w	r3, r3, #15
 80070c0:	2101      	movs	r1, #1
 80070c2:	fa01 f303 	lsl.w	r3, r1, r3
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	43db      	mvns	r3, r3
 80070ca:	68f9      	ldr	r1, [r7, #12]
 80070cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070d0:	4013      	ands	r3, r2
 80070d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	2101      	movs	r1, #1
 80070e6:	fa01 f303 	lsl.w	r3, r1, r3
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	43db      	mvns	r3, r3
 80070ee:	68f9      	ldr	r1, [r7, #12]
 80070f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f4:	4013      	ands	r3, r2
 80070f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	0159      	lsls	r1, r3, #5
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	440b      	add	r3, r1
 800710e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007112:	4619      	mov	r1, r3
 8007114:	4b35      	ldr	r3, [pc, #212]	; (80071ec <USB_DeactivateEndpoint+0x1b0>)
 8007116:	4013      	ands	r3, r2
 8007118:	600b      	str	r3, [r1, #0]
 800711a:	e060      	b.n	80071de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800712e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007132:	d11f      	bne.n	8007174 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	015a      	lsls	r2, r3, #5
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	4413      	add	r3, r2
 800713c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	0151      	lsls	r1, r2, #5
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	440a      	add	r2, r1
 800714a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800714e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007152:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	440a      	add	r2, r1
 800716a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007172:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800717a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	f003 030f 	and.w	r3, r3, #15
 8007184:	2101      	movs	r1, #1
 8007186:	fa01 f303 	lsl.w	r3, r1, r3
 800718a:	041b      	lsls	r3, r3, #16
 800718c:	43db      	mvns	r3, r3
 800718e:	68f9      	ldr	r1, [r7, #12]
 8007190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007194:	4013      	ands	r3, r2
 8007196:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 030f 	and.w	r3, r3, #15
 80071a8:	2101      	movs	r1, #1
 80071aa:	fa01 f303 	lsl.w	r3, r1, r3
 80071ae:	041b      	lsls	r3, r3, #16
 80071b0:	43db      	mvns	r3, r3
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b8:	4013      	ands	r3, r2
 80071ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	0159      	lsls	r1, r3, #5
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	440b      	add	r3, r1
 80071d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d6:	4619      	mov	r1, r3
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <USB_DeactivateEndpoint+0x1b4>)
 80071da:	4013      	ands	r3, r2
 80071dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	ec337800 	.word	0xec337800
 80071f0:	eff37800 	.word	0xeff37800

080071f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08a      	sub	sp, #40	; 0x28
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	2b01      	cmp	r3, #1
 8007212:	f040 817a 	bne.w	800750a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d132      	bne.n	8007284 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	0151      	lsls	r1, r2, #5
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	440a      	add	r2, r1
 8007234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800723c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	69fa      	ldr	r2, [r7, #28]
 8007276:	440a      	add	r2, r1
 8007278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800727c:	0cdb      	lsrs	r3, r3, #19
 800727e:	04db      	lsls	r3, r3, #19
 8007280:	6113      	str	r3, [r2, #16]
 8007282:	e092      	b.n	80073aa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	0151      	lsls	r1, r2, #5
 8007296:	69fa      	ldr	r2, [r7, #28]
 8007298:	440a      	add	r2, r1
 800729a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800729e:	0cdb      	lsrs	r3, r3, #19
 80072a0:	04db      	lsls	r3, r3, #19
 80072a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	0151      	lsls	r1, r2, #5
 80072b6:	69fa      	ldr	r2, [r7, #28]
 80072b8:	440a      	add	r2, r1
 80072ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072c6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d11a      	bne.n	8007304 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	691a      	ldr	r2, [r3, #16]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d903      	bls.n	80072e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	689a      	ldr	r2, [r3, #8]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007300:	6113      	str	r3, [r2, #16]
 8007302:	e01b      	b.n	800733c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	6919      	ldr	r1, [r3, #16]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	440b      	add	r3, r1
 800731c:	1e59      	subs	r1, r3, #1
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	fbb1 f3f3 	udiv	r3, r1, r3
 8007326:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007328:	4ba2      	ldr	r3, [pc, #648]	; (80075b4 <USB_EPStartXfer+0x3c0>)
 800732a:	400b      	ands	r3, r1
 800732c:	69b9      	ldr	r1, [r7, #24]
 800732e:	0148      	lsls	r0, r1, #5
 8007330:	69f9      	ldr	r1, [r7, #28]
 8007332:	4401      	add	r1, r0
 8007334:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007338:	4313      	orrs	r3, r2
 800733a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	691a      	ldr	r2, [r3, #16]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007352:	69b9      	ldr	r1, [r7, #24]
 8007354:	0148      	lsls	r0, r1, #5
 8007356:	69f9      	ldr	r1, [r7, #28]
 8007358:	4401      	add	r1, r0
 800735a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800735e:	4313      	orrs	r3, r2
 8007360:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	791b      	ldrb	r3, [r3, #4]
 8007366:	2b01      	cmp	r3, #1
 8007368:	d11f      	bne.n	80073aa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007384:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007388:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80073aa:	79fb      	ldrb	r3, [r7, #7]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d14b      	bne.n	8007448 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	69db      	ldr	r3, [r3, #28]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d009      	beq.n	80073cc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	461a      	mov	r2, r3
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	791b      	ldrb	r3, [r3, #4]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d128      	bne.n	8007426 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d110      	bne.n	8007406 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	0151      	lsls	r1, r2, #5
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	440a      	add	r2, r1
 80073fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	e00f      	b.n	8007426 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	015a      	lsls	r2, r3, #5
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	69fa      	ldr	r2, [r7, #28]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007424:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007440:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007444:	6013      	str	r3, [r2, #0]
 8007446:	e165      	b.n	8007714 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	0151      	lsls	r1, r2, #5
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	440a      	add	r2, r1
 800745e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007466:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	791b      	ldrb	r3, [r3, #4]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d015      	beq.n	800749c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 814d 	beq.w	8007714 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	2101      	movs	r1, #1
 800748c:	fa01 f303 	lsl.w	r3, r1, r3
 8007490:	69f9      	ldr	r1, [r7, #28]
 8007492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007496:	4313      	orrs	r3, r2
 8007498:	634b      	str	r3, [r1, #52]	; 0x34
 800749a:	e13b      	b.n	8007714 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d110      	bne.n	80074ce <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	69fa      	ldr	r2, [r7, #28]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	e00f      	b.n	80074ee <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	68d9      	ldr	r1, [r3, #12]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	781a      	ldrb	r2, [r3, #0]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	b298      	uxth	r0, r3
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	4603      	mov	r3, r0
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f9b8 	bl	8007878 <USB_WritePacket>
 8007508:	e104      	b.n	8007714 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007524:	0cdb      	lsrs	r3, r3, #19
 8007526:	04db      	lsls	r3, r3, #19
 8007528:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	691b      	ldr	r3, [r3, #16]
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	69fa      	ldr	r2, [r7, #28]
 800753e:	440a      	add	r2, r1
 8007540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007544:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007548:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800754c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d131      	bne.n	80075b8 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007578:	691a      	ldr	r2, [r3, #16]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007582:	69b9      	ldr	r1, [r7, #24]
 8007584:	0148      	lsls	r0, r1, #5
 8007586:	69f9      	ldr	r1, [r7, #28]
 8007588:	4401      	add	r1, r0
 800758a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800758e:	4313      	orrs	r3, r2
 8007590:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	0151      	lsls	r1, r2, #5
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	440a      	add	r2, r1
 80075a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075b0:	6113      	str	r3, [r2, #16]
 80075b2:	e061      	b.n	8007678 <USB_EPStartXfer+0x484>
 80075b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d123      	bne.n	8007608 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075d6:	69b9      	ldr	r1, [r7, #24]
 80075d8:	0148      	lsls	r0, r1, #5
 80075da:	69f9      	ldr	r1, [r7, #28]
 80075dc:	4401      	add	r1, r0
 80075de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075e2:	4313      	orrs	r3, r2
 80075e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007604:	6113      	str	r3, [r2, #16]
 8007606:	e037      	b.n	8007678 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	4413      	add	r3, r2
 8007612:	1e5a      	subs	r2, r3, #1
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	fbb2 f3f3 	udiv	r3, r2, r3
 800761c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	8afa      	ldrh	r2, [r7, #22]
 8007624:	fb03 f202 	mul.w	r2, r3, r2
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	8afb      	ldrh	r3, [r7, #22]
 800763c:	04d9      	lsls	r1, r3, #19
 800763e:	4b38      	ldr	r3, [pc, #224]	; (8007720 <USB_EPStartXfer+0x52c>)
 8007640:	400b      	ands	r3, r1
 8007642:	69b9      	ldr	r1, [r7, #24]
 8007644:	0148      	lsls	r0, r1, #5
 8007646:	69f9      	ldr	r1, [r7, #28]
 8007648:	4401      	add	r1, r0
 800764a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800764e:	4313      	orrs	r3, r2
 8007650:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765e:	691a      	ldr	r2, [r3, #16]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	6a1b      	ldr	r3, [r3, #32]
 8007664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007668:	69b9      	ldr	r1, [r7, #24]
 800766a:	0148      	lsls	r0, r1, #5
 800766c:	69f9      	ldr	r1, [r7, #28]
 800766e:	4401      	add	r1, r0
 8007670:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007674:	4313      	orrs	r3, r2
 8007676:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d10d      	bne.n	800769a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d009      	beq.n	800769a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	68d9      	ldr	r1, [r3, #12]
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007696:	460a      	mov	r2, r1
 8007698:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	791b      	ldrb	r3, [r3, #4]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d128      	bne.n	80076f4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d110      	bne.n	80076d4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	0151      	lsls	r1, r2, #5
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	440a      	add	r2, r1
 80076c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	e00f      	b.n	80076f4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	440a      	add	r2, r1
 800770a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800770e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007712:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3720      	adds	r7, #32
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	1ff80000 	.word	0x1ff80000

08007724 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007732:	2300      	movs	r3, #0
 8007734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d14a      	bne.n	80077d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775a:	f040 8086 	bne.w	800786a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	440a      	add	r2, r1
 8007778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007780:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	7812      	ldrb	r2, [r2, #0]
 8007796:	0151      	lsls	r1, r2, #5
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	440a      	add	r2, r1
 800779c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3301      	adds	r3, #1
 80077aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d902      	bls.n	80077bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	75fb      	strb	r3, [r7, #23]
          break;
 80077ba:	e056      	b.n	800786a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077d4:	d0e7      	beq.n	80077a6 <USB_EPStopXfer+0x82>
 80077d6:	e048      	b.n	800786a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f0:	d13b      	bne.n	800786a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007810:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007814:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	7812      	ldrb	r2, [r2, #0]
 800782a:	0151      	lsls	r1, r2, #5
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	440a      	add	r2, r1
 8007830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007838:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f242 7210 	movw	r2, #10000	; 0x2710
 8007846:	4293      	cmp	r3, r2
 8007848:	d902      	bls.n	8007850 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]
          break;
 800784e:	e00c      	b.n	800786a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007868:	d0e7      	beq.n	800783a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
}
 800786c:	4618      	mov	r0, r3
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007878:	b480      	push	{r7}
 800787a:	b089      	sub	sp, #36	; 0x24
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4611      	mov	r1, r2
 8007884:	461a      	mov	r2, r3
 8007886:	460b      	mov	r3, r1
 8007888:	71fb      	strb	r3, [r7, #7]
 800788a:	4613      	mov	r3, r2
 800788c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800789a:	2b00      	cmp	r3, #0
 800789c:	d123      	bne.n	80078e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800789e:	88bb      	ldrh	r3, [r7, #4]
 80078a0:	3303      	adds	r3, #3
 80078a2:	089b      	lsrs	r3, r3, #2
 80078a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	61bb      	str	r3, [r7, #24]
 80078aa:	e018      	b.n	80078de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	031a      	lsls	r2, r3, #12
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078b8:	461a      	mov	r2, r3
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078c0:	69fb      	ldr	r3, [r7, #28]
 80078c2:	3301      	adds	r3, #1
 80078c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	3301      	adds	r3, #1
 80078ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	3301      	adds	r3, #1
 80078d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	3301      	adds	r3, #1
 80078d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	3301      	adds	r3, #1
 80078dc:	61bb      	str	r3, [r7, #24]
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d3e2      	bcc.n	80078ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3724      	adds	r7, #36	; 0x24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b08b      	sub	sp, #44	; 0x2c
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	4613      	mov	r3, r2
 8007900:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800790a:	88fb      	ldrh	r3, [r7, #6]
 800790c:	089b      	lsrs	r3, r3, #2
 800790e:	b29b      	uxth	r3, r3
 8007910:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	f003 0303 	and.w	r3, r3, #3
 8007918:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800791a:	2300      	movs	r3, #0
 800791c:	623b      	str	r3, [r7, #32]
 800791e:	e014      	b.n	800794a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792a:	601a      	str	r2, [r3, #0]
    pDest++;
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	3301      	adds	r3, #1
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	3301      	adds	r3, #1
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	3301      	adds	r3, #1
 800793c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	3301      	adds	r3, #1
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	3301      	adds	r3, #1
 8007948:	623b      	str	r3, [r7, #32]
 800794a:	6a3a      	ldr	r2, [r7, #32]
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	429a      	cmp	r2, r3
 8007950:	d3e6      	bcc.n	8007920 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007952:	8bfb      	ldrh	r3, [r7, #30]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01e      	beq.n	8007996 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007958:	2300      	movs	r3, #0
 800795a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800795c:	69bb      	ldr	r3, [r7, #24]
 800795e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007962:	461a      	mov	r2, r3
 8007964:	f107 0310 	add.w	r3, r7, #16
 8007968:	6812      	ldr	r2, [r2, #0]
 800796a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	fa22 f303 	lsr.w	r3, r2, r3
 8007978:	b2da      	uxtb	r2, r3
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	701a      	strb	r2, [r3, #0]
      i++;
 800797e:	6a3b      	ldr	r3, [r7, #32]
 8007980:	3301      	adds	r3, #1
 8007982:	623b      	str	r3, [r7, #32]
      pDest++;
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	3301      	adds	r3, #1
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800798a:	8bfb      	ldrh	r3, [r7, #30]
 800798c:	3b01      	subs	r3, #1
 800798e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007990:	8bfb      	ldrh	r3, [r7, #30]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1ea      	bne.n	800796c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007998:	4618      	mov	r0, r3
 800799a:	372c      	adds	r7, #44	; 0x2c
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d12c      	bne.n	8007a1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	db12      	blt.n	80079f8 <USB_EPSetStall+0x54>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00f      	beq.n	80079f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	0151      	lsls	r1, r2, #5
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	440a      	add	r2, r1
 80079ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	0151      	lsls	r1, r2, #5
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	440a      	add	r2, r1
 8007a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	e02b      	b.n	8007a72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	db12      	blt.n	8007a52 <USB_EPSetStall+0xae>
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00f      	beq.n	8007a52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	015a      	lsls	r2, r3, #5
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4413      	add	r3, r2
 8007a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	0151      	lsls	r1, r2, #5
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	440a      	add	r2, r1
 8007a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d128      	bne.n	8007aee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007aba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	791b      	ldrb	r3, [r3, #4]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d003      	beq.n	8007acc <USB_EPClearStall+0x4c>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	791b      	ldrb	r3, [r3, #4]
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d138      	bne.n	8007b3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	e027      	b.n	8007b3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	0151      	lsls	r1, r2, #5
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	440a      	add	r2, r1
 8007b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	791b      	ldrb	r3, [r3, #4]
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d003      	beq.n	8007b1e <USB_EPClearStall+0x9e>
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	791b      	ldrb	r3, [r3, #4]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d10f      	bne.n	8007b3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	0151      	lsls	r1, r2, #5
 8007b30:	68fa      	ldr	r2, [r7, #12]
 8007b32:	440a      	add	r2, r1
 8007b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	460b      	mov	r3, r1
 8007b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b80:	68f9      	ldr	r1, [r7, #12]
 8007b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b86:	4313      	orrs	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bc6:	f023 0302 	bic.w	r3, r3, #2
 8007bca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bf4:	f023 0303 	bic.w	r3, r3, #3
 8007bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c08:	f043 0302 	orr.w	r3, r3, #2
 8007c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	699b      	ldr	r3, [r3, #24]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	4013      	ands	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c34:	68fb      	ldr	r3, [r7, #12]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	4013      	ands	r3, r2
 8007c64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	0c1b      	lsrs	r3, r3, #16
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	4013      	ands	r3, r2
 8007c98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	b29b      	uxth	r3, r3
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b085      	sub	sp, #20
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b087      	sub	sp, #28
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
 8007cee:	460b      	mov	r3, r1
 8007cf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	f003 030f 	and.w	r3, r3, #15
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	fa22 f303 	lsr.w	r3, r2, r3
 8007d16:	01db      	lsls	r3, r3, #7
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d20:	78fb      	ldrb	r3, [r7, #3]
 8007d22:	015a      	lsls	r2, r3, #5
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	4413      	add	r3, r2
 8007d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4013      	ands	r3, r2
 8007d32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d34:	68bb      	ldr	r3, [r7, #8]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d7c:	f023 0307 	bic.w	r3, r3, #7
 8007d80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	460b      	mov	r3, r1
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	333c      	adds	r3, #60	; 0x3c
 8007dba:	3304      	adds	r3, #4
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4a26      	ldr	r2, [pc, #152]	; (8007e5c <USB_EP0_OutStart+0xb8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d90a      	bls.n	8007dde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dd8:	d101      	bne.n	8007dde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	e037      	b.n	8007e4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de4:	461a      	mov	r2, r3
 8007de6:	2300      	movs	r3, #0
 8007de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0c:	f043 0318 	orr.w	r3, r3, #24
 8007e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d10f      	bne.n	8007e4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	461a      	mov	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	4f54300a 	.word	0x4f54300a

08007e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007e78:	d901      	bls.n	8007e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e01b      	b.n	8007eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	daf2      	bge.n	8007e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f043 0201 	orr.w	r2, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8007ea2:	d901      	bls.n	8007ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e006      	b.n	8007eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d0f0      	beq.n	8007e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
	...

08007ec4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ed0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ed4:	f002 fc8a 	bl	800a7ec <USBD_static_malloc>
 8007ed8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d109      	bne.n	8007ef4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	32b0      	adds	r2, #176	; 0xb0
 8007eea:	2100      	movs	r1, #0
 8007eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e0d4      	b.n	800809e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ef4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ef8:	2100      	movs	r1, #0
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f003 f844 	bl	800af88 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	32b0      	adds	r2, #176	; 0xb0
 8007f0a:	68f9      	ldr	r1, [r7, #12]
 8007f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	32b0      	adds	r2, #176	; 0xb0
 8007f1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	7c1b      	ldrb	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d138      	bne.n	8007f9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f2c:	4b5e      	ldr	r3, [pc, #376]	; (80080a8 <USBD_CDC_Init+0x1e4>)
 8007f2e:	7819      	ldrb	r1, [r3, #0]
 8007f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f34:	2202      	movs	r2, #2
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f002 fb35 	bl	800a5a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f3c:	4b5a      	ldr	r3, [pc, #360]	; (80080a8 <USBD_CDC_Init+0x1e4>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	f003 020f 	and.w	r2, r3, #15
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	440b      	add	r3, r1
 8007f50:	3324      	adds	r3, #36	; 0x24
 8007f52:	2201      	movs	r2, #1
 8007f54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f56:	4b55      	ldr	r3, [pc, #340]	; (80080ac <USBD_CDC_Init+0x1e8>)
 8007f58:	7819      	ldrb	r1, [r3, #0]
 8007f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f5e:	2202      	movs	r2, #2
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f002 fb20 	bl	800a5a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f66:	4b51      	ldr	r3, [pc, #324]	; (80080ac <USBD_CDC_Init+0x1e8>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	f003 020f 	and.w	r2, r3, #15
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f7e:	2201      	movs	r2, #1
 8007f80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f82:	4b4b      	ldr	r3, [pc, #300]	; (80080b0 <USBD_CDC_Init+0x1ec>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	f003 020f 	and.w	r2, r3, #15
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	3326      	adds	r3, #38	; 0x26
 8007f98:	2210      	movs	r2, #16
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	e035      	b.n	800800a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f9e:	4b42      	ldr	r3, [pc, #264]	; (80080a8 <USBD_CDC_Init+0x1e4>)
 8007fa0:	7819      	ldrb	r1, [r3, #0]
 8007fa2:	2340      	movs	r3, #64	; 0x40
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f002 fafd 	bl	800a5a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007fac:	4b3e      	ldr	r3, [pc, #248]	; (80080a8 <USBD_CDC_Init+0x1e4>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 020f 	and.w	r2, r3, #15
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	440b      	add	r3, r1
 8007fc0:	3324      	adds	r3, #36	; 0x24
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fc6:	4b39      	ldr	r3, [pc, #228]	; (80080ac <USBD_CDC_Init+0x1e8>)
 8007fc8:	7819      	ldrb	r1, [r3, #0]
 8007fca:	2340      	movs	r3, #64	; 0x40
 8007fcc:	2202      	movs	r2, #2
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f002 fae9 	bl	800a5a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fd4:	4b35      	ldr	r3, [pc, #212]	; (80080ac <USBD_CDC_Init+0x1e8>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	f003 020f 	and.w	r2, r3, #15
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	4413      	add	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	440b      	add	r3, r1
 8007fe8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fec:	2201      	movs	r2, #1
 8007fee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007ff0:	4b2f      	ldr	r3, [pc, #188]	; (80080b0 <USBD_CDC_Init+0x1ec>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	f003 020f 	and.w	r2, r3, #15
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	3326      	adds	r3, #38	; 0x26
 8008006:	2210      	movs	r2, #16
 8008008:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800800a:	4b29      	ldr	r3, [pc, #164]	; (80080b0 <USBD_CDC_Init+0x1ec>)
 800800c:	7819      	ldrb	r1, [r3, #0]
 800800e:	2308      	movs	r3, #8
 8008010:	2203      	movs	r2, #3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f002 fac7 	bl	800a5a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008018:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <USBD_CDC_Init+0x1ec>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	f003 020f 	and.w	r2, r3, #15
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	440b      	add	r3, r1
 800802c:	3324      	adds	r3, #36	; 0x24
 800802e:	2201      	movs	r2, #1
 8008030:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	33b0      	adds	r3, #176	; 0xb0
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008068:	2302      	movs	r3, #2
 800806a:	e018      	b.n	800809e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	7c1b      	ldrb	r3, [r3, #16]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d10a      	bne.n	800808a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008074:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <USBD_CDC_Init+0x1e8>)
 8008076:	7819      	ldrb	r1, [r3, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800807e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f002 fb7e 	bl	800a784 <USBD_LL_PrepareReceive>
 8008088:	e008      	b.n	800809c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800808a:	4b08      	ldr	r3, [pc, #32]	; (80080ac <USBD_CDC_Init+0x1e8>)
 800808c:	7819      	ldrb	r1, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008094:	2340      	movs	r3, #64	; 0x40
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f002 fb74 	bl	800a784 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	200000b7 	.word	0x200000b7
 80080ac:	200000b8 	.word	0x200000b8
 80080b0:	200000b9 	.word	0x200000b9

080080b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80080c0:	4b3a      	ldr	r3, [pc, #232]	; (80081ac <USBD_CDC_DeInit+0xf8>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f002 fa93 	bl	800a5f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80080cc:	4b37      	ldr	r3, [pc, #220]	; (80081ac <USBD_CDC_DeInit+0xf8>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 020f 	and.w	r2, r3, #15
 80080d4:	6879      	ldr	r1, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	440b      	add	r3, r1
 80080e0:	3324      	adds	r3, #36	; 0x24
 80080e2:	2200      	movs	r2, #0
 80080e4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80080e6:	4b32      	ldr	r3, [pc, #200]	; (80081b0 <USBD_CDC_DeInit+0xfc>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f002 fa80 	bl	800a5f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80080f2:	4b2f      	ldr	r3, [pc, #188]	; (80081b0 <USBD_CDC_DeInit+0xfc>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	f003 020f 	and.w	r2, r3, #15
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800810a:	2200      	movs	r2, #0
 800810c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800810e:	4b29      	ldr	r3, [pc, #164]	; (80081b4 <USBD_CDC_DeInit+0x100>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	4619      	mov	r1, r3
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f002 fa6c 	bl	800a5f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800811a:	4b26      	ldr	r3, [pc, #152]	; (80081b4 <USBD_CDC_DeInit+0x100>)
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	f003 020f 	and.w	r2, r3, #15
 8008122:	6879      	ldr	r1, [r7, #4]
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	3324      	adds	r3, #36	; 0x24
 8008130:	2200      	movs	r2, #0
 8008132:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008134:	4b1f      	ldr	r3, [pc, #124]	; (80081b4 <USBD_CDC_DeInit+0x100>)
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	f003 020f 	and.w	r2, r3, #15
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4613      	mov	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	3326      	adds	r3, #38	; 0x26
 800814a:	2200      	movs	r2, #0
 800814c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	32b0      	adds	r2, #176	; 0xb0
 8008158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01f      	beq.n	80081a0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	33b0      	adds	r3, #176	; 0xb0
 800816a:	009b      	lsls	r3, r3, #2
 800816c:	4413      	add	r3, r2
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	32b0      	adds	r2, #176	; 0xb0
 800817e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008182:	4618      	mov	r0, r3
 8008184:	f002 fb40 	bl	800a808 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	32b0      	adds	r2, #176	; 0xb0
 8008192:	2100      	movs	r1, #0
 8008194:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	200000b7 	.word	0x200000b7
 80081b0:	200000b8 	.word	0x200000b8
 80081b4:	200000b9 	.word	0x200000b9

080081b8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	32b0      	adds	r2, #176	; 0xb0
 80081cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e0bf      	b.n	8008368 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d050      	beq.n	8008296 <USBD_CDC_Setup+0xde>
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	f040 80af 	bne.w	8008358 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	88db      	ldrh	r3, [r3, #6]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d03a      	beq.n	8008278 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	b25b      	sxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	da1b      	bge.n	8008244 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	33b0      	adds	r3, #176	; 0xb0
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4413      	add	r3, r2
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008222:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	88d2      	ldrh	r2, [r2, #6]
 8008228:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	88db      	ldrh	r3, [r3, #6]
 800822e:	2b07      	cmp	r3, #7
 8008230:	bf28      	it	cs
 8008232:	2307      	movcs	r3, #7
 8008234:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	89fa      	ldrh	r2, [r7, #14]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 fd89 	bl	8009d54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008242:	e090      	b.n	8008366 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	785a      	ldrb	r2, [r3, #1]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	88db      	ldrh	r3, [r3, #6]
 8008252:	2b3f      	cmp	r3, #63	; 0x3f
 8008254:	d803      	bhi.n	800825e <USBD_CDC_Setup+0xa6>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	88db      	ldrh	r3, [r3, #6]
 800825a:	b2da      	uxtb	r2, r3
 800825c:	e000      	b.n	8008260 <USBD_CDC_Setup+0xa8>
 800825e:	2240      	movs	r2, #64	; 0x40
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008266:	6939      	ldr	r1, [r7, #16]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800826e:	461a      	mov	r2, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 fd9b 	bl	8009dac <USBD_CtlPrepareRx>
      break;
 8008276:	e076      	b.n	8008366 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	33b0      	adds	r3, #176	; 0xb0
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	7850      	ldrb	r0, [r2, #1]
 800828e:	2200      	movs	r2, #0
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	4798      	blx	r3
      break;
 8008294:	e067      	b.n	8008366 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	785b      	ldrb	r3, [r3, #1]
 800829a:	2b0b      	cmp	r3, #11
 800829c:	d851      	bhi.n	8008342 <USBD_CDC_Setup+0x18a>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <USBD_CDC_Setup+0xec>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082d5 	.word	0x080082d5
 80082a8:	08008351 	.word	0x08008351
 80082ac:	08008343 	.word	0x08008343
 80082b0:	08008343 	.word	0x08008343
 80082b4:	08008343 	.word	0x08008343
 80082b8:	08008343 	.word	0x08008343
 80082bc:	08008343 	.word	0x08008343
 80082c0:	08008343 	.word	0x08008343
 80082c4:	08008343 	.word	0x08008343
 80082c8:	08008343 	.word	0x08008343
 80082cc:	080082ff 	.word	0x080082ff
 80082d0:	08008329 	.word	0x08008329
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d107      	bne.n	80082f0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082e0:	f107 030a 	add.w	r3, r7, #10
 80082e4:	2202      	movs	r2, #2
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 fd33 	bl	8009d54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082ee:	e032      	b.n	8008356 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fcbd 	bl	8009c72 <USBD_CtlError>
            ret = USBD_FAIL;
 80082f8:	2303      	movs	r3, #3
 80082fa:	75fb      	strb	r3, [r7, #23]
          break;
 80082fc:	e02b      	b.n	8008356 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b03      	cmp	r3, #3
 8008308:	d107      	bne.n	800831a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800830a:	f107 030d 	add.w	r3, r7, #13
 800830e:	2201      	movs	r2, #1
 8008310:	4619      	mov	r1, r3
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f001 fd1e 	bl	8009d54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008318:	e01d      	b.n	8008356 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 fca8 	bl	8009c72 <USBD_CtlError>
            ret = USBD_FAIL;
 8008322:	2303      	movs	r3, #3
 8008324:	75fb      	strb	r3, [r7, #23]
          break;
 8008326:	e016      	b.n	8008356 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2b03      	cmp	r3, #3
 8008332:	d00f      	beq.n	8008354 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f001 fc9b 	bl	8009c72 <USBD_CtlError>
            ret = USBD_FAIL;
 800833c:	2303      	movs	r3, #3
 800833e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008340:	e008      	b.n	8008354 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 fc94 	bl	8009c72 <USBD_CtlError>
          ret = USBD_FAIL;
 800834a:	2303      	movs	r3, #3
 800834c:	75fb      	strb	r3, [r7, #23]
          break;
 800834e:	e002      	b.n	8008356 <USBD_CDC_Setup+0x19e>
          break;
 8008350:	bf00      	nop
 8008352:	e008      	b.n	8008366 <USBD_CDC_Setup+0x1ae>
          break;
 8008354:	bf00      	nop
      }
      break;
 8008356:	e006      	b.n	8008366 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f001 fc89 	bl	8009c72 <USBD_CtlError>
      ret = USBD_FAIL;
 8008360:	2303      	movs	r3, #3
 8008362:	75fb      	strb	r3, [r7, #23]
      break;
 8008364:	bf00      	nop
  }

  return (uint8_t)ret;
 8008366:	7dfb      	ldrb	r3, [r7, #23]
}
 8008368:	4618      	mov	r0, r3
 800836a:	3718      	adds	r7, #24
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	460b      	mov	r3, r1
 800837a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008382:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	32b0      	adds	r2, #176	; 0xb0
 800838e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d101      	bne.n	800839a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008396:	2303      	movs	r3, #3
 8008398:	e065      	b.n	8008466 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	32b0      	adds	r2, #176	; 0xb0
 80083a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	f003 020f 	and.w	r2, r3, #15
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	3318      	adds	r3, #24
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d02f      	beq.n	8008424 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	f003 020f 	and.w	r2, r3, #15
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	3318      	adds	r3, #24
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	78fb      	ldrb	r3, [r7, #3]
 80083dc:	f003 010f 	and.w	r1, r3, #15
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	460b      	mov	r3, r1
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	440b      	add	r3, r1
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4403      	add	r3, r0
 80083ec:	331c      	adds	r3, #28
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	fbb2 f1f3 	udiv	r1, r2, r3
 80083f4:	fb01 f303 	mul.w	r3, r1, r3
 80083f8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d112      	bne.n	8008424 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80083fe:	78fb      	ldrb	r3, [r7, #3]
 8008400:	f003 020f 	and.w	r2, r3, #15
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	3318      	adds	r3, #24
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008416:	78f9      	ldrb	r1, [r7, #3]
 8008418:	2300      	movs	r3, #0
 800841a:	2200      	movs	r2, #0
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f002 f990 	bl	800a742 <USBD_LL_Transmit>
 8008422:	e01f      	b.n	8008464 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2200      	movs	r2, #0
 8008428:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	33b0      	adds	r3, #176	; 0xb0
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	4413      	add	r3, r2
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d010      	beq.n	8008464 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	33b0      	adds	r3, #176	; 0xb0
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4413      	add	r3, r2
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008460:	78fa      	ldrb	r2, [r7, #3]
 8008462:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
 8008476:	460b      	mov	r3, r1
 8008478:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	32b0      	adds	r2, #176	; 0xb0
 8008484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008488:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	32b0      	adds	r2, #176	; 0xb0
 8008494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800849c:	2303      	movs	r3, #3
 800849e:	e01a      	b.n	80084d6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f002 f98e 	bl	800a7c6 <USBD_LL_GetRxDataSize>
 80084aa:	4602      	mov	r2, r0
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	33b0      	adds	r3, #176	; 0xb0
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	4413      	add	r3, r2
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80084d0:	4611      	mov	r1, r2
 80084d2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	32b0      	adds	r2, #176	; 0xb0
 80084f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e025      	b.n	800854c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	33b0      	adds	r3, #176	; 0xb0
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d01a      	beq.n	800854a <USBD_CDC_EP0_RxReady+0x6c>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800851a:	2bff      	cmp	r3, #255	; 0xff
 800851c:	d015      	beq.n	800854a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	33b0      	adds	r3, #176	; 0xb0
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	4413      	add	r3, r2
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008536:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800853e:	b292      	uxth	r2, r2
 8008540:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	22ff      	movs	r2, #255	; 0xff
 8008546:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800855c:	2182      	movs	r1, #130	; 0x82
 800855e:	4818      	ldr	r0, [pc, #96]	; (80085c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008560:	f000 fd4f 	bl	8009002 <USBD_GetEpDesc>
 8008564:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008566:	2101      	movs	r1, #1
 8008568:	4815      	ldr	r0, [pc, #84]	; (80085c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800856a:	f000 fd4a 	bl	8009002 <USBD_GetEpDesc>
 800856e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008570:	2181      	movs	r1, #129	; 0x81
 8008572:	4813      	ldr	r0, [pc, #76]	; (80085c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008574:	f000 fd45 	bl	8009002 <USBD_GetEpDesc>
 8008578:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	2210      	movs	r2, #16
 8008584:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d006      	beq.n	800859a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	2200      	movs	r2, #0
 8008590:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008594:	711a      	strb	r2, [r3, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d006      	beq.n	80085ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085a8:	711a      	strb	r2, [r3, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2243      	movs	r2, #67	; 0x43
 80085b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085b4:	4b02      	ldr	r3, [pc, #8]	; (80085c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000074 	.word	0x20000074

080085c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085cc:	2182      	movs	r1, #130	; 0x82
 80085ce:	4818      	ldr	r0, [pc, #96]	; (8008630 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085d0:	f000 fd17 	bl	8009002 <USBD_GetEpDesc>
 80085d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085d6:	2101      	movs	r1, #1
 80085d8:	4815      	ldr	r0, [pc, #84]	; (8008630 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085da:	f000 fd12 	bl	8009002 <USBD_GetEpDesc>
 80085de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085e0:	2181      	movs	r1, #129	; 0x81
 80085e2:	4813      	ldr	r0, [pc, #76]	; (8008630 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085e4:	f000 fd0d 	bl	8009002 <USBD_GetEpDesc>
 80085e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	2210      	movs	r2, #16
 80085f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d006      	beq.n	800860a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	2200      	movs	r2, #0
 8008600:	711a      	strb	r2, [r3, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f042 0202 	orr.w	r2, r2, #2
 8008608:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d006      	beq.n	800861e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	711a      	strb	r2, [r3, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	f042 0202 	orr.w	r2, r2, #2
 800861c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2243      	movs	r2, #67	; 0x43
 8008622:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000074 	.word	0x20000074

08008634 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800863c:	2182      	movs	r1, #130	; 0x82
 800863e:	4818      	ldr	r0, [pc, #96]	; (80086a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008640:	f000 fcdf 	bl	8009002 <USBD_GetEpDesc>
 8008644:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008646:	2101      	movs	r1, #1
 8008648:	4815      	ldr	r0, [pc, #84]	; (80086a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800864a:	f000 fcda 	bl	8009002 <USBD_GetEpDesc>
 800864e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008650:	2181      	movs	r1, #129	; 0x81
 8008652:	4813      	ldr	r0, [pc, #76]	; (80086a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008654:	f000 fcd5 	bl	8009002 <USBD_GetEpDesc>
 8008658:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	2210      	movs	r2, #16
 8008664:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d006      	beq.n	800867a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2200      	movs	r2, #0
 8008670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008674:	711a      	strb	r2, [r3, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d006      	beq.n	800868e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008688:	711a      	strb	r2, [r3, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2243      	movs	r2, #67	; 0x43
 8008692:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008694:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20000074 	.word	0x20000074

080086a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	220a      	movs	r2, #10
 80086b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80086b2:	4b03      	ldr	r3, [pc, #12]	; (80086c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20000030 	.word	0x20000030

080086c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e009      	b.n	80086ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	33b0      	adds	r3, #176	; 0xb0
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	32b0      	adds	r2, #176	; 0xb0
 800870e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008712:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800871a:	2303      	movs	r3, #3
 800871c:	e008      	b.n	8008730 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	32b0      	adds	r2, #176	; 0xb0
 8008750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008754:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	e004      	b.n	800876a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
	...

08008778 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	32b0      	adds	r2, #176	; 0xb0
 800878a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d101      	bne.n	800879e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800879a:	2303      	movs	r3, #3
 800879c:	e025      	b.n	80087ea <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d11f      	bne.n	80087e8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80087b0:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <USBD_CDC_TransmitPacket+0x7c>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f003 020f 	and.w	r2, r3, #15
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4403      	add	r3, r0
 80087ca:	3318      	adds	r3, #24
 80087cc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80087ce:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <USBD_CDC_TransmitPacket+0x7c>)
 80087d0:	7819      	ldrb	r1, [r3, #0]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 ffaf 	bl	800a742 <USBD_LL_Transmit>

    ret = USBD_OK;
 80087e4:	2300      	movs	r3, #0
 80087e6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	200000b7 	.word	0x200000b7

080087f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	32b0      	adds	r2, #176	; 0xb0
 800880a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	32b0      	adds	r2, #176	; 0xb0
 800881a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008822:	2303      	movs	r3, #3
 8008824:	e018      	b.n	8008858 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	7c1b      	ldrb	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800882e:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <USBD_CDC_ReceivePacket+0x68>)
 8008830:	7819      	ldrb	r1, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 ffa1 	bl	800a784 <USBD_LL_PrepareReceive>
 8008842:	e008      	b.n	8008856 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008844:	4b06      	ldr	r3, [pc, #24]	; (8008860 <USBD_CDC_ReceivePacket+0x68>)
 8008846:	7819      	ldrb	r1, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800884e:	2340      	movs	r3, #64	; 0x40
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f001 ff97 	bl	800a784 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	200000b8 	.word	0x200000b8

08008864 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	4613      	mov	r3, r2
 8008870:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d101      	bne.n	800887c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008878:	2303      	movs	r3, #3
 800887a:	e01f      	b.n	80088bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d003      	beq.n	80088a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	79fa      	ldrb	r2, [r7, #7]
 80088ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f001 fe11 	bl	800a4d8 <USBD_LL_Init>
 80088b6:	4603      	mov	r3, r0
 80088b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d101      	bne.n	80088dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088d8:	2303      	movs	r3, #3
 80088da:	e025      	b.n	8008928 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	32ae      	adds	r2, #174	; 0xae
 80088ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00f      	beq.n	8008918 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	32ae      	adds	r2, #174	; 0xae
 8008902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008908:	f107 020e 	add.w	r2, r7, #14
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	4602      	mov	r2, r0
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f001 fe19 	bl	800a570 <USBD_LL_Start>
 800893e:	4603      	mov	r3, r0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008950:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008974:	2b00      	cmp	r3, #0
 8008976:	d009      	beq.n	800898c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	78fa      	ldrb	r2, [r7, #3]
 8008982:	4611      	mov	r1, r2
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	4798      	blx	r3
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800898c:	7bfb      	ldrb	r3, [r7, #15]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3710      	adds	r7, #16
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	460b      	mov	r3, r1
 80089a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	78fa      	ldrb	r2, [r7, #3]
 80089b0:	4611      	mov	r1, r2
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089bc:	2303      	movs	r3, #3
 80089be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	4618      	mov	r0, r3
 80089de:	f001 f90e 	bl	8009bfe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80089f0:	461a      	mov	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d01a      	beq.n	8008a3c <USBD_LL_SetupStage+0x72>
 8008a06:	2b02      	cmp	r3, #2
 8008a08:	d822      	bhi.n	8008a50 <USBD_LL_SetupStage+0x86>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <USBD_LL_SetupStage+0x4a>
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d00a      	beq.n	8008a28 <USBD_LL_SetupStage+0x5e>
 8008a12:	e01d      	b.n	8008a50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fb65 	bl	80090ec <USBD_StdDevReq>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73fb      	strb	r3, [r7, #15]
      break;
 8008a26:	e020      	b.n	8008a6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fbcd 	bl	80091d0 <USBD_StdItfReq>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
      break;
 8008a3a:	e016      	b.n	8008a6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fc2f 	bl	80092a8 <USBD_StdEPReq>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a4e:	e00c      	b.n	8008a6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fde6 	bl	800a630 <USBD_LL_StallEP>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
      break;
 8008a68:	bf00      	nop
  }

  return ret;
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a86:	7afb      	ldrb	r3, [r7, #11]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d16e      	bne.n	8008b6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	f040 8098 	bne.w	8008bd0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d913      	bls.n	8008ad4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	1ad2      	subs	r2, r2, r3
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	bf28      	it	cs
 8008ac6:	4613      	movcs	r3, r2
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f001 f98a 	bl	8009de6 <USBD_CtlContinueRx>
 8008ad2:	e07d      	b.n	8008bd0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ada:	f003 031f 	and.w	r3, r3, #31
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d014      	beq.n	8008b0c <USBD_LL_DataOutStage+0x98>
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d81d      	bhi.n	8008b22 <USBD_LL_DataOutStage+0xae>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <USBD_LL_DataOutStage+0x7c>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d003      	beq.n	8008af6 <USBD_LL_DataOutStage+0x82>
 8008aee:	e018      	b.n	8008b22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	75bb      	strb	r3, [r7, #22]
            break;
 8008af4:	e018      	b.n	8008b28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	4619      	mov	r1, r3
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 fa64 	bl	8008fce <USBD_CoreFindIF>
 8008b06:	4603      	mov	r3, r0
 8008b08:	75bb      	strb	r3, [r7, #22]
            break;
 8008b0a:	e00d      	b.n	8008b28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	4619      	mov	r1, r3
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f000 fa66 	bl	8008fe8 <USBD_CoreFindEP>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	75bb      	strb	r3, [r7, #22]
            break;
 8008b20:	e002      	b.n	8008b28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75bb      	strb	r3, [r7, #22]
            break;
 8008b26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b28:	7dbb      	ldrb	r3, [r7, #22]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d119      	bne.n	8008b62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b03      	cmp	r3, #3
 8008b38:	d113      	bne.n	8008b62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b3a:	7dba      	ldrb	r2, [r7, #22]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	32ae      	adds	r2, #174	; 0xae
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00b      	beq.n	8008b62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b4a:	7dba      	ldrb	r2, [r7, #22]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b52:	7dba      	ldrb	r2, [r7, #22]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	32ae      	adds	r2, #174	; 0xae
 8008b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f001 f950 	bl	8009e08 <USBD_CtlSendStatus>
 8008b68:	e032      	b.n	8008bd0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b6a:	7afb      	ldrb	r3, [r7, #11]
 8008b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	4619      	mov	r1, r3
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fa37 	bl	8008fe8 <USBD_CoreFindEP>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b7e:	7dbb      	ldrb	r3, [r7, #22]
 8008b80:	2bff      	cmp	r3, #255	; 0xff
 8008b82:	d025      	beq.n	8008bd0 <USBD_LL_DataOutStage+0x15c>
 8008b84:	7dbb      	ldrb	r3, [r7, #22]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d122      	bne.n	8008bd0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b03      	cmp	r3, #3
 8008b94:	d117      	bne.n	8008bc6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b96:	7dba      	ldrb	r2, [r7, #22]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	32ae      	adds	r2, #174	; 0xae
 8008b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00f      	beq.n	8008bc6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008ba6:	7dba      	ldrb	r2, [r7, #22]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008bae:	7dba      	ldrb	r2, [r7, #22]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	32ae      	adds	r2, #174	; 0xae
 8008bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	7afa      	ldrb	r2, [r7, #11]
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	4798      	blx	r3
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	e000      	b.n	8008bd2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b086      	sub	sp, #24
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	460b      	mov	r3, r1
 8008be4:	607a      	str	r2, [r7, #4]
 8008be6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008be8:	7afb      	ldrb	r3, [r7, #11]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d16f      	bne.n	8008cce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	3314      	adds	r3, #20
 8008bf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d15a      	bne.n	8008cb4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d914      	bls.n	8008c34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f001 f8b2 	bl	8009d8a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c26:	2300      	movs	r3, #0
 8008c28:	2200      	movs	r2, #0
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	68f8      	ldr	r0, [r7, #12]
 8008c2e:	f001 fda9 	bl	800a784 <USBD_LL_PrepareReceive>
 8008c32:	e03f      	b.n	8008cb4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	68da      	ldr	r2, [r3, #12]
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d11c      	bne.n	8008c7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d316      	bcc.n	8008c7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d20f      	bcs.n	8008c7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f001 f893 	bl	8009d8a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	2200      	movs	r2, #0
 8008c70:	2100      	movs	r1, #0
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f001 fd86 	bl	800a784 <USBD_LL_PrepareReceive>
 8008c78:	e01c      	b.n	8008cb4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d10f      	bne.n	8008ca6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d009      	beq.n	8008ca6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ca6:	2180      	movs	r1, #128	; 0x80
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f001 fcc1 	bl	800a630 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f001 f8bd 	bl	8009e2e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d03a      	beq.n	8008d34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7ff fe42 	bl	8008948 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ccc:	e032      	b.n	8008d34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008cce:	7afb      	ldrb	r3, [r7, #11]
 8008cd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f000 f985 	bl	8008fe8 <USBD_CoreFindEP>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	2bff      	cmp	r3, #255	; 0xff
 8008ce6:	d025      	beq.n	8008d34 <USBD_LL_DataInStage+0x15a>
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d122      	bne.n	8008d34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b03      	cmp	r3, #3
 8008cf8:	d11c      	bne.n	8008d34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008cfa:	7dfa      	ldrb	r2, [r7, #23]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	32ae      	adds	r2, #174	; 0xae
 8008d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d014      	beq.n	8008d34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d0a:	7dfa      	ldrb	r2, [r7, #23]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d12:	7dfa      	ldrb	r2, [r7, #23]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	32ae      	adds	r2, #174	; 0xae
 8008d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	7afa      	ldrb	r2, [r7, #11]
 8008d20:	4611      	mov	r1, r2
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	4798      	blx	r3
 8008d26:	4603      	mov	r3, r0
 8008d28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d2a:	7dbb      	ldrb	r3, [r7, #22]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d30:	7dbb      	ldrb	r3, [r7, #22]
 8008d32:	e000      	b.n	8008d36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d46:	2300      	movs	r3, #0
 8008d48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d014      	beq.n	8008da4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00e      	beq.n	8008da4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6852      	ldr	r2, [r2, #4]
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	4611      	mov	r1, r2
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	4798      	blx	r3
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008da4:	2340      	movs	r3, #64	; 0x40
 8008da6:	2200      	movs	r2, #0
 8008da8:	2100      	movs	r1, #0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 fbfb 	bl	800a5a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2240      	movs	r2, #64	; 0x40
 8008dbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dc0:	2340      	movs	r3, #64	; 0x40
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	2180      	movs	r1, #128	; 0x80
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f001 fbed 	bl	800a5a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2240      	movs	r2, #64	; 0x40
 8008dd6:	621a      	str	r2, [r3, #32]

  return ret;
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	460b      	mov	r3, r1
 8008dec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	78fa      	ldrb	r2, [r7, #3]
 8008df2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d006      	beq.n	8008e24 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2204      	movs	r2, #4
 8008e28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b04      	cmp	r3, #4
 8008e4c:	d106      	bne.n	8008e5c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008e54:	b2da      	uxtb	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr

08008e6a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d110      	bne.n	8008ea0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00b      	beq.n	8008ea0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d005      	beq.n	8008ea0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b082      	sub	sp, #8
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	6078      	str	r0, [r7, #4]
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	32ae      	adds	r2, #174	; 0xae
 8008ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e01c      	b.n	8008f06 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d115      	bne.n	8008f04 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	32ae      	adds	r2, #174	; 0xae
 8008ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	32ae      	adds	r2, #174	; 0xae
 8008ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	4611      	mov	r1, r2
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b082      	sub	sp, #8
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	32ae      	adds	r2, #174	; 0xae
 8008f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e01c      	b.n	8008f6a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d115      	bne.n	8008f68 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	32ae      	adds	r2, #174	; 0xae
 8008f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00b      	beq.n	8008f68 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	32ae      	adds	r2, #174	; 0xae
 8008f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	78fa      	ldrb	r2, [r7, #3]
 8008f62:	4611      	mov	r1, r2
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b083      	sub	sp, #12
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d00e      	beq.n	8008fc4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6852      	ldr	r2, [r2, #4]
 8008fb2:	b2d2      	uxtb	r2, r2
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	4798      	blx	r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b083      	sub	sp, #12
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fda:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ff4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b086      	sub	sp, #24
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009016:	2300      	movs	r3, #0
 8009018:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	885b      	ldrh	r3, [r3, #2]
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	b29b      	uxth	r3, r3
 8009026:	429a      	cmp	r2, r3
 8009028:	d920      	bls.n	800906c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	b29b      	uxth	r3, r3
 8009030:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009032:	e013      	b.n	800905c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009034:	f107 030a 	add.w	r3, r7, #10
 8009038:	4619      	mov	r1, r3
 800903a:	6978      	ldr	r0, [r7, #20]
 800903c:	f000 f81b 	bl	8009076 <USBD_GetNextDesc>
 8009040:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	785b      	ldrb	r3, [r3, #1]
 8009046:	2b05      	cmp	r3, #5
 8009048:	d108      	bne.n	800905c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	789b      	ldrb	r3, [r3, #2]
 8009052:	78fa      	ldrb	r2, [r7, #3]
 8009054:	429a      	cmp	r2, r3
 8009056:	d008      	beq.n	800906a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009058:	2300      	movs	r3, #0
 800905a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	885b      	ldrh	r3, [r3, #2]
 8009060:	b29a      	uxth	r2, r3
 8009062:	897b      	ldrh	r3, [r7, #10]
 8009064:	429a      	cmp	r2, r3
 8009066:	d8e5      	bhi.n	8009034 <USBD_GetEpDesc+0x32>
 8009068:	e000      	b.n	800906c <USBD_GetEpDesc+0x6a>
          break;
 800906a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800906c:	693b      	ldr	r3, [r7, #16]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009076:	b480      	push	{r7}
 8009078:	b085      	sub	sp, #20
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	881a      	ldrh	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	b29b      	uxth	r3, r3
 800908e:	4413      	add	r3, r2
 8009090:	b29a      	uxth	r2, r3
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4413      	add	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090a2:	68fb      	ldr	r3, [r7, #12]
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b087      	sub	sp, #28
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	3301      	adds	r3, #1
 80090c6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090ce:	8a3b      	ldrh	r3, [r7, #16]
 80090d0:	021b      	lsls	r3, r3, #8
 80090d2:	b21a      	sxth	r2, r3
 80090d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090d8:	4313      	orrs	r3, r2
 80090da:	b21b      	sxth	r3, r3
 80090dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090de:	89fb      	ldrh	r3, [r7, #14]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	371c      	adds	r7, #28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009102:	2b40      	cmp	r3, #64	; 0x40
 8009104:	d005      	beq.n	8009112 <USBD_StdDevReq+0x26>
 8009106:	2b40      	cmp	r3, #64	; 0x40
 8009108:	d857      	bhi.n	80091ba <USBD_StdDevReq+0xce>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00f      	beq.n	800912e <USBD_StdDevReq+0x42>
 800910e:	2b20      	cmp	r3, #32
 8009110:	d153      	bne.n	80091ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	32ae      	adds	r2, #174	; 0xae
 800911c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	4798      	blx	r3
 8009128:	4603      	mov	r3, r0
 800912a:	73fb      	strb	r3, [r7, #15]
      break;
 800912c:	e04a      	b.n	80091c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	2b09      	cmp	r3, #9
 8009134:	d83b      	bhi.n	80091ae <USBD_StdDevReq+0xc2>
 8009136:	a201      	add	r2, pc, #4	; (adr r2, 800913c <USBD_StdDevReq+0x50>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	08009191 	.word	0x08009191
 8009140:	080091a5 	.word	0x080091a5
 8009144:	080091af 	.word	0x080091af
 8009148:	0800919b 	.word	0x0800919b
 800914c:	080091af 	.word	0x080091af
 8009150:	0800916f 	.word	0x0800916f
 8009154:	08009165 	.word	0x08009165
 8009158:	080091af 	.word	0x080091af
 800915c:	08009187 	.word	0x08009187
 8009160:	08009179 	.word	0x08009179
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fa3c 	bl	80095e4 <USBD_GetDescriptor>
          break;
 800916c:	e024      	b.n	80091b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800916e:	6839      	ldr	r1, [r7, #0]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fba1 	bl	80098b8 <USBD_SetAddress>
          break;
 8009176:	e01f      	b.n	80091b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fbe0 	bl	8009940 <USBD_SetConfig>
 8009180:	4603      	mov	r3, r0
 8009182:	73fb      	strb	r3, [r7, #15]
          break;
 8009184:	e018      	b.n	80091b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fc83 	bl	8009a94 <USBD_GetConfig>
          break;
 800918e:	e013      	b.n	80091b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fcb4 	bl	8009b00 <USBD_GetStatus>
          break;
 8009198:	e00e      	b.n	80091b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fce3 	bl	8009b68 <USBD_SetFeature>
          break;
 80091a2:	e009      	b.n	80091b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fd07 	bl	8009bba <USBD_ClrFeature>
          break;
 80091ac:	e004      	b.n	80091b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fd5e 	bl	8009c72 <USBD_CtlError>
          break;
 80091b6:	bf00      	nop
      }
      break;
 80091b8:	e004      	b.n	80091c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fd58 	bl	8009c72 <USBD_CtlError>
      break;
 80091c2:	bf00      	nop
  }

  return ret;
 80091c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop

080091d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091e6:	2b40      	cmp	r3, #64	; 0x40
 80091e8:	d005      	beq.n	80091f6 <USBD_StdItfReq+0x26>
 80091ea:	2b40      	cmp	r3, #64	; 0x40
 80091ec:	d852      	bhi.n	8009294 <USBD_StdItfReq+0xc4>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <USBD_StdItfReq+0x26>
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	d14e      	bne.n	8009294 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	3b01      	subs	r3, #1
 8009200:	2b02      	cmp	r3, #2
 8009202:	d840      	bhi.n	8009286 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	889b      	ldrh	r3, [r3, #4]
 8009208:	b2db      	uxtb	r3, r3
 800920a:	2b01      	cmp	r3, #1
 800920c:	d836      	bhi.n	800927c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	889b      	ldrh	r3, [r3, #4]
 8009212:	b2db      	uxtb	r3, r3
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff fed9 	bl	8008fce <USBD_CoreFindIF>
 800921c:	4603      	mov	r3, r0
 800921e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009220:	7bbb      	ldrb	r3, [r7, #14]
 8009222:	2bff      	cmp	r3, #255	; 0xff
 8009224:	d01d      	beq.n	8009262 <USBD_StdItfReq+0x92>
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d11a      	bne.n	8009262 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800922c:	7bba      	ldrb	r2, [r7, #14]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	32ae      	adds	r2, #174	; 0xae
 8009232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00f      	beq.n	800925c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800923c:	7bba      	ldrb	r2, [r7, #14]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009244:	7bba      	ldrb	r2, [r7, #14]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	32ae      	adds	r2, #174	; 0xae
 800924a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	4798      	blx	r3
 8009256:	4603      	mov	r3, r0
 8009258:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800925a:	e004      	b.n	8009266 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800925c:	2303      	movs	r3, #3
 800925e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009260:	e001      	b.n	8009266 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009262:	2303      	movs	r3, #3
 8009264:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	88db      	ldrh	r3, [r3, #6]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d110      	bne.n	8009290 <USBD_StdItfReq+0xc0>
 800926e:	7bfb      	ldrb	r3, [r7, #15]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10d      	bne.n	8009290 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fdc7 	bl	8009e08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800927a:	e009      	b.n	8009290 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fcf7 	bl	8009c72 <USBD_CtlError>
          break;
 8009284:	e004      	b.n	8009290 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009286:	6839      	ldr	r1, [r7, #0]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 fcf2 	bl	8009c72 <USBD_CtlError>
          break;
 800928e:	e000      	b.n	8009292 <USBD_StdItfReq+0xc2>
          break;
 8009290:	bf00      	nop
      }
      break;
 8009292:	e004      	b.n	800929e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fceb 	bl	8009c72 <USBD_CtlError>
      break;
 800929c:	bf00      	nop
  }

  return ret;
 800929e:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3710      	adds	r7, #16
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	889b      	ldrh	r3, [r3, #4]
 80092ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092c4:	2b40      	cmp	r3, #64	; 0x40
 80092c6:	d007      	beq.n	80092d8 <USBD_StdEPReq+0x30>
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	f200 817f 	bhi.w	80095cc <USBD_StdEPReq+0x324>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d02a      	beq.n	8009328 <USBD_StdEPReq+0x80>
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	f040 817a 	bne.w	80095cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80092d8:	7bbb      	ldrb	r3, [r7, #14]
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff fe83 	bl	8008fe8 <USBD_CoreFindEP>
 80092e2:	4603      	mov	r3, r0
 80092e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092e6:	7b7b      	ldrb	r3, [r7, #13]
 80092e8:	2bff      	cmp	r3, #255	; 0xff
 80092ea:	f000 8174 	beq.w	80095d6 <USBD_StdEPReq+0x32e>
 80092ee:	7b7b      	ldrb	r3, [r7, #13]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f040 8170 	bne.w	80095d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80092f6:	7b7a      	ldrb	r2, [r7, #13]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80092fe:	7b7a      	ldrb	r2, [r7, #13]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	32ae      	adds	r2, #174	; 0xae
 8009304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 8163 	beq.w	80095d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009310:	7b7a      	ldrb	r2, [r7, #13]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	32ae      	adds	r2, #174	; 0xae
 8009316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
 8009322:	4603      	mov	r3, r0
 8009324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009326:	e156      	b.n	80095d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	785b      	ldrb	r3, [r3, #1]
 800932c:	2b03      	cmp	r3, #3
 800932e:	d008      	beq.n	8009342 <USBD_StdEPReq+0x9a>
 8009330:	2b03      	cmp	r3, #3
 8009332:	f300 8145 	bgt.w	80095c0 <USBD_StdEPReq+0x318>
 8009336:	2b00      	cmp	r3, #0
 8009338:	f000 809b 	beq.w	8009472 <USBD_StdEPReq+0x1ca>
 800933c:	2b01      	cmp	r3, #1
 800933e:	d03c      	beq.n	80093ba <USBD_StdEPReq+0x112>
 8009340:	e13e      	b.n	80095c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b02      	cmp	r3, #2
 800934c:	d002      	beq.n	8009354 <USBD_StdEPReq+0xac>
 800934e:	2b03      	cmp	r3, #3
 8009350:	d016      	beq.n	8009380 <USBD_StdEPReq+0xd8>
 8009352:	e02c      	b.n	80093ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009354:	7bbb      	ldrb	r3, [r7, #14]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00d      	beq.n	8009376 <USBD_StdEPReq+0xce>
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b80      	cmp	r3, #128	; 0x80
 800935e:	d00a      	beq.n	8009376 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f001 f963 	bl	800a630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800936a:	2180      	movs	r1, #128	; 0x80
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 f95f 	bl	800a630 <USBD_LL_StallEP>
 8009372:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009374:	e020      	b.n	80093b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fc7a 	bl	8009c72 <USBD_CtlError>
              break;
 800937e:	e01b      	b.n	80093b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	885b      	ldrh	r3, [r3, #2]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10e      	bne.n	80093a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00b      	beq.n	80093a6 <USBD_StdEPReq+0xfe>
 800938e:	7bbb      	ldrb	r3, [r7, #14]
 8009390:	2b80      	cmp	r3, #128	; 0x80
 8009392:	d008      	beq.n	80093a6 <USBD_StdEPReq+0xfe>
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	88db      	ldrh	r3, [r3, #6]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800939c:	7bbb      	ldrb	r3, [r7, #14]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 f945 	bl	800a630 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fd2e 	bl	8009e08 <USBD_CtlSendStatus>

              break;
 80093ac:	e004      	b.n	80093b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fc5e 	bl	8009c72 <USBD_CtlError>
              break;
 80093b6:	bf00      	nop
          }
          break;
 80093b8:	e107      	b.n	80095ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d002      	beq.n	80093cc <USBD_StdEPReq+0x124>
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d016      	beq.n	80093f8 <USBD_StdEPReq+0x150>
 80093ca:	e04b      	b.n	8009464 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00d      	beq.n	80093ee <USBD_StdEPReq+0x146>
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
 80093d4:	2b80      	cmp	r3, #128	; 0x80
 80093d6:	d00a      	beq.n	80093ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f927 	bl	800a630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093e2:	2180      	movs	r1, #128	; 0x80
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 f923 	bl	800a630 <USBD_LL_StallEP>
 80093ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093ec:	e040      	b.n	8009470 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fc3e 	bl	8009c72 <USBD_CtlError>
              break;
 80093f6:	e03b      	b.n	8009470 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	885b      	ldrh	r3, [r3, #2]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d136      	bne.n	800946e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009400:	7bbb      	ldrb	r3, [r7, #14]
 8009402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009406:	2b00      	cmp	r3, #0
 8009408:	d004      	beq.n	8009414 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	4619      	mov	r1, r3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f001 f92d 	bl	800a66e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fcf7 	bl	8009e08 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800941a:	7bbb      	ldrb	r3, [r7, #14]
 800941c:	4619      	mov	r1, r3
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fde2 	bl	8008fe8 <USBD_CoreFindEP>
 8009424:	4603      	mov	r3, r0
 8009426:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009428:	7b7b      	ldrb	r3, [r7, #13]
 800942a:	2bff      	cmp	r3, #255	; 0xff
 800942c:	d01f      	beq.n	800946e <USBD_StdEPReq+0x1c6>
 800942e:	7b7b      	ldrb	r3, [r7, #13]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d11c      	bne.n	800946e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009434:	7b7a      	ldrb	r2, [r7, #13]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800943c:	7b7a      	ldrb	r2, [r7, #13]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	32ae      	adds	r2, #174	; 0xae
 8009442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d010      	beq.n	800946e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800944c:	7b7a      	ldrb	r2, [r7, #13]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	32ae      	adds	r2, #174	; 0xae
 8009452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	4798      	blx	r3
 800945e:	4603      	mov	r3, r0
 8009460:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009462:	e004      	b.n	800946e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fc03 	bl	8009c72 <USBD_CtlError>
              break;
 800946c:	e000      	b.n	8009470 <USBD_StdEPReq+0x1c8>
              break;
 800946e:	bf00      	nop
          }
          break;
 8009470:	e0ab      	b.n	80095ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b02      	cmp	r3, #2
 800947c:	d002      	beq.n	8009484 <USBD_StdEPReq+0x1dc>
 800947e:	2b03      	cmp	r3, #3
 8009480:	d032      	beq.n	80094e8 <USBD_StdEPReq+0x240>
 8009482:	e097      	b.n	80095b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009484:	7bbb      	ldrb	r3, [r7, #14]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d007      	beq.n	800949a <USBD_StdEPReq+0x1f2>
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	2b80      	cmp	r3, #128	; 0x80
 800948e:	d004      	beq.n	800949a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009490:	6839      	ldr	r1, [r7, #0]
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fbed 	bl	8009c72 <USBD_CtlError>
                break;
 8009498:	e091      	b.n	80095be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800949a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	da0b      	bge.n	80094ba <USBD_StdEPReq+0x212>
 80094a2:	7bbb      	ldrb	r3, [r7, #14]
 80094a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094a8:	4613      	mov	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	4413      	add	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	3310      	adds	r3, #16
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	4413      	add	r3, r2
 80094b6:	3304      	adds	r3, #4
 80094b8:	e00b      	b.n	80094d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094ba:	7bbb      	ldrb	r3, [r7, #14]
 80094bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094c0:	4613      	mov	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	4413      	add	r3, r2
 80094d0:	3304      	adds	r3, #4
 80094d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2202      	movs	r2, #2
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 fc37 	bl	8009d54 <USBD_CtlSendData>
              break;
 80094e6:	e06a      	b.n	80095be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	da11      	bge.n	8009514 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	f003 020f 	and.w	r2, r3, #15
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	3324      	adds	r3, #36	; 0x24
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d117      	bne.n	800953a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800950a:	6839      	ldr	r1, [r7, #0]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fbb0 	bl	8009c72 <USBD_CtlError>
                  break;
 8009512:	e054      	b.n	80095be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009514:	7bbb      	ldrb	r3, [r7, #14]
 8009516:	f003 020f 	and.w	r2, r3, #15
 800951a:	6879      	ldr	r1, [r7, #4]
 800951c:	4613      	mov	r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	440b      	add	r3, r1
 8009526:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009530:	6839      	ldr	r1, [r7, #0]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fb9d 	bl	8009c72 <USBD_CtlError>
                  break;
 8009538:	e041      	b.n	80095be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800953a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800953e:	2b00      	cmp	r3, #0
 8009540:	da0b      	bge.n	800955a <USBD_StdEPReq+0x2b2>
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009548:	4613      	mov	r3, r2
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	3310      	adds	r3, #16
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	4413      	add	r3, r2
 8009556:	3304      	adds	r3, #4
 8009558:	e00b      	b.n	8009572 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009560:	4613      	mov	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4413      	add	r3, r2
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	4413      	add	r3, r2
 8009570:	3304      	adds	r3, #4
 8009572:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <USBD_StdEPReq+0x2d8>
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b80      	cmp	r3, #128	; 0x80
 800957e:	d103      	bne.n	8009588 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	e00e      	b.n	80095a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 f88d 	bl	800a6ac <USBD_LL_IsStallEP>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d003      	beq.n	80095a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	2201      	movs	r2, #1
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	e002      	b.n	80095a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	2202      	movs	r2, #2
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fbd1 	bl	8009d54 <USBD_CtlSendData>
              break;
 80095b2:	e004      	b.n	80095be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fb5b 	bl	8009c72 <USBD_CtlError>
              break;
 80095bc:	bf00      	nop
          }
          break;
 80095be:	e004      	b.n	80095ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fb55 	bl	8009c72 <USBD_CtlError>
          break;
 80095c8:	bf00      	nop
      }
      break;
 80095ca:	e005      	b.n	80095d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fb4f 	bl	8009c72 <USBD_CtlError>
      break;
 80095d4:	e000      	b.n	80095d8 <USBD_StdEPReq+0x330>
      break;
 80095d6:	bf00      	nop
  }

  return ret;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095ee:	2300      	movs	r3, #0
 80095f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	885b      	ldrh	r3, [r3, #2]
 80095fe:	0a1b      	lsrs	r3, r3, #8
 8009600:	b29b      	uxth	r3, r3
 8009602:	3b01      	subs	r3, #1
 8009604:	2b06      	cmp	r3, #6
 8009606:	f200 8128 	bhi.w	800985a <USBD_GetDescriptor+0x276>
 800960a:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <USBD_GetDescriptor+0x2c>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	0800962d 	.word	0x0800962d
 8009614:	08009645 	.word	0x08009645
 8009618:	08009685 	.word	0x08009685
 800961c:	0800985b 	.word	0x0800985b
 8009620:	0800985b 	.word	0x0800985b
 8009624:	080097fb 	.word	0x080097fb
 8009628:	08009827 	.word	0x08009827
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	7c12      	ldrb	r2, [r2, #16]
 8009638:	f107 0108 	add.w	r1, r7, #8
 800963c:	4610      	mov	r0, r2
 800963e:	4798      	blx	r3
 8009640:	60f8      	str	r0, [r7, #12]
      break;
 8009642:	e112      	b.n	800986a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	7c1b      	ldrb	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10d      	bne.n	8009668 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	f107 0208 	add.w	r2, r7, #8
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
 800965c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3301      	adds	r3, #1
 8009662:	2202      	movs	r2, #2
 8009664:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009666:	e100      	b.n	800986a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	f107 0208 	add.w	r2, r7, #8
 8009674:	4610      	mov	r0, r2
 8009676:	4798      	blx	r3
 8009678:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3301      	adds	r3, #1
 800967e:	2202      	movs	r2, #2
 8009680:	701a      	strb	r2, [r3, #0]
      break;
 8009682:	e0f2      	b.n	800986a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	885b      	ldrh	r3, [r3, #2]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b05      	cmp	r3, #5
 800968c:	f200 80ac 	bhi.w	80097e8 <USBD_GetDescriptor+0x204>
 8009690:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <USBD_GetDescriptor+0xb4>)
 8009692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009696:	bf00      	nop
 8009698:	080096b1 	.word	0x080096b1
 800969c:	080096e5 	.word	0x080096e5
 80096a0:	08009719 	.word	0x08009719
 80096a4:	0800974d 	.word	0x0800974d
 80096a8:	08009781 	.word	0x08009781
 80096ac:	080097b5 	.word	0x080097b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	7c12      	ldrb	r2, [r2, #16]
 80096c8:	f107 0108 	add.w	r1, r7, #8
 80096cc:	4610      	mov	r0, r2
 80096ce:	4798      	blx	r3
 80096d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096d2:	e091      	b.n	80097f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096d4:	6839      	ldr	r1, [r7, #0]
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 facb 	bl	8009c72 <USBD_CtlError>
            err++;
 80096dc:	7afb      	ldrb	r3, [r7, #11]
 80096de:	3301      	adds	r3, #1
 80096e0:	72fb      	strb	r3, [r7, #11]
          break;
 80096e2:	e089      	b.n	80097f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00b      	beq.n	8009708 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	7c12      	ldrb	r2, [r2, #16]
 80096fc:	f107 0108 	add.w	r1, r7, #8
 8009700:	4610      	mov	r0, r2
 8009702:	4798      	blx	r3
 8009704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009706:	e077      	b.n	80097f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fab1 	bl	8009c72 <USBD_CtlError>
            err++;
 8009710:	7afb      	ldrb	r3, [r7, #11]
 8009712:	3301      	adds	r3, #1
 8009714:	72fb      	strb	r3, [r7, #11]
          break;
 8009716:	e06f      	b.n	80097f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00b      	beq.n	800973c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	7c12      	ldrb	r2, [r2, #16]
 8009730:	f107 0108 	add.w	r1, r7, #8
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
 8009738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800973a:	e05d      	b.n	80097f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fa97 	bl	8009c72 <USBD_CtlError>
            err++;
 8009744:	7afb      	ldrb	r3, [r7, #11]
 8009746:	3301      	adds	r3, #1
 8009748:	72fb      	strb	r3, [r7, #11]
          break;
 800974a:	e055      	b.n	80097f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	7c12      	ldrb	r2, [r2, #16]
 8009764:	f107 0108 	add.w	r1, r7, #8
 8009768:	4610      	mov	r0, r2
 800976a:	4798      	blx	r3
 800976c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800976e:	e043      	b.n	80097f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fa7d 	bl	8009c72 <USBD_CtlError>
            err++;
 8009778:	7afb      	ldrb	r3, [r7, #11]
 800977a:	3301      	adds	r3, #1
 800977c:	72fb      	strb	r3, [r7, #11]
          break;
 800977e:	e03b      	b.n	80097f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009786:	695b      	ldr	r3, [r3, #20]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	7c12      	ldrb	r2, [r2, #16]
 8009798:	f107 0108 	add.w	r1, r7, #8
 800979c:	4610      	mov	r0, r2
 800979e:	4798      	blx	r3
 80097a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097a2:	e029      	b.n	80097f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097a4:	6839      	ldr	r1, [r7, #0]
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa63 	bl	8009c72 <USBD_CtlError>
            err++;
 80097ac:	7afb      	ldrb	r3, [r7, #11]
 80097ae:	3301      	adds	r3, #1
 80097b0:	72fb      	strb	r3, [r7, #11]
          break;
 80097b2:	e021      	b.n	80097f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00b      	beq.n	80097d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7c12      	ldrb	r2, [r2, #16]
 80097cc:	f107 0108 	add.w	r1, r7, #8
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
 80097d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097d6:	e00f      	b.n	80097f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fa49 	bl	8009c72 <USBD_CtlError>
            err++;
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	3301      	adds	r3, #1
 80097e4:	72fb      	strb	r3, [r7, #11]
          break;
 80097e6:	e007      	b.n	80097f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fa41 	bl	8009c72 <USBD_CtlError>
          err++;
 80097f0:	7afb      	ldrb	r3, [r7, #11]
 80097f2:	3301      	adds	r3, #1
 80097f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80097f6:	bf00      	nop
      }
      break;
 80097f8:	e037      	b.n	800986a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	7c1b      	ldrb	r3, [r3, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d109      	bne.n	8009816 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800980a:	f107 0208 	add.w	r2, r7, #8
 800980e:	4610      	mov	r0, r2
 8009810:	4798      	blx	r3
 8009812:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009814:	e029      	b.n	800986a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fa2a 	bl	8009c72 <USBD_CtlError>
        err++;
 800981e:	7afb      	ldrb	r3, [r7, #11]
 8009820:	3301      	adds	r3, #1
 8009822:	72fb      	strb	r3, [r7, #11]
      break;
 8009824:	e021      	b.n	800986a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	7c1b      	ldrb	r3, [r3, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10d      	bne.n	800984a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009836:	f107 0208 	add.w	r2, r7, #8
 800983a:	4610      	mov	r0, r2
 800983c:	4798      	blx	r3
 800983e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	3301      	adds	r3, #1
 8009844:	2207      	movs	r2, #7
 8009846:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009848:	e00f      	b.n	800986a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fa10 	bl	8009c72 <USBD_CtlError>
        err++;
 8009852:	7afb      	ldrb	r3, [r7, #11]
 8009854:	3301      	adds	r3, #1
 8009856:	72fb      	strb	r3, [r7, #11]
      break;
 8009858:	e007      	b.n	800986a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800985a:	6839      	ldr	r1, [r7, #0]
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fa08 	bl	8009c72 <USBD_CtlError>
      err++;
 8009862:	7afb      	ldrb	r3, [r7, #11]
 8009864:	3301      	adds	r3, #1
 8009866:	72fb      	strb	r3, [r7, #11]
      break;
 8009868:	bf00      	nop
  }

  if (err != 0U)
 800986a:	7afb      	ldrb	r3, [r7, #11]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d11e      	bne.n	80098ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	88db      	ldrh	r3, [r3, #6]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d016      	beq.n	80098a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009878:	893b      	ldrh	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00e      	beq.n	800989c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	88da      	ldrh	r2, [r3, #6]
 8009882:	893b      	ldrh	r3, [r7, #8]
 8009884:	4293      	cmp	r3, r2
 8009886:	bf28      	it	cs
 8009888:	4613      	movcs	r3, r2
 800988a:	b29b      	uxth	r3, r3
 800988c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800988e:	893b      	ldrh	r3, [r7, #8]
 8009890:	461a      	mov	r2, r3
 8009892:	68f9      	ldr	r1, [r7, #12]
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 fa5d 	bl	8009d54 <USBD_CtlSendData>
 800989a:	e009      	b.n	80098b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f000 f9e7 	bl	8009c72 <USBD_CtlError>
 80098a4:	e004      	b.n	80098b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 faae 	bl	8009e08 <USBD_CtlSendStatus>
 80098ac:	e000      	b.n	80098b0 <USBD_GetDescriptor+0x2cc>
    return;
 80098ae:	bf00      	nop
  }
}
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop

080098b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	889b      	ldrh	r3, [r3, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d131      	bne.n	800992e <USBD_SetAddress+0x76>
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	88db      	ldrh	r3, [r3, #6]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d12d      	bne.n	800992e <USBD_SetAddress+0x76>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	885b      	ldrh	r3, [r3, #2]
 80098d6:	2b7f      	cmp	r3, #127	; 0x7f
 80098d8:	d829      	bhi.n	800992e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	885b      	ldrh	r3, [r3, #2]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b03      	cmp	r3, #3
 80098f0:	d104      	bne.n	80098fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f9bc 	bl	8009c72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098fa:	e01d      	b.n	8009938 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	7bfa      	ldrb	r2, [r7, #15]
 8009900:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 fefb 	bl	800a704 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 fa7a 	bl	8009e08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d004      	beq.n	8009924 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2202      	movs	r2, #2
 800991e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009922:	e009      	b.n	8009938 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992c:	e004      	b.n	8009938 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f99e 	bl	8009c72 <USBD_CtlError>
  }
}
 8009936:	bf00      	nop
 8009938:	bf00      	nop
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
 8009948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	885b      	ldrh	r3, [r3, #2]
 8009952:	b2da      	uxtb	r2, r3
 8009954:	4b4e      	ldr	r3, [pc, #312]	; (8009a90 <USBD_SetConfig+0x150>)
 8009956:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009958:	4b4d      	ldr	r3, [pc, #308]	; (8009a90 <USBD_SetConfig+0x150>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	2b01      	cmp	r3, #1
 800995e:	d905      	bls.n	800996c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f985 	bl	8009c72 <USBD_CtlError>
    return USBD_FAIL;
 8009968:	2303      	movs	r3, #3
 800996a:	e08c      	b.n	8009a86 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b02      	cmp	r3, #2
 8009976:	d002      	beq.n	800997e <USBD_SetConfig+0x3e>
 8009978:	2b03      	cmp	r3, #3
 800997a:	d029      	beq.n	80099d0 <USBD_SetConfig+0x90>
 800997c:	e075      	b.n	8009a6a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800997e:	4b44      	ldr	r3, [pc, #272]	; (8009a90 <USBD_SetConfig+0x150>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d020      	beq.n	80099c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009986:	4b42      	ldr	r3, [pc, #264]	; (8009a90 <USBD_SetConfig+0x150>)
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	461a      	mov	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009990:	4b3f      	ldr	r3, [pc, #252]	; (8009a90 <USBD_SetConfig+0x150>)
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	4619      	mov	r1, r3
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7fe ffe1 	bl	800895e <USBD_SetClassConfig>
 800999c:	4603      	mov	r3, r0
 800999e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d008      	beq.n	80099b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80099a6:	6839      	ldr	r1, [r7, #0]
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f962 	bl	8009c72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2202      	movs	r2, #2
 80099b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099b6:	e065      	b.n	8009a84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fa25 	bl	8009e08 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2203      	movs	r2, #3
 80099c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099c6:	e05d      	b.n	8009a84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fa1d 	bl	8009e08 <USBD_CtlSendStatus>
      break;
 80099ce:	e059      	b.n	8009a84 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099d0:	4b2f      	ldr	r3, [pc, #188]	; (8009a90 <USBD_SetConfig+0x150>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d112      	bne.n	80099fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2202      	movs	r2, #2
 80099dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80099e0:	4b2b      	ldr	r3, [pc, #172]	; (8009a90 <USBD_SetConfig+0x150>)
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	461a      	mov	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099ea:	4b29      	ldr	r3, [pc, #164]	; (8009a90 <USBD_SetConfig+0x150>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7fe ffd0 	bl	8008996 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 fa06 	bl	8009e08 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099fc:	e042      	b.n	8009a84 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80099fe:	4b24      	ldr	r3, [pc, #144]	; (8009a90 <USBD_SetConfig+0x150>)
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d02a      	beq.n	8009a62 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	4619      	mov	r1, r3
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7fe ffbe 	bl	8008996 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a1a:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <USBD_SetConfig+0x150>)
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a24:	4b1a      	ldr	r3, [pc, #104]	; (8009a90 <USBD_SetConfig+0x150>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7fe ff97 	bl	800895e <USBD_SetClassConfig>
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00f      	beq.n	8009a5a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f918 	bl	8009c72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	4619      	mov	r1, r3
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f7fe ffa3 	bl	8008996 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a58:	e014      	b.n	8009a84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f9d4 	bl	8009e08 <USBD_CtlSendStatus>
      break;
 8009a60:	e010      	b.n	8009a84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f9d0 	bl	8009e08 <USBD_CtlSendStatus>
      break;
 8009a68:	e00c      	b.n	8009a84 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f900 	bl	8009c72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a72:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <USBD_SetConfig+0x150>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7fe ff8c 	bl	8008996 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	73fb      	strb	r3, [r7, #15]
      break;
 8009a82:	bf00      	nop
  }

  return ret;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	20000d2c 	.word	0x20000d2c

08009a94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	88db      	ldrh	r3, [r3, #6]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d004      	beq.n	8009ab0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f8e2 	bl	8009c72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009aae:	e023      	b.n	8009af8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	dc02      	bgt.n	8009ac2 <USBD_GetConfig+0x2e>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	dc03      	bgt.n	8009ac8 <USBD_GetConfig+0x34>
 8009ac0:	e015      	b.n	8009aee <USBD_GetConfig+0x5a>
 8009ac2:	2b03      	cmp	r3, #3
 8009ac4:	d00b      	beq.n	8009ade <USBD_GetConfig+0x4a>
 8009ac6:	e012      	b.n	8009aee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f93c 	bl	8009d54 <USBD_CtlSendData>
        break;
 8009adc:	e00c      	b.n	8009af8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f934 	bl	8009d54 <USBD_CtlSendData>
        break;
 8009aec:	e004      	b.n	8009af8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009aee:	6839      	ldr	r1, [r7, #0]
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f8be 	bl	8009c72 <USBD_CtlError>
        break;
 8009af6:	bf00      	nop
}
 8009af8:	bf00      	nop
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	3b01      	subs	r3, #1
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d81e      	bhi.n	8009b56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	88db      	ldrh	r3, [r3, #6]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d004      	beq.n	8009b2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f8a5 	bl	8009c72 <USBD_CtlError>
        break;
 8009b28:	e01a      	b.n	8009b60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68db      	ldr	r3, [r3, #12]
 8009b3e:	f043 0202 	orr.w	r2, r3, #2
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	330c      	adds	r3, #12
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f900 	bl	8009d54 <USBD_CtlSendData>
      break;
 8009b54:	e004      	b.n	8009b60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f88a 	bl	8009c72 <USBD_CtlError>
      break;
 8009b5e:	bf00      	nop
  }
}
 8009b60:	bf00      	nop
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	885b      	ldrh	r3, [r3, #2]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d107      	bne.n	8009b8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f940 	bl	8009e08 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b88:	e013      	b.n	8009bb2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	885b      	ldrh	r3, [r3, #2]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d10b      	bne.n	8009baa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	889b      	ldrh	r3, [r3, #4]
 8009b96:	0a1b      	lsrs	r3, r3, #8
 8009b98:	b29b      	uxth	r3, r3
 8009b9a:	b2da      	uxtb	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f930 	bl	8009e08 <USBD_CtlSendStatus>
}
 8009ba8:	e003      	b.n	8009bb2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f860 	bl	8009c72 <USBD_CtlError>
}
 8009bb2:	bf00      	nop
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b082      	sub	sp, #8
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	3b01      	subs	r3, #1
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d80b      	bhi.n	8009bea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	885b      	ldrh	r3, [r3, #2]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d10c      	bne.n	8009bf4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f910 	bl	8009e08 <USBD_CtlSendStatus>
      }
      break;
 8009be8:	e004      	b.n	8009bf4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bea:	6839      	ldr	r1, [r7, #0]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f840 	bl	8009c72 <USBD_CtlError>
      break;
 8009bf2:	e000      	b.n	8009bf6 <USBD_ClrFeature+0x3c>
      break;
 8009bf4:	bf00      	nop
  }
}
 8009bf6:	bf00      	nop
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	781a      	ldrb	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3301      	adds	r3, #1
 8009c18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	781a      	ldrb	r2, [r3, #0]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	3301      	adds	r3, #1
 8009c26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f7ff fa41 	bl	80090b0 <SWAPBYTE>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	461a      	mov	r2, r3
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff fa34 	bl	80090b0 <SWAPBYTE>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3301      	adds	r3, #1
 8009c54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c5c:	68f8      	ldr	r0, [r7, #12]
 8009c5e:	f7ff fa27 	bl	80090b0 <SWAPBYTE>
 8009c62:	4603      	mov	r3, r0
 8009c64:	461a      	mov	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	80da      	strh	r2, [r3, #6]
}
 8009c6a:	bf00      	nop
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b082      	sub	sp, #8
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c7c:	2180      	movs	r1, #128	; 0x80
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fcd6 	bl	800a630 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c84:	2100      	movs	r1, #0
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fcd2 	bl	800a630 <USBD_LL_StallEP>
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d036      	beq.n	8009d18 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009cae:	6938      	ldr	r0, [r7, #16]
 8009cb0:	f000 f836 	bl	8009d20 <USBD_GetLen>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	005b      	lsls	r3, r3, #1
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	7812      	ldrb	r2, [r2, #0]
 8009ccc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	4413      	add	r3, r2
 8009cda:	2203      	movs	r2, #3
 8009cdc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ce4:	e013      	b.n	8009d0e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	4413      	add	r3, r2
 8009cec:	693a      	ldr	r2, [r7, #16]
 8009cee:	7812      	ldrb	r2, [r2, #0]
 8009cf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	613b      	str	r3, [r7, #16]
    idx++;
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009cfe:	7dfb      	ldrb	r3, [r7, #23]
 8009d00:	68ba      	ldr	r2, [r7, #8]
 8009d02:	4413      	add	r3, r2
 8009d04:	2200      	movs	r2, #0
 8009d06:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d08:	7dfb      	ldrb	r3, [r7, #23]
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e7      	bne.n	8009ce6 <USBD_GetString+0x52>
 8009d16:	e000      	b.n	8009d1a <USBD_GetString+0x86>
    return;
 8009d18:	bf00      	nop
  }
}
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d30:	e005      	b.n	8009d3e <USBD_GetLen+0x1e>
  {
    len++;
 8009d32:	7bfb      	ldrb	r3, [r7, #15]
 8009d34:	3301      	adds	r3, #1
 8009d36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1f5      	bne.n	8009d32 <USBD_GetLen+0x12>
  }

  return len;
 8009d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2202      	movs	r2, #2
 8009d64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	2100      	movs	r1, #0
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f000 fce1 	bl	800a742 <USBD_LL_Transmit>

  return USBD_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	60b9      	str	r1, [r7, #8]
 8009d94:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	2100      	movs	r1, #0
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 fcd0 	bl	800a742 <USBD_LL_Transmit>

  return USBD_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 fcd4 	bl	800a784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	60b9      	str	r1, [r7, #8]
 8009df0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	2100      	movs	r1, #0
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 fcc3 	bl	800a784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dfe:	2300      	movs	r3, #0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3710      	adds	r7, #16
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2204      	movs	r2, #4
 8009e14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009e18:	2300      	movs	r3, #0
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fc8f 	bl	800a742 <USBD_LL_Transmit>

  return USBD_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b082      	sub	sp, #8
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2205      	movs	r2, #5
 8009e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e3e:	2300      	movs	r3, #0
 8009e40:	2200      	movs	r2, #0
 8009e42:	2100      	movs	r1, #0
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fc9d 	bl	800a784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3708      	adds	r7, #8
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e58:	2200      	movs	r2, #0
 8009e5a:	4912      	ldr	r1, [pc, #72]	; (8009ea4 <MX_USB_DEVICE_Init+0x50>)
 8009e5c:	4812      	ldr	r0, [pc, #72]	; (8009ea8 <MX_USB_DEVICE_Init+0x54>)
 8009e5e:	f7fe fd01 	bl	8008864 <USBD_Init>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e68:	f7f6 fe5a 	bl	8000b20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e6c:	490f      	ldr	r1, [pc, #60]	; (8009eac <MX_USB_DEVICE_Init+0x58>)
 8009e6e:	480e      	ldr	r0, [pc, #56]	; (8009ea8 <MX_USB_DEVICE_Init+0x54>)
 8009e70:	f7fe fd28 	bl	80088c4 <USBD_RegisterClass>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e7a:	f7f6 fe51 	bl	8000b20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e7e:	490c      	ldr	r1, [pc, #48]	; (8009eb0 <MX_USB_DEVICE_Init+0x5c>)
 8009e80:	4809      	ldr	r0, [pc, #36]	; (8009ea8 <MX_USB_DEVICE_Init+0x54>)
 8009e82:	f7fe fc1f 	bl	80086c4 <USBD_CDC_RegisterInterface>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e8c:	f7f6 fe48 	bl	8000b20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e90:	4805      	ldr	r0, [pc, #20]	; (8009ea8 <MX_USB_DEVICE_Init+0x54>)
 8009e92:	f7fe fd4d 	bl	8008930 <USBD_Start>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e9c:	f7f6 fe40 	bl	8000b20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ea0:	bf00      	nop
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	200000d0 	.word	0x200000d0
 8009ea8:	20000d30 	.word	0x20000d30
 8009eac:	2000003c 	.word	0x2000003c
 8009eb0:	200000bc 	.word	0x200000bc

08009eb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4905      	ldr	r1, [pc, #20]	; (8009ed0 <CDC_Init_FS+0x1c>)
 8009ebc:	4805      	ldr	r0, [pc, #20]	; (8009ed4 <CDC_Init_FS+0x20>)
 8009ebe:	f7fe fc1b 	bl	80086f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ec2:	4905      	ldr	r1, [pc, #20]	; (8009ed8 <CDC_Init_FS+0x24>)
 8009ec4:	4803      	ldr	r0, [pc, #12]	; (8009ed4 <CDC_Init_FS+0x20>)
 8009ec6:	f7fe fc39 	bl	800873c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009eca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	bd80      	pop	{r7, pc}
 8009ed0:	2000140c 	.word	0x2000140c
 8009ed4:	20000d30 	.word	0x20000d30
 8009ed8:	2000100c 	.word	0x2000100c

08009edc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ee0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	6039      	str	r1, [r7, #0]
 8009ef6:	71fb      	strb	r3, [r7, #7]
 8009ef8:	4613      	mov	r3, r2
 8009efa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009efc:	79fb      	ldrb	r3, [r7, #7]
 8009efe:	2b23      	cmp	r3, #35	; 0x23
 8009f00:	d84a      	bhi.n	8009f98 <CDC_Control_FS+0xac>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <CDC_Control_FS+0x1c>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f99 	.word	0x08009f99
 8009f0c:	08009f99 	.word	0x08009f99
 8009f10:	08009f99 	.word	0x08009f99
 8009f14:	08009f99 	.word	0x08009f99
 8009f18:	08009f99 	.word	0x08009f99
 8009f1c:	08009f99 	.word	0x08009f99
 8009f20:	08009f99 	.word	0x08009f99
 8009f24:	08009f99 	.word	0x08009f99
 8009f28:	08009f99 	.word	0x08009f99
 8009f2c:	08009f99 	.word	0x08009f99
 8009f30:	08009f99 	.word	0x08009f99
 8009f34:	08009f99 	.word	0x08009f99
 8009f38:	08009f99 	.word	0x08009f99
 8009f3c:	08009f99 	.word	0x08009f99
 8009f40:	08009f99 	.word	0x08009f99
 8009f44:	08009f99 	.word	0x08009f99
 8009f48:	08009f99 	.word	0x08009f99
 8009f4c:	08009f99 	.word	0x08009f99
 8009f50:	08009f99 	.word	0x08009f99
 8009f54:	08009f99 	.word	0x08009f99
 8009f58:	08009f99 	.word	0x08009f99
 8009f5c:	08009f99 	.word	0x08009f99
 8009f60:	08009f99 	.word	0x08009f99
 8009f64:	08009f99 	.word	0x08009f99
 8009f68:	08009f99 	.word	0x08009f99
 8009f6c:	08009f99 	.word	0x08009f99
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009f99 	.word	0x08009f99
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	08009f99 	.word	0x08009f99
 8009f80:	08009f99 	.word	0x08009f99
 8009f84:	08009f99 	.word	0x08009f99
 8009f88:	08009f99 	.word	0x08009f99
 8009f8c:	08009f99 	.word	0x08009f99
 8009f90:	08009f99 	.word	0x08009f99
 8009f94:	08009f99 	.word	0x08009f99
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f98:	bf00      	nop
  }

  return (USBD_OK);
 8009f9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4805      	ldr	r0, [pc, #20]	; (8009fcc <CDC_Receive_FS+0x24>)
 8009fb6:	f7fe fbc1 	bl	800873c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009fba:	4804      	ldr	r0, [pc, #16]	; (8009fcc <CDC_Receive_FS+0x24>)
 8009fbc:	f7fe fc1c 	bl	80087f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009fc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	20000d30 	.word	0x20000d30

08009fd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009fe0:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <CDC_Transmit_FS+0x48>)
 8009fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fe6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e00b      	b.n	800a00e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ff6:	887b      	ldrh	r3, [r7, #2]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4806      	ldr	r0, [pc, #24]	; (800a018 <CDC_Transmit_FS+0x48>)
 8009ffe:	f7fe fb7b 	bl	80086f8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a002:	4805      	ldr	r0, [pc, #20]	; (800a018 <CDC_Transmit_FS+0x48>)
 800a004:	f7fe fbb8 	bl	8008778 <USBD_CDC_TransmitPacket>
 800a008:	4603      	mov	r3, r0
 800a00a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	20000d30 	.word	0x20000d30

0800a01c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	4613      	mov	r3, r2
 800a028:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a02e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a032:	4618      	mov	r0, r3
 800a034:	371c      	adds	r7, #28
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
	...

0800a040 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	6039      	str	r1, [r7, #0]
 800a04a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2212      	movs	r2, #18
 800a050:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a052:	4b03      	ldr	r3, [pc, #12]	; (800a060 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	200000ec 	.word	0x200000ec

0800a064 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	6039      	str	r1, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	2204      	movs	r2, #4
 800a074:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a076:	4b03      	ldr	r3, [pc, #12]	; (800a084 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a078:	4618      	mov	r0, r3
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	20000100 	.word	0x20000100

0800a088 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	4603      	mov	r3, r0
 800a090:	6039      	str	r1, [r7, #0]
 800a092:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d105      	bne.n	800a0a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a09a:	683a      	ldr	r2, [r7, #0]
 800a09c:	4907      	ldr	r1, [pc, #28]	; (800a0bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a09e:	4808      	ldr	r0, [pc, #32]	; (800a0c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0a0:	f7ff fdf8 	bl	8009c94 <USBD_GetString>
 800a0a4:	e004      	b.n	800a0b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	4904      	ldr	r1, [pc, #16]	; (800a0bc <USBD_FS_ProductStrDescriptor+0x34>)
 800a0aa:	4805      	ldr	r0, [pc, #20]	; (800a0c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0ac:	f7ff fdf2 	bl	8009c94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0b0:	4b02      	ldr	r3, [pc, #8]	; (800a0bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	2000180c 	.word	0x2000180c
 800a0c0:	0800c6c8 	.word	0x0800c6c8

0800a0c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b082      	sub	sp, #8
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	6039      	str	r1, [r7, #0]
 800a0ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a0d0:	683a      	ldr	r2, [r7, #0]
 800a0d2:	4904      	ldr	r1, [pc, #16]	; (800a0e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a0d4:	4804      	ldr	r0, [pc, #16]	; (800a0e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a0d6:	f7ff fddd 	bl	8009c94 <USBD_GetString>
  return USBD_StrDesc;
 800a0da:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	2000180c 	.word	0x2000180c
 800a0e8:	0800c6e0 	.word	0x0800c6e0

0800a0ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	6039      	str	r1, [r7, #0]
 800a0f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	221a      	movs	r2, #26
 800a0fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0fe:	f000 f843 	bl	800a188 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a102:	4b02      	ldr	r3, [pc, #8]	; (800a10c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a104:	4618      	mov	r0, r3
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}
 800a10c:	20000104 	.word	0x20000104

0800a110 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	6039      	str	r1, [r7, #0]
 800a11a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a11c:	79fb      	ldrb	r3, [r7, #7]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d105      	bne.n	800a12e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a122:	683a      	ldr	r2, [r7, #0]
 800a124:	4907      	ldr	r1, [pc, #28]	; (800a144 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a126:	4808      	ldr	r0, [pc, #32]	; (800a148 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a128:	f7ff fdb4 	bl	8009c94 <USBD_GetString>
 800a12c:	e004      	b.n	800a138 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	4904      	ldr	r1, [pc, #16]	; (800a144 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a132:	4805      	ldr	r0, [pc, #20]	; (800a148 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a134:	f7ff fdae 	bl	8009c94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a138:	4b02      	ldr	r3, [pc, #8]	; (800a144 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3708      	adds	r7, #8
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	2000180c 	.word	0x2000180c
 800a148:	0800c6f4 	.word	0x0800c6f4

0800a14c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	6039      	str	r1, [r7, #0]
 800a156:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d105      	bne.n	800a16a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	4907      	ldr	r1, [pc, #28]	; (800a180 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a162:	4808      	ldr	r0, [pc, #32]	; (800a184 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a164:	f7ff fd96 	bl	8009c94 <USBD_GetString>
 800a168:	e004      	b.n	800a174 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	4904      	ldr	r1, [pc, #16]	; (800a180 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a16e:	4805      	ldr	r0, [pc, #20]	; (800a184 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a170:	f7ff fd90 	bl	8009c94 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a174:	4b02      	ldr	r3, [pc, #8]	; (800a180 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a176:	4618      	mov	r0, r3
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	2000180c 	.word	0x2000180c
 800a184:	0800c700 	.word	0x0800c700

0800a188 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a18e:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <Get_SerialNum+0x44>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a194:	4b0e      	ldr	r3, [pc, #56]	; (800a1d0 <Get_SerialNum+0x48>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a19a:	4b0e      	ldr	r3, [pc, #56]	; (800a1d4 <Get_SerialNum+0x4c>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d009      	beq.n	800a1c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	4909      	ldr	r1, [pc, #36]	; (800a1d8 <Get_SerialNum+0x50>)
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 f814 	bl	800a1e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a1b8:	2204      	movs	r2, #4
 800a1ba:	4908      	ldr	r1, [pc, #32]	; (800a1dc <Get_SerialNum+0x54>)
 800a1bc:	68b8      	ldr	r0, [r7, #8]
 800a1be:	f000 f80f 	bl	800a1e0 <IntToUnicode>
  }
}
 800a1c2:	bf00      	nop
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	1fff7a10 	.word	0x1fff7a10
 800a1d0:	1fff7a14 	.word	0x1fff7a14
 800a1d4:	1fff7a18 	.word	0x1fff7a18
 800a1d8:	20000106 	.word	0x20000106
 800a1dc:	20000116 	.word	0x20000116

0800a1e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	75fb      	strb	r3, [r7, #23]
 800a1f6:	e027      	b.n	800a248 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	0f1b      	lsrs	r3, r3, #28
 800a1fc:	2b09      	cmp	r3, #9
 800a1fe:	d80b      	bhi.n	800a218 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	0f1b      	lsrs	r3, r3, #28
 800a204:	b2da      	uxtb	r2, r3
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	4619      	mov	r1, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	440b      	add	r3, r1
 800a210:	3230      	adds	r2, #48	; 0x30
 800a212:	b2d2      	uxtb	r2, r2
 800a214:	701a      	strb	r2, [r3, #0]
 800a216:	e00a      	b.n	800a22e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	0f1b      	lsrs	r3, r3, #28
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	7dfb      	ldrb	r3, [r7, #23]
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	4619      	mov	r1, r3
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	440b      	add	r3, r1
 800a228:	3237      	adds	r2, #55	; 0x37
 800a22a:	b2d2      	uxtb	r2, r2
 800a22c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	011b      	lsls	r3, r3, #4
 800a232:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a234:	7dfb      	ldrb	r3, [r7, #23]
 800a236:	005b      	lsls	r3, r3, #1
 800a238:	3301      	adds	r3, #1
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	4413      	add	r3, r2
 800a23e:	2200      	movs	r2, #0
 800a240:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a242:	7dfb      	ldrb	r3, [r7, #23]
 800a244:	3301      	adds	r3, #1
 800a246:	75fb      	strb	r3, [r7, #23]
 800a248:	7dfa      	ldrb	r2, [r7, #23]
 800a24a:	79fb      	ldrb	r3, [r7, #7]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d3d3      	bcc.n	800a1f8 <IntToUnicode+0x18>
  }
}
 800a250:	bf00      	nop
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
	...

0800a260 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b08a      	sub	sp, #40	; 0x28
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a268:	f107 0314 	add.w	r3, r7, #20
 800a26c:	2200      	movs	r2, #0
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	605a      	str	r2, [r3, #4]
 800a272:	609a      	str	r2, [r3, #8]
 800a274:	60da      	str	r2, [r3, #12]
 800a276:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a280:	d13a      	bne.n	800a2f8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a282:	2300      	movs	r3, #0
 800a284:	613b      	str	r3, [r7, #16]
 800a286:	4b1e      	ldr	r3, [pc, #120]	; (800a300 <HAL_PCD_MspInit+0xa0>)
 800a288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28a:	4a1d      	ldr	r2, [pc, #116]	; (800a300 <HAL_PCD_MspInit+0xa0>)
 800a28c:	f043 0301 	orr.w	r3, r3, #1
 800a290:	6313      	str	r3, [r2, #48]	; 0x30
 800a292:	4b1b      	ldr	r3, [pc, #108]	; (800a300 <HAL_PCD_MspInit+0xa0>)
 800a294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a296:	f003 0301 	and.w	r3, r3, #1
 800a29a:	613b      	str	r3, [r7, #16]
 800a29c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a29e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a2a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a2b0:	230a      	movs	r3, #10
 800a2b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2b4:	f107 0314 	add.w	r3, r7, #20
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	4812      	ldr	r0, [pc, #72]	; (800a304 <HAL_PCD_MspInit+0xa4>)
 800a2bc:	f7f8 fa66 	bl	800278c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a2c0:	4b0f      	ldr	r3, [pc, #60]	; (800a300 <HAL_PCD_MspInit+0xa0>)
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c4:	4a0e      	ldr	r2, [pc, #56]	; (800a300 <HAL_PCD_MspInit+0xa0>)
 800a2c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ca:	6353      	str	r3, [r2, #52]	; 0x34
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	4b0b      	ldr	r3, [pc, #44]	; (800a300 <HAL_PCD_MspInit+0xa0>)
 800a2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d4:	4a0a      	ldr	r2, [pc, #40]	; (800a300 <HAL_PCD_MspInit+0xa0>)
 800a2d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2da:	6453      	str	r3, [r2, #68]	; 0x44
 800a2dc:	4b08      	ldr	r3, [pc, #32]	; (800a300 <HAL_PCD_MspInit+0xa0>)
 800a2de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	2043      	movs	r0, #67	; 0x43
 800a2ee:	f7f8 f984 	bl	80025fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2f2:	2043      	movs	r0, #67	; 0x43
 800a2f4:	f7f8 f99d 	bl	8002632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2f8:	bf00      	nop
 800a2fa:	3728      	adds	r7, #40	; 0x28
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	40023800 	.word	0x40023800
 800a304:	40020000 	.word	0x40020000

0800a308 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7fe fb53 	bl	80089ca <USBD_LL_SetupStage>
}
 800a324:	bf00      	nop
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a33e:	78fa      	ldrb	r2, [r7, #3]
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	4613      	mov	r3, r2
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	4413      	add	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	440b      	add	r3, r1
 800a34c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800a350:	681a      	ldr	r2, [r3, #0]
 800a352:	78fb      	ldrb	r3, [r7, #3]
 800a354:	4619      	mov	r1, r3
 800a356:	f7fe fb8d 	bl	8008a74 <USBD_LL_DataOutStage>
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800a374:	78fa      	ldrb	r2, [r7, #3]
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	4613      	mov	r3, r2
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	440b      	add	r3, r1
 800a382:	3320      	adds	r3, #32
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	4619      	mov	r1, r3
 800a38a:	f7fe fc26 	bl	8008bda <USBD_LL_DataInStage>
}
 800a38e:	bf00      	nop
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f7fe fd60 	bl	8008e6a <USBD_LL_SOF>
}
 800a3aa:	bf00      	nop
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	79db      	ldrb	r3, [r3, #7]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d001      	beq.n	800a3ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a3c6:	f7f6 fbab 	bl	8000b20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a3d0:	7bfa      	ldrb	r2, [r7, #15]
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe fd04 	bl	8008de2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe fcac 	bl	8008d3e <USBD_LL_Reset>
}
 800a3e6:	bf00      	nop
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
	...

0800a3f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe fcff 	bl	8008e02 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	6812      	ldr	r2, [r2, #0]
 800a412:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a416:	f043 0301 	orr.w	r3, r3, #1
 800a41a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	7adb      	ldrb	r3, [r3, #11]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d005      	beq.n	800a430 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a424:	4b04      	ldr	r3, [pc, #16]	; (800a438 <HAL_PCD_SuspendCallback+0x48>)
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	4a03      	ldr	r2, [pc, #12]	; (800a438 <HAL_PCD_SuspendCallback+0x48>)
 800a42a:	f043 0306 	orr.w	r3, r3, #6
 800a42e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	e000ed00 	.word	0xe000ed00

0800a43c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fcf5 	bl	8008e3a <USBD_LL_Resume>
}
 800a450:	bf00      	nop
 800a452:	3708      	adds	r7, #8
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}

0800a458 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
 800a460:	460b      	mov	r3, r1
 800a462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a46a:	78fa      	ldrb	r2, [r7, #3]
 800a46c:	4611      	mov	r1, r2
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe fd4d 	bl	8008f0e <USBD_LL_IsoOUTIncomplete>
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	460b      	mov	r3, r1
 800a486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a48e:	78fa      	ldrb	r2, [r7, #3]
 800a490:	4611      	mov	r1, r2
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe fd09 	bl	8008eaa <USBD_LL_IsoINIncomplete>
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe fd5f 	bl	8008f72 <USBD_LL_DevConnected>
}
 800a4b4:	bf00      	nop
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe fd5c 	bl	8008f88 <USBD_LL_DevDisconnected>
}
 800a4d0:	bf00      	nop
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d13c      	bne.n	800a562 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a4e8:	4a20      	ldr	r2, [pc, #128]	; (800a56c <USBD_LL_Init+0x94>)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a1e      	ldr	r2, [pc, #120]	; (800a56c <USBD_LL_Init+0x94>)
 800a4f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4f8:	4b1c      	ldr	r3, [pc, #112]	; (800a56c <USBD_LL_Init+0x94>)
 800a4fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a500:	4b1a      	ldr	r3, [pc, #104]	; (800a56c <USBD_LL_Init+0x94>)
 800a502:	2204      	movs	r2, #4
 800a504:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a506:	4b19      	ldr	r3, [pc, #100]	; (800a56c <USBD_LL_Init+0x94>)
 800a508:	2202      	movs	r2, #2
 800a50a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a50c:	4b17      	ldr	r3, [pc, #92]	; (800a56c <USBD_LL_Init+0x94>)
 800a50e:	2200      	movs	r2, #0
 800a510:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a512:	4b16      	ldr	r3, [pc, #88]	; (800a56c <USBD_LL_Init+0x94>)
 800a514:	2202      	movs	r2, #2
 800a516:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a518:	4b14      	ldr	r3, [pc, #80]	; (800a56c <USBD_LL_Init+0x94>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a51e:	4b13      	ldr	r3, [pc, #76]	; (800a56c <USBD_LL_Init+0x94>)
 800a520:	2200      	movs	r2, #0
 800a522:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a524:	4b11      	ldr	r3, [pc, #68]	; (800a56c <USBD_LL_Init+0x94>)
 800a526:	2200      	movs	r2, #0
 800a528:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a52a:	4b10      	ldr	r3, [pc, #64]	; (800a56c <USBD_LL_Init+0x94>)
 800a52c:	2200      	movs	r2, #0
 800a52e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a530:	4b0e      	ldr	r3, [pc, #56]	; (800a56c <USBD_LL_Init+0x94>)
 800a532:	2200      	movs	r2, #0
 800a534:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a536:	480d      	ldr	r0, [pc, #52]	; (800a56c <USBD_LL_Init+0x94>)
 800a538:	f7f8 ff7d 	bl	8003436 <HAL_PCD_Init>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a542:	f7f6 faed 	bl	8000b20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a546:	2180      	movs	r1, #128	; 0x80
 800a548:	4808      	ldr	r0, [pc, #32]	; (800a56c <USBD_LL_Init+0x94>)
 800a54a:	f7fa f9a8 	bl	800489e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a54e:	2240      	movs	r2, #64	; 0x40
 800a550:	2100      	movs	r1, #0
 800a552:	4806      	ldr	r0, [pc, #24]	; (800a56c <USBD_LL_Init+0x94>)
 800a554:	f7fa f95c 	bl	8004810 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a558:	2280      	movs	r2, #128	; 0x80
 800a55a:	2101      	movs	r1, #1
 800a55c:	4803      	ldr	r0, [pc, #12]	; (800a56c <USBD_LL_Init+0x94>)
 800a55e:	f7fa f957 	bl	8004810 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3708      	adds	r7, #8
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	20001a0c 	.word	0x20001a0c

0800a570 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a578:	2300      	movs	r3, #0
 800a57a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a586:	4618      	mov	r0, r3
 800a588:	f7f9 f864 	bl	8003654 <HAL_PCD_Start>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	4618      	mov	r0, r3
 800a594:	f000 f942 	bl	800a81c <USBD_Get_USB_Status>
 800a598:	4603      	mov	r3, r0
 800a59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b084      	sub	sp, #16
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	70fb      	strb	r3, [r7, #3]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70bb      	strb	r3, [r7, #2]
 800a5bc:	4613      	mov	r3, r2
 800a5be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5ce:	78bb      	ldrb	r3, [r7, #2]
 800a5d0:	883a      	ldrh	r2, [r7, #0]
 800a5d2:	78f9      	ldrb	r1, [r7, #3]
 800a5d4:	f7f9 fd38 	bl	8004048 <HAL_PCD_EP_Open>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 f91c 	bl	800a81c <USBD_Get_USB_Status>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fe:	2300      	movs	r3, #0
 800a600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a60c:	78fa      	ldrb	r2, [r7, #3]
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f7f9 fd81 	bl	8004118 <HAL_PCD_EP_Close>
 800a616:	4603      	mov	r3, r0
 800a618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a61a:	7bfb      	ldrb	r3, [r7, #15]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 f8fd 	bl	800a81c <USBD_Get_USB_Status>
 800a622:	4603      	mov	r3, r0
 800a624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a626:	7bbb      	ldrb	r3, [r7, #14]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a640:	2300      	movs	r3, #0
 800a642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a64a:	78fa      	ldrb	r2, [r7, #3]
 800a64c:	4611      	mov	r1, r2
 800a64e:	4618      	mov	r0, r3
 800a650:	f7f9 fe39 	bl	80042c6 <HAL_PCD_EP_SetStall>
 800a654:	4603      	mov	r3, r0
 800a656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a658:	7bfb      	ldrb	r3, [r7, #15]
 800a65a:	4618      	mov	r0, r3
 800a65c:	f000 f8de 	bl	800a81c <USBD_Get_USB_Status>
 800a660:	4603      	mov	r3, r0
 800a662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a664:	7bbb      	ldrb	r3, [r7, #14]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b084      	sub	sp, #16
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a688:	78fa      	ldrb	r2, [r7, #3]
 800a68a:	4611      	mov	r1, r2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7f9 fe7d 	bl	800438c <HAL_PCD_EP_ClrStall>
 800a692:	4603      	mov	r3, r0
 800a694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a696:	7bfb      	ldrb	r3, [r7, #15]
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 f8bf 	bl	800a81c <USBD_Get_USB_Status>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	da0b      	bge.n	800a6e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a6c8:	78fb      	ldrb	r3, [r7, #3]
 800a6ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6ce:	68f9      	ldr	r1, [r7, #12]
 800a6d0:	4613      	mov	r3, r2
 800a6d2:	00db      	lsls	r3, r3, #3
 800a6d4:	4413      	add	r3, r2
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	440b      	add	r3, r1
 800a6da:	3316      	adds	r3, #22
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	e00b      	b.n	800a6f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	00db      	lsls	r3, r3, #3
 800a6ec:	4413      	add	r3, r2
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	440b      	add	r3, r1
 800a6f2:	f203 2356 	addw	r3, r3, #598	; 0x256
 800a6f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	460b      	mov	r3, r1
 800a70e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a71e:	78fa      	ldrb	r2, [r7, #3]
 800a720:	4611      	mov	r1, r2
 800a722:	4618      	mov	r0, r3
 800a724:	f7f9 fc6c 	bl	8004000 <HAL_PCD_SetAddress>
 800a728:	4603      	mov	r3, r0
 800a72a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a72c:	7bfb      	ldrb	r3, [r7, #15]
 800a72e:	4618      	mov	r0, r3
 800a730:	f000 f874 	bl	800a81c <USBD_Get_USB_Status>
 800a734:	4603      	mov	r3, r0
 800a736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a738:	7bbb      	ldrb	r3, [r7, #14]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b086      	sub	sp, #24
 800a746:	af00      	add	r7, sp, #0
 800a748:	60f8      	str	r0, [r7, #12]
 800a74a:	607a      	str	r2, [r7, #4]
 800a74c:	603b      	str	r3, [r7, #0]
 800a74e:	460b      	mov	r3, r1
 800a750:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a760:	7af9      	ldrb	r1, [r7, #11]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	f7f9 fd74 	bl	8004252 <HAL_PCD_EP_Transmit>
 800a76a:	4603      	mov	r3, r0
 800a76c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
 800a770:	4618      	mov	r0, r3
 800a772:	f000 f853 	bl	800a81c <USBD_Get_USB_Status>
 800a776:	4603      	mov	r3, r0
 800a778:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a77a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	607a      	str	r2, [r7, #4]
 800a78e:	603b      	str	r3, [r7, #0]
 800a790:	460b      	mov	r3, r1
 800a792:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a798:	2300      	movs	r3, #0
 800a79a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a7a2:	7af9      	ldrb	r1, [r7, #11]
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	f7f9 fd00 	bl	80041ac <HAL_PCD_EP_Receive>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b0:	7dfb      	ldrb	r3, [r7, #23]
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 f832 	bl	800a81c <USBD_Get_USB_Status>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7d8:	78fa      	ldrb	r2, [r7, #3]
 800a7da:	4611      	mov	r1, r2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7f9 fd20 	bl	8004222 <HAL_PCD_EP_GetRxCount>
 800a7e2:	4603      	mov	r3, r0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7f4:	4b03      	ldr	r3, [pc, #12]	; (800a804 <USBD_static_malloc+0x18>)
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	20001ef0 	.word	0x20001ef0

0800a808 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]

}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a82a:	79fb      	ldrb	r3, [r7, #7]
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	d817      	bhi.n	800a860 <USBD_Get_USB_Status+0x44>
 800a830:	a201      	add	r2, pc, #4	; (adr r2, 800a838 <USBD_Get_USB_Status+0x1c>)
 800a832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a836:	bf00      	nop
 800a838:	0800a849 	.word	0x0800a849
 800a83c:	0800a84f 	.word	0x0800a84f
 800a840:	0800a855 	.word	0x0800a855
 800a844:	0800a85b 	.word	0x0800a85b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
    break;
 800a84c:	e00b      	b.n	800a866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a84e:	2303      	movs	r3, #3
 800a850:	73fb      	strb	r3, [r7, #15]
    break;
 800a852:	e008      	b.n	800a866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a854:	2301      	movs	r3, #1
 800a856:	73fb      	strb	r3, [r7, #15]
    break;
 800a858:	e005      	b.n	800a866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a85a:	2303      	movs	r3, #3
 800a85c:	73fb      	strb	r3, [r7, #15]
    break;
 800a85e:	e002      	b.n	800a866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a860:	2303      	movs	r3, #3
 800a862:	73fb      	strb	r3, [r7, #15]
    break;
 800a864:	bf00      	nop
  }
  return usb_status;
 800a866:	7bfb      	ldrb	r3, [r7, #15]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <siprintf>:
 800a874:	b40e      	push	{r1, r2, r3}
 800a876:	b500      	push	{lr}
 800a878:	b09c      	sub	sp, #112	; 0x70
 800a87a:	ab1d      	add	r3, sp, #116	; 0x74
 800a87c:	9002      	str	r0, [sp, #8]
 800a87e:	9006      	str	r0, [sp, #24]
 800a880:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a884:	4809      	ldr	r0, [pc, #36]	; (800a8ac <siprintf+0x38>)
 800a886:	9107      	str	r1, [sp, #28]
 800a888:	9104      	str	r1, [sp, #16]
 800a88a:	4909      	ldr	r1, [pc, #36]	; (800a8b0 <siprintf+0x3c>)
 800a88c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a890:	9105      	str	r1, [sp, #20]
 800a892:	6800      	ldr	r0, [r0, #0]
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	a902      	add	r1, sp, #8
 800a898:	f000 fd08 	bl	800b2ac <_svfiprintf_r>
 800a89c:	9b02      	ldr	r3, [sp, #8]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	701a      	strb	r2, [r3, #0]
 800a8a2:	b01c      	add	sp, #112	; 0x70
 800a8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8a8:	b003      	add	sp, #12
 800a8aa:	4770      	bx	lr
 800a8ac:	20000178 	.word	0x20000178
 800a8b0:	ffff0208 	.word	0xffff0208

0800a8b4 <std>:
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	b510      	push	{r4, lr}
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	e9c0 3300 	strd	r3, r3, [r0]
 800a8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8c2:	6083      	str	r3, [r0, #8]
 800a8c4:	8181      	strh	r1, [r0, #12]
 800a8c6:	6643      	str	r3, [r0, #100]	; 0x64
 800a8c8:	81c2      	strh	r2, [r0, #14]
 800a8ca:	6183      	str	r3, [r0, #24]
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	2208      	movs	r2, #8
 800a8d0:	305c      	adds	r0, #92	; 0x5c
 800a8d2:	f000 fb59 	bl	800af88 <memset>
 800a8d6:	4b0d      	ldr	r3, [pc, #52]	; (800a90c <std+0x58>)
 800a8d8:	6263      	str	r3, [r4, #36]	; 0x24
 800a8da:	4b0d      	ldr	r3, [pc, #52]	; (800a910 <std+0x5c>)
 800a8dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8de:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <std+0x60>)
 800a8e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8e2:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <std+0x64>)
 800a8e4:	6323      	str	r3, [r4, #48]	; 0x30
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	; (800a91c <std+0x68>)
 800a8e8:	6224      	str	r4, [r4, #32]
 800a8ea:	429c      	cmp	r4, r3
 800a8ec:	d006      	beq.n	800a8fc <std+0x48>
 800a8ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a8f2:	4294      	cmp	r4, r2
 800a8f4:	d002      	beq.n	800a8fc <std+0x48>
 800a8f6:	33d0      	adds	r3, #208	; 0xd0
 800a8f8:	429c      	cmp	r4, r3
 800a8fa:	d105      	bne.n	800a908 <std+0x54>
 800a8fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a904:	f000 bc48 	b.w	800b198 <__retarget_lock_init_recursive>
 800a908:	bd10      	pop	{r4, pc}
 800a90a:	bf00      	nop
 800a90c:	0800ba8d 	.word	0x0800ba8d
 800a910:	0800baaf 	.word	0x0800baaf
 800a914:	0800bae7 	.word	0x0800bae7
 800a918:	0800bb0b 	.word	0x0800bb0b
 800a91c:	20002110 	.word	0x20002110

0800a920 <stdio_exit_handler>:
 800a920:	4a02      	ldr	r2, [pc, #8]	; (800a92c <stdio_exit_handler+0xc>)
 800a922:	4903      	ldr	r1, [pc, #12]	; (800a930 <stdio_exit_handler+0x10>)
 800a924:	4803      	ldr	r0, [pc, #12]	; (800a934 <stdio_exit_handler+0x14>)
 800a926:	f000 b869 	b.w	800a9fc <_fwalk_sglue>
 800a92a:	bf00      	nop
 800a92c:	20000120 	.word	0x20000120
 800a930:	0800ba25 	.word	0x0800ba25
 800a934:	2000012c 	.word	0x2000012c

0800a938 <cleanup_stdio>:
 800a938:	6841      	ldr	r1, [r0, #4]
 800a93a:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <cleanup_stdio+0x34>)
 800a93c:	4299      	cmp	r1, r3
 800a93e:	b510      	push	{r4, lr}
 800a940:	4604      	mov	r4, r0
 800a942:	d001      	beq.n	800a948 <cleanup_stdio+0x10>
 800a944:	f001 f86e 	bl	800ba24 <_fflush_r>
 800a948:	68a1      	ldr	r1, [r4, #8]
 800a94a:	4b09      	ldr	r3, [pc, #36]	; (800a970 <cleanup_stdio+0x38>)
 800a94c:	4299      	cmp	r1, r3
 800a94e:	d002      	beq.n	800a956 <cleanup_stdio+0x1e>
 800a950:	4620      	mov	r0, r4
 800a952:	f001 f867 	bl	800ba24 <_fflush_r>
 800a956:	68e1      	ldr	r1, [r4, #12]
 800a958:	4b06      	ldr	r3, [pc, #24]	; (800a974 <cleanup_stdio+0x3c>)
 800a95a:	4299      	cmp	r1, r3
 800a95c:	d004      	beq.n	800a968 <cleanup_stdio+0x30>
 800a95e:	4620      	mov	r0, r4
 800a960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a964:	f001 b85e 	b.w	800ba24 <_fflush_r>
 800a968:	bd10      	pop	{r4, pc}
 800a96a:	bf00      	nop
 800a96c:	20002110 	.word	0x20002110
 800a970:	20002178 	.word	0x20002178
 800a974:	200021e0 	.word	0x200021e0

0800a978 <global_stdio_init.part.0>:
 800a978:	b510      	push	{r4, lr}
 800a97a:	4b0b      	ldr	r3, [pc, #44]	; (800a9a8 <global_stdio_init.part.0+0x30>)
 800a97c:	4c0b      	ldr	r4, [pc, #44]	; (800a9ac <global_stdio_init.part.0+0x34>)
 800a97e:	4a0c      	ldr	r2, [pc, #48]	; (800a9b0 <global_stdio_init.part.0+0x38>)
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	4620      	mov	r0, r4
 800a984:	2200      	movs	r2, #0
 800a986:	2104      	movs	r1, #4
 800a988:	f7ff ff94 	bl	800a8b4 <std>
 800a98c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a990:	2201      	movs	r2, #1
 800a992:	2109      	movs	r1, #9
 800a994:	f7ff ff8e 	bl	800a8b4 <std>
 800a998:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a99c:	2202      	movs	r2, #2
 800a99e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a2:	2112      	movs	r1, #18
 800a9a4:	f7ff bf86 	b.w	800a8b4 <std>
 800a9a8:	20002248 	.word	0x20002248
 800a9ac:	20002110 	.word	0x20002110
 800a9b0:	0800a921 	.word	0x0800a921

0800a9b4 <__sfp_lock_acquire>:
 800a9b4:	4801      	ldr	r0, [pc, #4]	; (800a9bc <__sfp_lock_acquire+0x8>)
 800a9b6:	f000 bbf0 	b.w	800b19a <__retarget_lock_acquire_recursive>
 800a9ba:	bf00      	nop
 800a9bc:	2000224d 	.word	0x2000224d

0800a9c0 <__sfp_lock_release>:
 800a9c0:	4801      	ldr	r0, [pc, #4]	; (800a9c8 <__sfp_lock_release+0x8>)
 800a9c2:	f000 bbeb 	b.w	800b19c <__retarget_lock_release_recursive>
 800a9c6:	bf00      	nop
 800a9c8:	2000224d 	.word	0x2000224d

0800a9cc <__sinit>:
 800a9cc:	b510      	push	{r4, lr}
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	f7ff fff0 	bl	800a9b4 <__sfp_lock_acquire>
 800a9d4:	6a23      	ldr	r3, [r4, #32]
 800a9d6:	b11b      	cbz	r3, 800a9e0 <__sinit+0x14>
 800a9d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9dc:	f7ff bff0 	b.w	800a9c0 <__sfp_lock_release>
 800a9e0:	4b04      	ldr	r3, [pc, #16]	; (800a9f4 <__sinit+0x28>)
 800a9e2:	6223      	str	r3, [r4, #32]
 800a9e4:	4b04      	ldr	r3, [pc, #16]	; (800a9f8 <__sinit+0x2c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d1f5      	bne.n	800a9d8 <__sinit+0xc>
 800a9ec:	f7ff ffc4 	bl	800a978 <global_stdio_init.part.0>
 800a9f0:	e7f2      	b.n	800a9d8 <__sinit+0xc>
 800a9f2:	bf00      	nop
 800a9f4:	0800a939 	.word	0x0800a939
 800a9f8:	20002248 	.word	0x20002248

0800a9fc <_fwalk_sglue>:
 800a9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa00:	4607      	mov	r7, r0
 800aa02:	4688      	mov	r8, r1
 800aa04:	4614      	mov	r4, r2
 800aa06:	2600      	movs	r6, #0
 800aa08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa0c:	f1b9 0901 	subs.w	r9, r9, #1
 800aa10:	d505      	bpl.n	800aa1e <_fwalk_sglue+0x22>
 800aa12:	6824      	ldr	r4, [r4, #0]
 800aa14:	2c00      	cmp	r4, #0
 800aa16:	d1f7      	bne.n	800aa08 <_fwalk_sglue+0xc>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d907      	bls.n	800aa34 <_fwalk_sglue+0x38>
 800aa24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa28:	3301      	adds	r3, #1
 800aa2a:	d003      	beq.n	800aa34 <_fwalk_sglue+0x38>
 800aa2c:	4629      	mov	r1, r5
 800aa2e:	4638      	mov	r0, r7
 800aa30:	47c0      	blx	r8
 800aa32:	4306      	orrs	r6, r0
 800aa34:	3568      	adds	r5, #104	; 0x68
 800aa36:	e7e9      	b.n	800aa0c <_fwalk_sglue+0x10>

0800aa38 <_vsiprintf_r>:
 800aa38:	b500      	push	{lr}
 800aa3a:	b09b      	sub	sp, #108	; 0x6c
 800aa3c:	9100      	str	r1, [sp, #0]
 800aa3e:	9104      	str	r1, [sp, #16]
 800aa40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa44:	9105      	str	r1, [sp, #20]
 800aa46:	9102      	str	r1, [sp, #8]
 800aa48:	4905      	ldr	r1, [pc, #20]	; (800aa60 <_vsiprintf_r+0x28>)
 800aa4a:	9103      	str	r1, [sp, #12]
 800aa4c:	4669      	mov	r1, sp
 800aa4e:	f000 fc2d 	bl	800b2ac <_svfiprintf_r>
 800aa52:	9b00      	ldr	r3, [sp, #0]
 800aa54:	2200      	movs	r2, #0
 800aa56:	701a      	strb	r2, [r3, #0]
 800aa58:	b01b      	add	sp, #108	; 0x6c
 800aa5a:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa5e:	bf00      	nop
 800aa60:	ffff0208 	.word	0xffff0208

0800aa64 <vsiprintf>:
 800aa64:	4613      	mov	r3, r2
 800aa66:	460a      	mov	r2, r1
 800aa68:	4601      	mov	r1, r0
 800aa6a:	4802      	ldr	r0, [pc, #8]	; (800aa74 <vsiprintf+0x10>)
 800aa6c:	6800      	ldr	r0, [r0, #0]
 800aa6e:	f7ff bfe3 	b.w	800aa38 <_vsiprintf_r>
 800aa72:	bf00      	nop
 800aa74:	20000178 	.word	0x20000178

0800aa78 <_perror_r>:
 800aa78:	6a03      	ldr	r3, [r0, #32]
 800aa7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa7c:	68c4      	ldr	r4, [r0, #12]
 800aa7e:	4605      	mov	r5, r0
 800aa80:	460e      	mov	r6, r1
 800aa82:	b90b      	cbnz	r3, 800aa88 <_perror_r+0x10>
 800aa84:	f7ff ffa2 	bl	800a9cc <__sinit>
 800aa88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa8a:	07d8      	lsls	r0, r3, #31
 800aa8c:	d405      	bmi.n	800aa9a <_perror_r+0x22>
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	0599      	lsls	r1, r3, #22
 800aa92:	d402      	bmi.n	800aa9a <_perror_r+0x22>
 800aa94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa96:	f000 fb80 	bl	800b19a <__retarget_lock_acquire_recursive>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	f000 ffc1 	bl	800ba24 <_fflush_r>
 800aaa2:	bb1e      	cbnz	r6, 800aaec <_perror_r+0x74>
 800aaa4:	6829      	ldr	r1, [r5, #0]
 800aaa6:	ab01      	add	r3, sp, #4
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f000 f872 	bl	800ab94 <_strerror_r>
 800aab0:	4607      	mov	r7, r0
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d145      	bne.n	800ab42 <_perror_r+0xca>
 800aab6:	4831      	ldr	r0, [pc, #196]	; (800ab7c <_perror_r+0x104>)
 800aab8:	4f30      	ldr	r7, [pc, #192]	; (800ab7c <_perror_r+0x104>)
 800aaba:	f7f5 fb91 	bl	80001e0 <strlen>
 800aabe:	4606      	mov	r6, r0
 800aac0:	b156      	cbz	r6, 800aad8 <_perror_r+0x60>
 800aac2:	4620      	mov	r0, r4
 800aac4:	f001 f826 	bl	800bb14 <fileno>
 800aac8:	4633      	mov	r3, r6
 800aaca:	4601      	mov	r1, r0
 800aacc:	463a      	mov	r2, r7
 800aace:	4628      	mov	r0, r5
 800aad0:	f000 fb26 	bl	800b120 <_write_r>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	da47      	bge.n	800ab68 <_perror_r+0xf0>
 800aad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aadc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aae2:	07d2      	lsls	r2, r2, #31
 800aae4:	81a3      	strh	r3, [r4, #12]
 800aae6:	d542      	bpl.n	800ab6e <_perror_r+0xf6>
 800aae8:	b003      	add	sp, #12
 800aaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aaec:	7833      	ldrb	r3, [r6, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0d8      	beq.n	800aaa4 <_perror_r+0x2c>
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7f5 fb74 	bl	80001e0 <strlen>
 800aaf8:	4607      	mov	r7, r0
 800aafa:	b157      	cbz	r7, 800ab12 <_perror_r+0x9a>
 800aafc:	4620      	mov	r0, r4
 800aafe:	f001 f809 	bl	800bb14 <fileno>
 800ab02:	463b      	mov	r3, r7
 800ab04:	4601      	mov	r1, r0
 800ab06:	4632      	mov	r2, r6
 800ab08:	4628      	mov	r0, r5
 800ab0a:	f000 fb09 	bl	800b120 <_write_r>
 800ab0e:	2800      	cmp	r0, #0
 800ab10:	da14      	bge.n	800ab3c <_perror_r+0xc4>
 800ab12:	481b      	ldr	r0, [pc, #108]	; (800ab80 <_perror_r+0x108>)
 800ab14:	4f1a      	ldr	r7, [pc, #104]	; (800ab80 <_perror_r+0x108>)
 800ab16:	f7f5 fb63 	bl	80001e0 <strlen>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	2e00      	cmp	r6, #0
 800ab1e:	d0c1      	beq.n	800aaa4 <_perror_r+0x2c>
 800ab20:	4620      	mov	r0, r4
 800ab22:	f000 fff7 	bl	800bb14 <fileno>
 800ab26:	4633      	mov	r3, r6
 800ab28:	4601      	mov	r1, r0
 800ab2a:	463a      	mov	r2, r7
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f000 faf7 	bl	800b120 <_write_r>
 800ab32:	2800      	cmp	r0, #0
 800ab34:	dbb6      	blt.n	800aaa4 <_perror_r+0x2c>
 800ab36:	1a36      	subs	r6, r6, r0
 800ab38:	4407      	add	r7, r0
 800ab3a:	e7ef      	b.n	800ab1c <_perror_r+0xa4>
 800ab3c:	1a3f      	subs	r7, r7, r0
 800ab3e:	4406      	add	r6, r0
 800ab40:	e7db      	b.n	800aafa <_perror_r+0x82>
 800ab42:	f7f5 fb4d 	bl	80001e0 <strlen>
 800ab46:	4606      	mov	r6, r0
 800ab48:	2e00      	cmp	r6, #0
 800ab4a:	d0b4      	beq.n	800aab6 <_perror_r+0x3e>
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 ffe1 	bl	800bb14 <fileno>
 800ab52:	4633      	mov	r3, r6
 800ab54:	4601      	mov	r1, r0
 800ab56:	463a      	mov	r2, r7
 800ab58:	4628      	mov	r0, r5
 800ab5a:	f000 fae1 	bl	800b120 <_write_r>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	dba9      	blt.n	800aab6 <_perror_r+0x3e>
 800ab62:	1a36      	subs	r6, r6, r0
 800ab64:	4407      	add	r7, r0
 800ab66:	e7ef      	b.n	800ab48 <_perror_r+0xd0>
 800ab68:	1a36      	subs	r6, r6, r0
 800ab6a:	4407      	add	r7, r0
 800ab6c:	e7a8      	b.n	800aac0 <_perror_r+0x48>
 800ab6e:	059b      	lsls	r3, r3, #22
 800ab70:	d4ba      	bmi.n	800aae8 <_perror_r+0x70>
 800ab72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab74:	f000 fb12 	bl	800b19c <__retarget_lock_release_recursive>
 800ab78:	e7b6      	b.n	800aae8 <_perror_r+0x70>
 800ab7a:	bf00      	nop
 800ab7c:	0800d8ab 	.word	0x0800d8ab
 800ab80:	0800d87b 	.word	0x0800d87b

0800ab84 <perror>:
 800ab84:	4b02      	ldr	r3, [pc, #8]	; (800ab90 <perror+0xc>)
 800ab86:	4601      	mov	r1, r0
 800ab88:	6818      	ldr	r0, [r3, #0]
 800ab8a:	f7ff bf75 	b.w	800aa78 <_perror_r>
 800ab8e:	bf00      	nop
 800ab90:	20000178 	.word	0x20000178

0800ab94 <_strerror_r>:
 800ab94:	b510      	push	{r4, lr}
 800ab96:	4604      	mov	r4, r0
 800ab98:	4608      	mov	r0, r1
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	288e      	cmp	r0, #142	; 0x8e
 800ab9e:	f200 8130 	bhi.w	800ae02 <_strerror_r+0x26e>
 800aba2:	e8df f010 	tbh	[pc, r0, lsl #1]
 800aba6:	0139      	.short	0x0139
 800aba8:	0092008f 	.word	0x0092008f
 800abac:	00960094 	.word	0x00960094
 800abb0:	009a0098 	.word	0x009a0098
 800abb4:	009e009c 	.word	0x009e009c
 800abb8:	00a400a2 	.word	0x00a400a2
 800abbc:	00aa00a8 	.word	0x00aa00a8
 800abc0:	00ae00ac 	.word	0x00ae00ac
 800abc4:	00b0012e 	.word	0x00b0012e
 800abc8:	00b400b2 	.word	0x00b400b2
 800abcc:	00b800b6 	.word	0x00b800b6
 800abd0:	00c000be 	.word	0x00c000be
 800abd4:	00c800c6 	.word	0x00c800c6
 800abd8:	00cc00ca 	.word	0x00cc00ca
 800abdc:	00d200ce 	.word	0x00d200ce
 800abe0:	00d800d6 	.word	0x00d800d6
 800abe4:	00dc00da 	.word	0x00dc00da
 800abe8:	00e000de 	.word	0x00e000de
 800abec:	00e400e2 	.word	0x00e400e2
 800abf0:	012e012e 	.word	0x012e012e
 800abf4:	012e012e 	.word	0x012e012e
 800abf8:	012e012e 	.word	0x012e012e
 800abfc:	012e012e 	.word	0x012e012e
 800ac00:	00ec00e8 	.word	0x00ec00e8
 800ac04:	012e012e 	.word	0x012e012e
 800ac08:	012e012e 	.word	0x012e012e
 800ac0c:	012e012e 	.word	0x012e012e
 800ac10:	012e012e 	.word	0x012e012e
 800ac14:	012e012e 	.word	0x012e012e
 800ac18:	012e012e 	.word	0x012e012e
 800ac1c:	00ee012e 	.word	0x00ee012e
 800ac20:	00f00108 	.word	0x00f00108
 800ac24:	012e00f2 	.word	0x012e00f2
 800ac28:	012e012e 	.word	0x012e012e
 800ac2c:	012e00f4 	.word	0x012e00f4
 800ac30:	012e012e 	.word	0x012e012e
 800ac34:	012e00f6 	.word	0x012e00f6
 800ac38:	00fa012e 	.word	0x00fa012e
 800ac3c:	012e012e 	.word	0x012e012e
 800ac40:	012e00fc 	.word	0x012e00fc
 800ac44:	012e012e 	.word	0x012e012e
 800ac48:	012e012e 	.word	0x012e012e
 800ac4c:	012e012e 	.word	0x012e012e
 800ac50:	012e012e 	.word	0x012e012e
 800ac54:	00fe012e 	.word	0x00fe012e
 800ac58:	0100012e 	.word	0x0100012e
 800ac5c:	01040102 	.word	0x01040102
 800ac60:	012e012e 	.word	0x012e012e
 800ac64:	012e0126 	.word	0x012e0126
 800ac68:	012e012e 	.word	0x012e012e
 800ac6c:	012e012e 	.word	0x012e012e
 800ac70:	012e012e 	.word	0x012e012e
 800ac74:	0114012e 	.word	0x0114012e
 800ac78:	010a0106 	.word	0x010a0106
 800ac7c:	010e010c 	.word	0x010e010c
 800ac80:	012e0110 	.word	0x012e0110
 800ac84:	01160112 	.word	0x01160112
 800ac88:	00ea011a 	.word	0x00ea011a
 800ac8c:	012c00c2 	.word	0x012c00c2
 800ac90:	00d000ba 	.word	0x00d000ba
 800ac94:	00a000bc 	.word	0x00a000bc
 800ac98:	012a00a6 	.word	0x012a00a6
 800ac9c:	012e00f8 	.word	0x012e00f8
 800aca0:	00c40118 	.word	0x00c40118
 800aca4:	011c011e 	.word	0x011c011e
 800aca8:	012e012e 	.word	0x012e012e
 800acac:	012e012e 	.word	0x012e012e
 800acb0:	00d4012e 	.word	0x00d4012e
 800acb4:	012e012e 	.word	0x012e012e
 800acb8:	00e6012e 	.word	0x00e6012e
 800acbc:	01200128 	.word	0x01200128
 800acc0:	01240122 	.word	0x01240122
 800acc4:	4b55      	ldr	r3, [pc, #340]	; (800ae1c <_strerror_r+0x288>)
 800acc6:	4618      	mov	r0, r3
 800acc8:	bd10      	pop	{r4, pc}
 800acca:	4b55      	ldr	r3, [pc, #340]	; (800ae20 <_strerror_r+0x28c>)
 800accc:	e7fb      	b.n	800acc6 <_strerror_r+0x132>
 800acce:	4b55      	ldr	r3, [pc, #340]	; (800ae24 <_strerror_r+0x290>)
 800acd0:	e7f9      	b.n	800acc6 <_strerror_r+0x132>
 800acd2:	4b55      	ldr	r3, [pc, #340]	; (800ae28 <_strerror_r+0x294>)
 800acd4:	e7f7      	b.n	800acc6 <_strerror_r+0x132>
 800acd6:	4b55      	ldr	r3, [pc, #340]	; (800ae2c <_strerror_r+0x298>)
 800acd8:	e7f5      	b.n	800acc6 <_strerror_r+0x132>
 800acda:	4b55      	ldr	r3, [pc, #340]	; (800ae30 <_strerror_r+0x29c>)
 800acdc:	e7f3      	b.n	800acc6 <_strerror_r+0x132>
 800acde:	4b55      	ldr	r3, [pc, #340]	; (800ae34 <_strerror_r+0x2a0>)
 800ace0:	e7f1      	b.n	800acc6 <_strerror_r+0x132>
 800ace2:	4b55      	ldr	r3, [pc, #340]	; (800ae38 <_strerror_r+0x2a4>)
 800ace4:	e7ef      	b.n	800acc6 <_strerror_r+0x132>
 800ace6:	4b55      	ldr	r3, [pc, #340]	; (800ae3c <_strerror_r+0x2a8>)
 800ace8:	e7ed      	b.n	800acc6 <_strerror_r+0x132>
 800acea:	4b55      	ldr	r3, [pc, #340]	; (800ae40 <_strerror_r+0x2ac>)
 800acec:	e7eb      	b.n	800acc6 <_strerror_r+0x132>
 800acee:	4b55      	ldr	r3, [pc, #340]	; (800ae44 <_strerror_r+0x2b0>)
 800acf0:	e7e9      	b.n	800acc6 <_strerror_r+0x132>
 800acf2:	4b55      	ldr	r3, [pc, #340]	; (800ae48 <_strerror_r+0x2b4>)
 800acf4:	e7e7      	b.n	800acc6 <_strerror_r+0x132>
 800acf6:	4b55      	ldr	r3, [pc, #340]	; (800ae4c <_strerror_r+0x2b8>)
 800acf8:	e7e5      	b.n	800acc6 <_strerror_r+0x132>
 800acfa:	4b55      	ldr	r3, [pc, #340]	; (800ae50 <_strerror_r+0x2bc>)
 800acfc:	e7e3      	b.n	800acc6 <_strerror_r+0x132>
 800acfe:	4b55      	ldr	r3, [pc, #340]	; (800ae54 <_strerror_r+0x2c0>)
 800ad00:	e7e1      	b.n	800acc6 <_strerror_r+0x132>
 800ad02:	4b55      	ldr	r3, [pc, #340]	; (800ae58 <_strerror_r+0x2c4>)
 800ad04:	e7df      	b.n	800acc6 <_strerror_r+0x132>
 800ad06:	4b55      	ldr	r3, [pc, #340]	; (800ae5c <_strerror_r+0x2c8>)
 800ad08:	e7dd      	b.n	800acc6 <_strerror_r+0x132>
 800ad0a:	4b55      	ldr	r3, [pc, #340]	; (800ae60 <_strerror_r+0x2cc>)
 800ad0c:	e7db      	b.n	800acc6 <_strerror_r+0x132>
 800ad0e:	4b55      	ldr	r3, [pc, #340]	; (800ae64 <_strerror_r+0x2d0>)
 800ad10:	e7d9      	b.n	800acc6 <_strerror_r+0x132>
 800ad12:	4b55      	ldr	r3, [pc, #340]	; (800ae68 <_strerror_r+0x2d4>)
 800ad14:	e7d7      	b.n	800acc6 <_strerror_r+0x132>
 800ad16:	4b55      	ldr	r3, [pc, #340]	; (800ae6c <_strerror_r+0x2d8>)
 800ad18:	e7d5      	b.n	800acc6 <_strerror_r+0x132>
 800ad1a:	4b55      	ldr	r3, [pc, #340]	; (800ae70 <_strerror_r+0x2dc>)
 800ad1c:	e7d3      	b.n	800acc6 <_strerror_r+0x132>
 800ad1e:	4b55      	ldr	r3, [pc, #340]	; (800ae74 <_strerror_r+0x2e0>)
 800ad20:	e7d1      	b.n	800acc6 <_strerror_r+0x132>
 800ad22:	4b55      	ldr	r3, [pc, #340]	; (800ae78 <_strerror_r+0x2e4>)
 800ad24:	e7cf      	b.n	800acc6 <_strerror_r+0x132>
 800ad26:	4b55      	ldr	r3, [pc, #340]	; (800ae7c <_strerror_r+0x2e8>)
 800ad28:	e7cd      	b.n	800acc6 <_strerror_r+0x132>
 800ad2a:	4b55      	ldr	r3, [pc, #340]	; (800ae80 <_strerror_r+0x2ec>)
 800ad2c:	e7cb      	b.n	800acc6 <_strerror_r+0x132>
 800ad2e:	4b55      	ldr	r3, [pc, #340]	; (800ae84 <_strerror_r+0x2f0>)
 800ad30:	e7c9      	b.n	800acc6 <_strerror_r+0x132>
 800ad32:	4b55      	ldr	r3, [pc, #340]	; (800ae88 <_strerror_r+0x2f4>)
 800ad34:	e7c7      	b.n	800acc6 <_strerror_r+0x132>
 800ad36:	4b55      	ldr	r3, [pc, #340]	; (800ae8c <_strerror_r+0x2f8>)
 800ad38:	e7c5      	b.n	800acc6 <_strerror_r+0x132>
 800ad3a:	4b55      	ldr	r3, [pc, #340]	; (800ae90 <_strerror_r+0x2fc>)
 800ad3c:	e7c3      	b.n	800acc6 <_strerror_r+0x132>
 800ad3e:	4b55      	ldr	r3, [pc, #340]	; (800ae94 <_strerror_r+0x300>)
 800ad40:	e7c1      	b.n	800acc6 <_strerror_r+0x132>
 800ad42:	4b55      	ldr	r3, [pc, #340]	; (800ae98 <_strerror_r+0x304>)
 800ad44:	e7bf      	b.n	800acc6 <_strerror_r+0x132>
 800ad46:	4b55      	ldr	r3, [pc, #340]	; (800ae9c <_strerror_r+0x308>)
 800ad48:	e7bd      	b.n	800acc6 <_strerror_r+0x132>
 800ad4a:	4b55      	ldr	r3, [pc, #340]	; (800aea0 <_strerror_r+0x30c>)
 800ad4c:	e7bb      	b.n	800acc6 <_strerror_r+0x132>
 800ad4e:	4b55      	ldr	r3, [pc, #340]	; (800aea4 <_strerror_r+0x310>)
 800ad50:	e7b9      	b.n	800acc6 <_strerror_r+0x132>
 800ad52:	4b55      	ldr	r3, [pc, #340]	; (800aea8 <_strerror_r+0x314>)
 800ad54:	e7b7      	b.n	800acc6 <_strerror_r+0x132>
 800ad56:	4b55      	ldr	r3, [pc, #340]	; (800aeac <_strerror_r+0x318>)
 800ad58:	e7b5      	b.n	800acc6 <_strerror_r+0x132>
 800ad5a:	4b55      	ldr	r3, [pc, #340]	; (800aeb0 <_strerror_r+0x31c>)
 800ad5c:	e7b3      	b.n	800acc6 <_strerror_r+0x132>
 800ad5e:	4b55      	ldr	r3, [pc, #340]	; (800aeb4 <_strerror_r+0x320>)
 800ad60:	e7b1      	b.n	800acc6 <_strerror_r+0x132>
 800ad62:	4b55      	ldr	r3, [pc, #340]	; (800aeb8 <_strerror_r+0x324>)
 800ad64:	e7af      	b.n	800acc6 <_strerror_r+0x132>
 800ad66:	4b55      	ldr	r3, [pc, #340]	; (800aebc <_strerror_r+0x328>)
 800ad68:	e7ad      	b.n	800acc6 <_strerror_r+0x132>
 800ad6a:	4b55      	ldr	r3, [pc, #340]	; (800aec0 <_strerror_r+0x32c>)
 800ad6c:	e7ab      	b.n	800acc6 <_strerror_r+0x132>
 800ad6e:	4b55      	ldr	r3, [pc, #340]	; (800aec4 <_strerror_r+0x330>)
 800ad70:	e7a9      	b.n	800acc6 <_strerror_r+0x132>
 800ad72:	4b55      	ldr	r3, [pc, #340]	; (800aec8 <_strerror_r+0x334>)
 800ad74:	e7a7      	b.n	800acc6 <_strerror_r+0x132>
 800ad76:	4b55      	ldr	r3, [pc, #340]	; (800aecc <_strerror_r+0x338>)
 800ad78:	e7a5      	b.n	800acc6 <_strerror_r+0x132>
 800ad7a:	4b55      	ldr	r3, [pc, #340]	; (800aed0 <_strerror_r+0x33c>)
 800ad7c:	e7a3      	b.n	800acc6 <_strerror_r+0x132>
 800ad7e:	4b55      	ldr	r3, [pc, #340]	; (800aed4 <_strerror_r+0x340>)
 800ad80:	e7a1      	b.n	800acc6 <_strerror_r+0x132>
 800ad82:	4b55      	ldr	r3, [pc, #340]	; (800aed8 <_strerror_r+0x344>)
 800ad84:	e79f      	b.n	800acc6 <_strerror_r+0x132>
 800ad86:	4b55      	ldr	r3, [pc, #340]	; (800aedc <_strerror_r+0x348>)
 800ad88:	e79d      	b.n	800acc6 <_strerror_r+0x132>
 800ad8a:	4b55      	ldr	r3, [pc, #340]	; (800aee0 <_strerror_r+0x34c>)
 800ad8c:	e79b      	b.n	800acc6 <_strerror_r+0x132>
 800ad8e:	4b55      	ldr	r3, [pc, #340]	; (800aee4 <_strerror_r+0x350>)
 800ad90:	e799      	b.n	800acc6 <_strerror_r+0x132>
 800ad92:	4b55      	ldr	r3, [pc, #340]	; (800aee8 <_strerror_r+0x354>)
 800ad94:	e797      	b.n	800acc6 <_strerror_r+0x132>
 800ad96:	4b55      	ldr	r3, [pc, #340]	; (800aeec <_strerror_r+0x358>)
 800ad98:	e795      	b.n	800acc6 <_strerror_r+0x132>
 800ad9a:	4b55      	ldr	r3, [pc, #340]	; (800aef0 <_strerror_r+0x35c>)
 800ad9c:	e793      	b.n	800acc6 <_strerror_r+0x132>
 800ad9e:	4b55      	ldr	r3, [pc, #340]	; (800aef4 <_strerror_r+0x360>)
 800ada0:	e791      	b.n	800acc6 <_strerror_r+0x132>
 800ada2:	4b55      	ldr	r3, [pc, #340]	; (800aef8 <_strerror_r+0x364>)
 800ada4:	e78f      	b.n	800acc6 <_strerror_r+0x132>
 800ada6:	4b55      	ldr	r3, [pc, #340]	; (800aefc <_strerror_r+0x368>)
 800ada8:	e78d      	b.n	800acc6 <_strerror_r+0x132>
 800adaa:	4b55      	ldr	r3, [pc, #340]	; (800af00 <_strerror_r+0x36c>)
 800adac:	e78b      	b.n	800acc6 <_strerror_r+0x132>
 800adae:	4b55      	ldr	r3, [pc, #340]	; (800af04 <_strerror_r+0x370>)
 800adb0:	e789      	b.n	800acc6 <_strerror_r+0x132>
 800adb2:	4b55      	ldr	r3, [pc, #340]	; (800af08 <_strerror_r+0x374>)
 800adb4:	e787      	b.n	800acc6 <_strerror_r+0x132>
 800adb6:	4b55      	ldr	r3, [pc, #340]	; (800af0c <_strerror_r+0x378>)
 800adb8:	e785      	b.n	800acc6 <_strerror_r+0x132>
 800adba:	4b55      	ldr	r3, [pc, #340]	; (800af10 <_strerror_r+0x37c>)
 800adbc:	e783      	b.n	800acc6 <_strerror_r+0x132>
 800adbe:	4b55      	ldr	r3, [pc, #340]	; (800af14 <_strerror_r+0x380>)
 800adc0:	e781      	b.n	800acc6 <_strerror_r+0x132>
 800adc2:	4b55      	ldr	r3, [pc, #340]	; (800af18 <_strerror_r+0x384>)
 800adc4:	e77f      	b.n	800acc6 <_strerror_r+0x132>
 800adc6:	4b55      	ldr	r3, [pc, #340]	; (800af1c <_strerror_r+0x388>)
 800adc8:	e77d      	b.n	800acc6 <_strerror_r+0x132>
 800adca:	4b55      	ldr	r3, [pc, #340]	; (800af20 <_strerror_r+0x38c>)
 800adcc:	e77b      	b.n	800acc6 <_strerror_r+0x132>
 800adce:	4b55      	ldr	r3, [pc, #340]	; (800af24 <_strerror_r+0x390>)
 800add0:	e779      	b.n	800acc6 <_strerror_r+0x132>
 800add2:	4b55      	ldr	r3, [pc, #340]	; (800af28 <_strerror_r+0x394>)
 800add4:	e777      	b.n	800acc6 <_strerror_r+0x132>
 800add6:	4b55      	ldr	r3, [pc, #340]	; (800af2c <_strerror_r+0x398>)
 800add8:	e775      	b.n	800acc6 <_strerror_r+0x132>
 800adda:	4b55      	ldr	r3, [pc, #340]	; (800af30 <_strerror_r+0x39c>)
 800addc:	e773      	b.n	800acc6 <_strerror_r+0x132>
 800adde:	4b55      	ldr	r3, [pc, #340]	; (800af34 <_strerror_r+0x3a0>)
 800ade0:	e771      	b.n	800acc6 <_strerror_r+0x132>
 800ade2:	4b55      	ldr	r3, [pc, #340]	; (800af38 <_strerror_r+0x3a4>)
 800ade4:	e76f      	b.n	800acc6 <_strerror_r+0x132>
 800ade6:	4b55      	ldr	r3, [pc, #340]	; (800af3c <_strerror_r+0x3a8>)
 800ade8:	e76d      	b.n	800acc6 <_strerror_r+0x132>
 800adea:	4b55      	ldr	r3, [pc, #340]	; (800af40 <_strerror_r+0x3ac>)
 800adec:	e76b      	b.n	800acc6 <_strerror_r+0x132>
 800adee:	4b55      	ldr	r3, [pc, #340]	; (800af44 <_strerror_r+0x3b0>)
 800adf0:	e769      	b.n	800acc6 <_strerror_r+0x132>
 800adf2:	4b55      	ldr	r3, [pc, #340]	; (800af48 <_strerror_r+0x3b4>)
 800adf4:	e767      	b.n	800acc6 <_strerror_r+0x132>
 800adf6:	4b55      	ldr	r3, [pc, #340]	; (800af4c <_strerror_r+0x3b8>)
 800adf8:	e765      	b.n	800acc6 <_strerror_r+0x132>
 800adfa:	4b55      	ldr	r3, [pc, #340]	; (800af50 <_strerror_r+0x3bc>)
 800adfc:	e763      	b.n	800acc6 <_strerror_r+0x132>
 800adfe:	4b55      	ldr	r3, [pc, #340]	; (800af54 <_strerror_r+0x3c0>)
 800ae00:	e761      	b.n	800acc6 <_strerror_r+0x132>
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	bf14      	ite	ne
 800ae06:	461a      	movne	r2, r3
 800ae08:	4622      	moveq	r2, r4
 800ae0a:	f000 f8bb 	bl	800af84 <_user_strerror>
 800ae0e:	4b52      	ldr	r3, [pc, #328]	; (800af58 <_strerror_r+0x3c4>)
 800ae10:	2800      	cmp	r0, #0
 800ae12:	bf18      	it	ne
 800ae14:	4603      	movne	r3, r0
 800ae16:	e756      	b.n	800acc6 <_strerror_r+0x132>
 800ae18:	4b50      	ldr	r3, [pc, #320]	; (800af5c <_strerror_r+0x3c8>)
 800ae1a:	e754      	b.n	800acc6 <_strerror_r+0x132>
 800ae1c:	0800d174 	.word	0x0800d174
 800ae20:	0800d17e 	.word	0x0800d17e
 800ae24:	0800d198 	.word	0x0800d198
 800ae28:	0800d1a8 	.word	0x0800d1a8
 800ae2c:	0800d1c0 	.word	0x0800d1c0
 800ae30:	0800d1ca 	.word	0x0800d1ca
 800ae34:	0800d1e4 	.word	0x0800d1e4
 800ae38:	0800d1f6 	.word	0x0800d1f6
 800ae3c:	0800d208 	.word	0x0800d208
 800ae40:	0800d221 	.word	0x0800d221
 800ae44:	0800d231 	.word	0x0800d231
 800ae48:	0800d23d 	.word	0x0800d23d
 800ae4c:	0800d25a 	.word	0x0800d25a
 800ae50:	0800d26c 	.word	0x0800d26c
 800ae54:	0800d27d 	.word	0x0800d27d
 800ae58:	0800d28f 	.word	0x0800d28f
 800ae5c:	0800d29b 	.word	0x0800d29b
 800ae60:	0800d2b3 	.word	0x0800d2b3
 800ae64:	0800d2bf 	.word	0x0800d2bf
 800ae68:	0800d2d1 	.word	0x0800d2d1
 800ae6c:	0800d2e0 	.word	0x0800d2e0
 800ae70:	0800d2f0 	.word	0x0800d2f0
 800ae74:	0800d2fd 	.word	0x0800d2fd
 800ae78:	0800d31c 	.word	0x0800d31c
 800ae7c:	0800d32b 	.word	0x0800d32b
 800ae80:	0800d33c 	.word	0x0800d33c
 800ae84:	0800d360 	.word	0x0800d360
 800ae88:	0800d37e 	.word	0x0800d37e
 800ae8c:	0800d39c 	.word	0x0800d39c
 800ae90:	0800d3bc 	.word	0x0800d3bc
 800ae94:	0800d3d3 	.word	0x0800d3d3
 800ae98:	0800d3e2 	.word	0x0800d3e2
 800ae9c:	0800d3f1 	.word	0x0800d3f1
 800aea0:	0800d405 	.word	0x0800d405
 800aea4:	0800d41d 	.word	0x0800d41d
 800aea8:	0800d42b 	.word	0x0800d42b
 800aeac:	0800d438 	.word	0x0800d438
 800aeb0:	0800d44e 	.word	0x0800d44e
 800aeb4:	0800d45d 	.word	0x0800d45d
 800aeb8:	0800d469 	.word	0x0800d469
 800aebc:	0800d498 	.word	0x0800d498
 800aec0:	0800d4a9 	.word	0x0800d4a9
 800aec4:	0800d4c4 	.word	0x0800d4c4
 800aec8:	0800d4d7 	.word	0x0800d4d7
 800aecc:	0800d4ed 	.word	0x0800d4ed
 800aed0:	0800d4f6 	.word	0x0800d4f6
 800aed4:	0800d50d 	.word	0x0800d50d
 800aed8:	0800d515 	.word	0x0800d515
 800aedc:	0800d522 	.word	0x0800d522
 800aee0:	0800d537 	.word	0x0800d537
 800aee4:	0800d54b 	.word	0x0800d54b
 800aee8:	0800d563 	.word	0x0800d563
 800aeec:	0800d572 	.word	0x0800d572
 800aef0:	0800d583 	.word	0x0800d583
 800aef4:	0800d596 	.word	0x0800d596
 800aef8:	0800d5a2 	.word	0x0800d5a2
 800aefc:	0800d5bb 	.word	0x0800d5bb
 800af00:	0800d5cf 	.word	0x0800d5cf
 800af04:	0800d5ea 	.word	0x0800d5ea
 800af08:	0800d602 	.word	0x0800d602
 800af0c:	0800d61c 	.word	0x0800d61c
 800af10:	0800d624 	.word	0x0800d624
 800af14:	0800d654 	.word	0x0800d654
 800af18:	0800d673 	.word	0x0800d673
 800af1c:	0800d692 	.word	0x0800d692
 800af20:	0800d6a9 	.word	0x0800d6a9
 800af24:	0800d6bc 	.word	0x0800d6bc
 800af28:	0800d6d5 	.word	0x0800d6d5
 800af2c:	0800d6ec 	.word	0x0800d6ec
 800af30:	0800d702 	.word	0x0800d702
 800af34:	0800d723 	.word	0x0800d723
 800af38:	0800d73b 	.word	0x0800d73b
 800af3c:	0800d757 	.word	0x0800d757
 800af40:	0800d76a 	.word	0x0800d76a
 800af44:	0800d780 	.word	0x0800d780
 800af48:	0800d794 	.word	0x0800d794
 800af4c:	0800d7b6 	.word	0x0800d7b6
 800af50:	0800d7dc 	.word	0x0800d7dc
 800af54:	0800d7ed 	.word	0x0800d7ed
 800af58:	0800d8ac 	.word	0x0800d8ac
 800af5c:	0800d16c 	.word	0x0800d16c

0800af60 <strncmp>:
 800af60:	b510      	push	{r4, lr}
 800af62:	b16a      	cbz	r2, 800af80 <strncmp+0x20>
 800af64:	3901      	subs	r1, #1
 800af66:	1884      	adds	r4, r0, r2
 800af68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800af70:	429a      	cmp	r2, r3
 800af72:	d103      	bne.n	800af7c <strncmp+0x1c>
 800af74:	42a0      	cmp	r0, r4
 800af76:	d001      	beq.n	800af7c <strncmp+0x1c>
 800af78:	2a00      	cmp	r2, #0
 800af7a:	d1f5      	bne.n	800af68 <strncmp+0x8>
 800af7c:	1ad0      	subs	r0, r2, r3
 800af7e:	bd10      	pop	{r4, pc}
 800af80:	4610      	mov	r0, r2
 800af82:	e7fc      	b.n	800af7e <strncmp+0x1e>

0800af84 <_user_strerror>:
 800af84:	2000      	movs	r0, #0
 800af86:	4770      	bx	lr

0800af88 <memset>:
 800af88:	4402      	add	r2, r0
 800af8a:	4603      	mov	r3, r0
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d100      	bne.n	800af92 <memset+0xa>
 800af90:	4770      	bx	lr
 800af92:	f803 1b01 	strb.w	r1, [r3], #1
 800af96:	e7f9      	b.n	800af8c <memset+0x4>

0800af98 <gmtime>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4b0b      	ldr	r3, [pc, #44]	; (800afc8 <gmtime+0x30>)
 800af9c:	681d      	ldr	r5, [r3, #0]
 800af9e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800afa0:	4604      	mov	r4, r0
 800afa2:	b953      	cbnz	r3, 800afba <gmtime+0x22>
 800afa4:	2024      	movs	r0, #36	; 0x24
 800afa6:	f000 fa7f 	bl	800b4a8 <malloc>
 800afaa:	4602      	mov	r2, r0
 800afac:	6368      	str	r0, [r5, #52]	; 0x34
 800afae:	b920      	cbnz	r0, 800afba <gmtime+0x22>
 800afb0:	4b06      	ldr	r3, [pc, #24]	; (800afcc <gmtime+0x34>)
 800afb2:	4807      	ldr	r0, [pc, #28]	; (800afd0 <gmtime+0x38>)
 800afb4:	213d      	movs	r1, #61	; 0x3d
 800afb6:	f000 f901 	bl	800b1bc <__assert_func>
 800afba:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800afbc:	4620      	mov	r0, r4
 800afbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afc2:	f000 b807 	b.w	800afd4 <gmtime_r>
 800afc6:	bf00      	nop
 800afc8:	20000178 	.word	0x20000178
 800afcc:	0800d802 	.word	0x0800d802
 800afd0:	0800d819 	.word	0x0800d819

0800afd4 <gmtime_r>:
 800afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd8:	4a4d      	ldr	r2, [pc, #308]	; (800b110 <gmtime_r+0x13c>)
 800afda:	460c      	mov	r4, r1
 800afdc:	2300      	movs	r3, #0
 800afde:	e9d0 0100 	ldrd	r0, r1, [r0]
 800afe2:	f7f5 f965 	bl	80002b0 <__aeabi_ldivmod>
 800afe6:	2a00      	cmp	r2, #0
 800afe8:	bfbc      	itt	lt
 800afea:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800afee:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800aff2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800aff6:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 800affa:	fbb2 f3f1 	udiv	r3, r2, r1
 800affe:	fb01 2213 	mls	r2, r1, r3, r2
 800b002:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800b006:	bfac      	ite	ge
 800b008:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800b00c:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800b010:	60a3      	str	r3, [r4, #8]
 800b012:	fbb2 f3f1 	udiv	r3, r2, r1
 800b016:	fb01 2213 	mls	r2, r1, r3, r2
 800b01a:	6063      	str	r3, [r4, #4]
 800b01c:	6022      	str	r2, [r4, #0]
 800b01e:	1cc3      	adds	r3, r0, #3
 800b020:	2207      	movs	r2, #7
 800b022:	fb93 f2f2 	sdiv	r2, r3, r2
 800b026:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800b02a:	1a9b      	subs	r3, r3, r2
 800b02c:	bf48      	it	mi
 800b02e:	3307      	addmi	r3, #7
 800b030:	2800      	cmp	r0, #0
 800b032:	61a3      	str	r3, [r4, #24]
 800b034:	bfb8      	it	lt
 800b036:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800b03a:	4936      	ldr	r1, [pc, #216]	; (800b114 <gmtime_r+0x140>)
 800b03c:	bfae      	itee	ge
 800b03e:	fb90 f1f1 	sdivge	r1, r0, r1
 800b042:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800b046:	fb93 f1f1 	sdivlt	r1, r3, r1
 800b04a:	4b33      	ldr	r3, [pc, #204]	; (800b118 <gmtime_r+0x144>)
 800b04c:	fb03 0001 	mla	r0, r3, r1, r0
 800b050:	f648 63ac 	movw	r3, #36524	; 0x8eac
 800b054:	fbb0 f3f3 	udiv	r3, r0, r3
 800b058:	4403      	add	r3, r0
 800b05a:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800b05e:	fbb0 f2fc 	udiv	r2, r0, ip
 800b062:	1a9b      	subs	r3, r3, r2
 800b064:	f240 176d 	movw	r7, #365	; 0x16d
 800b068:	4a2c      	ldr	r2, [pc, #176]	; (800b11c <gmtime_r+0x148>)
 800b06a:	fbb0 f2f2 	udiv	r2, r0, r2
 800b06e:	2664      	movs	r6, #100	; 0x64
 800b070:	1a9b      	subs	r3, r3, r2
 800b072:	fbb3 f2f7 	udiv	r2, r3, r7
 800b076:	fbb3 f3fc 	udiv	r3, r3, ip
 800b07a:	fbb2 f5f6 	udiv	r5, r2, r6
 800b07e:	1aeb      	subs	r3, r5, r3
 800b080:	4403      	add	r3, r0
 800b082:	fb07 3312 	mls	r3, r7, r2, r3
 800b086:	2099      	movs	r0, #153	; 0x99
 800b088:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800b08c:	3702      	adds	r7, #2
 800b08e:	f103 0e01 	add.w	lr, r3, #1
 800b092:	fbb7 fcf0 	udiv	ip, r7, r0
 800b096:	fb00 f00c 	mul.w	r0, r0, ip
 800b09a:	3002      	adds	r0, #2
 800b09c:	f04f 0805 	mov.w	r8, #5
 800b0a0:	fbb0 f0f8 	udiv	r0, r0, r8
 800b0a4:	ebae 0000 	sub.w	r0, lr, r0
 800b0a8:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800b0ac:	4577      	cmp	r7, lr
 800b0ae:	bf94      	ite	ls
 800b0b0:	2702      	movls	r7, #2
 800b0b2:	f06f 0709 	mvnhi.w	r7, #9
 800b0b6:	4467      	add	r7, ip
 800b0b8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800b0bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0c0:	2f01      	cmp	r7, #1
 800b0c2:	bf98      	it	ls
 800b0c4:	3101      	addls	r1, #1
 800b0c6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800b0ca:	d30c      	bcc.n	800b0e6 <gmtime_r+0x112>
 800b0cc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b0d0:	61e3      	str	r3, [r4, #28]
 800b0d2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60e0      	str	r0, [r4, #12]
 800b0da:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800b0de:	6223      	str	r3, [r4, #32]
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e6:	f012 0f03 	tst.w	r2, #3
 800b0ea:	d102      	bne.n	800b0f2 <gmtime_r+0x11e>
 800b0ec:	fb06 2515 	mls	r5, r6, r5, r2
 800b0f0:	b95d      	cbnz	r5, 800b10a <gmtime_r+0x136>
 800b0f2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800b0f6:	fbb2 f6f5 	udiv	r6, r2, r5
 800b0fa:	fb05 2216 	mls	r2, r5, r6, r2
 800b0fe:	fab2 f282 	clz	r2, r2
 800b102:	0952      	lsrs	r2, r2, #5
 800b104:	333b      	adds	r3, #59	; 0x3b
 800b106:	4413      	add	r3, r2
 800b108:	e7e2      	b.n	800b0d0 <gmtime_r+0xfc>
 800b10a:	2201      	movs	r2, #1
 800b10c:	e7fa      	b.n	800b104 <gmtime_r+0x130>
 800b10e:	bf00      	nop
 800b110:	00015180 	.word	0x00015180
 800b114:	00023ab1 	.word	0x00023ab1
 800b118:	fffdc54f 	.word	0xfffdc54f
 800b11c:	00023ab0 	.word	0x00023ab0

0800b120 <_write_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	; (800b140 <_write_r+0x20>)
 800b124:	4604      	mov	r4, r0
 800b126:	4608      	mov	r0, r1
 800b128:	4611      	mov	r1, r2
 800b12a:	2200      	movs	r2, #0
 800b12c:	602a      	str	r2, [r5, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	f7f5 fe59 	bl	8000de6 <_write>
 800b134:	1c43      	adds	r3, r0, #1
 800b136:	d102      	bne.n	800b13e <_write_r+0x1e>
 800b138:	682b      	ldr	r3, [r5, #0]
 800b13a:	b103      	cbz	r3, 800b13e <_write_r+0x1e>
 800b13c:	6023      	str	r3, [r4, #0]
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	20002258 	.word	0x20002258

0800b144 <__errno>:
 800b144:	4b01      	ldr	r3, [pc, #4]	; (800b14c <__errno+0x8>)
 800b146:	6818      	ldr	r0, [r3, #0]
 800b148:	4770      	bx	lr
 800b14a:	bf00      	nop
 800b14c:	20000178 	.word	0x20000178

0800b150 <__libc_init_array>:
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	4d0d      	ldr	r5, [pc, #52]	; (800b188 <__libc_init_array+0x38>)
 800b154:	4c0d      	ldr	r4, [pc, #52]	; (800b18c <__libc_init_array+0x3c>)
 800b156:	1b64      	subs	r4, r4, r5
 800b158:	10a4      	asrs	r4, r4, #2
 800b15a:	2600      	movs	r6, #0
 800b15c:	42a6      	cmp	r6, r4
 800b15e:	d109      	bne.n	800b174 <__libc_init_array+0x24>
 800b160:	4d0b      	ldr	r5, [pc, #44]	; (800b190 <__libc_init_array+0x40>)
 800b162:	4c0c      	ldr	r4, [pc, #48]	; (800b194 <__libc_init_array+0x44>)
 800b164:	f001 f89e 	bl	800c2a4 <_init>
 800b168:	1b64      	subs	r4, r4, r5
 800b16a:	10a4      	asrs	r4, r4, #2
 800b16c:	2600      	movs	r6, #0
 800b16e:	42a6      	cmp	r6, r4
 800b170:	d105      	bne.n	800b17e <__libc_init_array+0x2e>
 800b172:	bd70      	pop	{r4, r5, r6, pc}
 800b174:	f855 3b04 	ldr.w	r3, [r5], #4
 800b178:	4798      	blx	r3
 800b17a:	3601      	adds	r6, #1
 800b17c:	e7ee      	b.n	800b15c <__libc_init_array+0xc>
 800b17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b182:	4798      	blx	r3
 800b184:	3601      	adds	r6, #1
 800b186:	e7f2      	b.n	800b16e <__libc_init_array+0x1e>
 800b188:	0800d8e8 	.word	0x0800d8e8
 800b18c:	0800d8e8 	.word	0x0800d8e8
 800b190:	0800d8e8 	.word	0x0800d8e8
 800b194:	0800d8ec 	.word	0x0800d8ec

0800b198 <__retarget_lock_init_recursive>:
 800b198:	4770      	bx	lr

0800b19a <__retarget_lock_acquire_recursive>:
 800b19a:	4770      	bx	lr

0800b19c <__retarget_lock_release_recursive>:
 800b19c:	4770      	bx	lr

0800b19e <memcpy>:
 800b19e:	440a      	add	r2, r1
 800b1a0:	4291      	cmp	r1, r2
 800b1a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b1a6:	d100      	bne.n	800b1aa <memcpy+0xc>
 800b1a8:	4770      	bx	lr
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1b4:	4291      	cmp	r1, r2
 800b1b6:	d1f9      	bne.n	800b1ac <memcpy+0xe>
 800b1b8:	bd10      	pop	{r4, pc}
	...

0800b1bc <__assert_func>:
 800b1bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1be:	4614      	mov	r4, r2
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4b09      	ldr	r3, [pc, #36]	; (800b1e8 <__assert_func+0x2c>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	68d8      	ldr	r0, [r3, #12]
 800b1ca:	b14c      	cbz	r4, 800b1e0 <__assert_func+0x24>
 800b1cc:	4b07      	ldr	r3, [pc, #28]	; (800b1ec <__assert_func+0x30>)
 800b1ce:	9100      	str	r1, [sp, #0]
 800b1d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1d4:	4906      	ldr	r1, [pc, #24]	; (800b1f0 <__assert_func+0x34>)
 800b1d6:	462b      	mov	r3, r5
 800b1d8:	f000 fcc6 	bl	800bb68 <fiprintf>
 800b1dc:	f000 fd64 	bl	800bca8 <abort>
 800b1e0:	4b04      	ldr	r3, [pc, #16]	; (800b1f4 <__assert_func+0x38>)
 800b1e2:	461c      	mov	r4, r3
 800b1e4:	e7f3      	b.n	800b1ce <__assert_func+0x12>
 800b1e6:	bf00      	nop
 800b1e8:	20000178 	.word	0x20000178
 800b1ec:	0800d871 	.word	0x0800d871
 800b1f0:	0800d87e 	.word	0x0800d87e
 800b1f4:	0800d8ac 	.word	0x0800d8ac

0800b1f8 <__ssputs_r>:
 800b1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1fc:	688e      	ldr	r6, [r1, #8]
 800b1fe:	461f      	mov	r7, r3
 800b200:	42be      	cmp	r6, r7
 800b202:	680b      	ldr	r3, [r1, #0]
 800b204:	4682      	mov	sl, r0
 800b206:	460c      	mov	r4, r1
 800b208:	4690      	mov	r8, r2
 800b20a:	d82c      	bhi.n	800b266 <__ssputs_r+0x6e>
 800b20c:	898a      	ldrh	r2, [r1, #12]
 800b20e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b212:	d026      	beq.n	800b262 <__ssputs_r+0x6a>
 800b214:	6965      	ldr	r5, [r4, #20]
 800b216:	6909      	ldr	r1, [r1, #16]
 800b218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b21c:	eba3 0901 	sub.w	r9, r3, r1
 800b220:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b224:	1c7b      	adds	r3, r7, #1
 800b226:	444b      	add	r3, r9
 800b228:	106d      	asrs	r5, r5, #1
 800b22a:	429d      	cmp	r5, r3
 800b22c:	bf38      	it	cc
 800b22e:	461d      	movcc	r5, r3
 800b230:	0553      	lsls	r3, r2, #21
 800b232:	d527      	bpl.n	800b284 <__ssputs_r+0x8c>
 800b234:	4629      	mov	r1, r5
 800b236:	f000 f95f 	bl	800b4f8 <_malloc_r>
 800b23a:	4606      	mov	r6, r0
 800b23c:	b360      	cbz	r0, 800b298 <__ssputs_r+0xa0>
 800b23e:	6921      	ldr	r1, [r4, #16]
 800b240:	464a      	mov	r2, r9
 800b242:	f7ff ffac 	bl	800b19e <memcpy>
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b250:	81a3      	strh	r3, [r4, #12]
 800b252:	6126      	str	r6, [r4, #16]
 800b254:	6165      	str	r5, [r4, #20]
 800b256:	444e      	add	r6, r9
 800b258:	eba5 0509 	sub.w	r5, r5, r9
 800b25c:	6026      	str	r6, [r4, #0]
 800b25e:	60a5      	str	r5, [r4, #8]
 800b260:	463e      	mov	r6, r7
 800b262:	42be      	cmp	r6, r7
 800b264:	d900      	bls.n	800b268 <__ssputs_r+0x70>
 800b266:	463e      	mov	r6, r7
 800b268:	6820      	ldr	r0, [r4, #0]
 800b26a:	4632      	mov	r2, r6
 800b26c:	4641      	mov	r1, r8
 800b26e:	f000 fcbc 	bl	800bbea <memmove>
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	1b9b      	subs	r3, r3, r6
 800b276:	60a3      	str	r3, [r4, #8]
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	4433      	add	r3, r6
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	2000      	movs	r0, #0
 800b280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b284:	462a      	mov	r2, r5
 800b286:	f000 fc81 	bl	800bb8c <_realloc_r>
 800b28a:	4606      	mov	r6, r0
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d1e0      	bne.n	800b252 <__ssputs_r+0x5a>
 800b290:	6921      	ldr	r1, [r4, #16]
 800b292:	4650      	mov	r0, sl
 800b294:	f000 fd10 	bl	800bcb8 <_free_r>
 800b298:	230c      	movs	r3, #12
 800b29a:	f8ca 3000 	str.w	r3, [sl]
 800b29e:	89a3      	ldrh	r3, [r4, #12]
 800b2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2a4:	81a3      	strh	r3, [r4, #12]
 800b2a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2aa:	e7e9      	b.n	800b280 <__ssputs_r+0x88>

0800b2ac <_svfiprintf_r>:
 800b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b0:	4698      	mov	r8, r3
 800b2b2:	898b      	ldrh	r3, [r1, #12]
 800b2b4:	061b      	lsls	r3, r3, #24
 800b2b6:	b09d      	sub	sp, #116	; 0x74
 800b2b8:	4607      	mov	r7, r0
 800b2ba:	460d      	mov	r5, r1
 800b2bc:	4614      	mov	r4, r2
 800b2be:	d50e      	bpl.n	800b2de <_svfiprintf_r+0x32>
 800b2c0:	690b      	ldr	r3, [r1, #16]
 800b2c2:	b963      	cbnz	r3, 800b2de <_svfiprintf_r+0x32>
 800b2c4:	2140      	movs	r1, #64	; 0x40
 800b2c6:	f000 f917 	bl	800b4f8 <_malloc_r>
 800b2ca:	6028      	str	r0, [r5, #0]
 800b2cc:	6128      	str	r0, [r5, #16]
 800b2ce:	b920      	cbnz	r0, 800b2da <_svfiprintf_r+0x2e>
 800b2d0:	230c      	movs	r3, #12
 800b2d2:	603b      	str	r3, [r7, #0]
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2d8:	e0d0      	b.n	800b47c <_svfiprintf_r+0x1d0>
 800b2da:	2340      	movs	r3, #64	; 0x40
 800b2dc:	616b      	str	r3, [r5, #20]
 800b2de:	2300      	movs	r3, #0
 800b2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2e2:	2320      	movs	r3, #32
 800b2e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2ec:	2330      	movs	r3, #48	; 0x30
 800b2ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b494 <_svfiprintf_r+0x1e8>
 800b2f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2f6:	f04f 0901 	mov.w	r9, #1
 800b2fa:	4623      	mov	r3, r4
 800b2fc:	469a      	mov	sl, r3
 800b2fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b302:	b10a      	cbz	r2, 800b308 <_svfiprintf_r+0x5c>
 800b304:	2a25      	cmp	r2, #37	; 0x25
 800b306:	d1f9      	bne.n	800b2fc <_svfiprintf_r+0x50>
 800b308:	ebba 0b04 	subs.w	fp, sl, r4
 800b30c:	d00b      	beq.n	800b326 <_svfiprintf_r+0x7a>
 800b30e:	465b      	mov	r3, fp
 800b310:	4622      	mov	r2, r4
 800b312:	4629      	mov	r1, r5
 800b314:	4638      	mov	r0, r7
 800b316:	f7ff ff6f 	bl	800b1f8 <__ssputs_r>
 800b31a:	3001      	adds	r0, #1
 800b31c:	f000 80a9 	beq.w	800b472 <_svfiprintf_r+0x1c6>
 800b320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b322:	445a      	add	r2, fp
 800b324:	9209      	str	r2, [sp, #36]	; 0x24
 800b326:	f89a 3000 	ldrb.w	r3, [sl]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f000 80a1 	beq.w	800b472 <_svfiprintf_r+0x1c6>
 800b330:	2300      	movs	r3, #0
 800b332:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b33a:	f10a 0a01 	add.w	sl, sl, #1
 800b33e:	9304      	str	r3, [sp, #16]
 800b340:	9307      	str	r3, [sp, #28]
 800b342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b346:	931a      	str	r3, [sp, #104]	; 0x68
 800b348:	4654      	mov	r4, sl
 800b34a:	2205      	movs	r2, #5
 800b34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b350:	4850      	ldr	r0, [pc, #320]	; (800b494 <_svfiprintf_r+0x1e8>)
 800b352:	f7f4 ff5d 	bl	8000210 <memchr>
 800b356:	9a04      	ldr	r2, [sp, #16]
 800b358:	b9d8      	cbnz	r0, 800b392 <_svfiprintf_r+0xe6>
 800b35a:	06d0      	lsls	r0, r2, #27
 800b35c:	bf44      	itt	mi
 800b35e:	2320      	movmi	r3, #32
 800b360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b364:	0711      	lsls	r1, r2, #28
 800b366:	bf44      	itt	mi
 800b368:	232b      	movmi	r3, #43	; 0x2b
 800b36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b36e:	f89a 3000 	ldrb.w	r3, [sl]
 800b372:	2b2a      	cmp	r3, #42	; 0x2a
 800b374:	d015      	beq.n	800b3a2 <_svfiprintf_r+0xf6>
 800b376:	9a07      	ldr	r2, [sp, #28]
 800b378:	4654      	mov	r4, sl
 800b37a:	2000      	movs	r0, #0
 800b37c:	f04f 0c0a 	mov.w	ip, #10
 800b380:	4621      	mov	r1, r4
 800b382:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b386:	3b30      	subs	r3, #48	; 0x30
 800b388:	2b09      	cmp	r3, #9
 800b38a:	d94d      	bls.n	800b428 <_svfiprintf_r+0x17c>
 800b38c:	b1b0      	cbz	r0, 800b3bc <_svfiprintf_r+0x110>
 800b38e:	9207      	str	r2, [sp, #28]
 800b390:	e014      	b.n	800b3bc <_svfiprintf_r+0x110>
 800b392:	eba0 0308 	sub.w	r3, r0, r8
 800b396:	fa09 f303 	lsl.w	r3, r9, r3
 800b39a:	4313      	orrs	r3, r2
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	46a2      	mov	sl, r4
 800b3a0:	e7d2      	b.n	800b348 <_svfiprintf_r+0x9c>
 800b3a2:	9b03      	ldr	r3, [sp, #12]
 800b3a4:	1d19      	adds	r1, r3, #4
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	9103      	str	r1, [sp, #12]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	bfbb      	ittet	lt
 800b3ae:	425b      	neglt	r3, r3
 800b3b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b3b4:	9307      	strge	r3, [sp, #28]
 800b3b6:	9307      	strlt	r3, [sp, #28]
 800b3b8:	bfb8      	it	lt
 800b3ba:	9204      	strlt	r2, [sp, #16]
 800b3bc:	7823      	ldrb	r3, [r4, #0]
 800b3be:	2b2e      	cmp	r3, #46	; 0x2e
 800b3c0:	d10c      	bne.n	800b3dc <_svfiprintf_r+0x130>
 800b3c2:	7863      	ldrb	r3, [r4, #1]
 800b3c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b3c6:	d134      	bne.n	800b432 <_svfiprintf_r+0x186>
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	1d1a      	adds	r2, r3, #4
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	9203      	str	r2, [sp, #12]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	bfb8      	it	lt
 800b3d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b3d8:	3402      	adds	r4, #2
 800b3da:	9305      	str	r3, [sp, #20]
 800b3dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b4a4 <_svfiprintf_r+0x1f8>
 800b3e0:	7821      	ldrb	r1, [r4, #0]
 800b3e2:	2203      	movs	r2, #3
 800b3e4:	4650      	mov	r0, sl
 800b3e6:	f7f4 ff13 	bl	8000210 <memchr>
 800b3ea:	b138      	cbz	r0, 800b3fc <_svfiprintf_r+0x150>
 800b3ec:	9b04      	ldr	r3, [sp, #16]
 800b3ee:	eba0 000a 	sub.w	r0, r0, sl
 800b3f2:	2240      	movs	r2, #64	; 0x40
 800b3f4:	4082      	lsls	r2, r0
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	3401      	adds	r4, #1
 800b3fa:	9304      	str	r3, [sp, #16]
 800b3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b400:	4825      	ldr	r0, [pc, #148]	; (800b498 <_svfiprintf_r+0x1ec>)
 800b402:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b406:	2206      	movs	r2, #6
 800b408:	f7f4 ff02 	bl	8000210 <memchr>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d038      	beq.n	800b482 <_svfiprintf_r+0x1d6>
 800b410:	4b22      	ldr	r3, [pc, #136]	; (800b49c <_svfiprintf_r+0x1f0>)
 800b412:	bb1b      	cbnz	r3, 800b45c <_svfiprintf_r+0x1b0>
 800b414:	9b03      	ldr	r3, [sp, #12]
 800b416:	3307      	adds	r3, #7
 800b418:	f023 0307 	bic.w	r3, r3, #7
 800b41c:	3308      	adds	r3, #8
 800b41e:	9303      	str	r3, [sp, #12]
 800b420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b422:	4433      	add	r3, r6
 800b424:	9309      	str	r3, [sp, #36]	; 0x24
 800b426:	e768      	b.n	800b2fa <_svfiprintf_r+0x4e>
 800b428:	fb0c 3202 	mla	r2, ip, r2, r3
 800b42c:	460c      	mov	r4, r1
 800b42e:	2001      	movs	r0, #1
 800b430:	e7a6      	b.n	800b380 <_svfiprintf_r+0xd4>
 800b432:	2300      	movs	r3, #0
 800b434:	3401      	adds	r4, #1
 800b436:	9305      	str	r3, [sp, #20]
 800b438:	4619      	mov	r1, r3
 800b43a:	f04f 0c0a 	mov.w	ip, #10
 800b43e:	4620      	mov	r0, r4
 800b440:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b444:	3a30      	subs	r2, #48	; 0x30
 800b446:	2a09      	cmp	r2, #9
 800b448:	d903      	bls.n	800b452 <_svfiprintf_r+0x1a6>
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d0c6      	beq.n	800b3dc <_svfiprintf_r+0x130>
 800b44e:	9105      	str	r1, [sp, #20]
 800b450:	e7c4      	b.n	800b3dc <_svfiprintf_r+0x130>
 800b452:	fb0c 2101 	mla	r1, ip, r1, r2
 800b456:	4604      	mov	r4, r0
 800b458:	2301      	movs	r3, #1
 800b45a:	e7f0      	b.n	800b43e <_svfiprintf_r+0x192>
 800b45c:	ab03      	add	r3, sp, #12
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	462a      	mov	r2, r5
 800b462:	4b0f      	ldr	r3, [pc, #60]	; (800b4a0 <_svfiprintf_r+0x1f4>)
 800b464:	a904      	add	r1, sp, #16
 800b466:	4638      	mov	r0, r7
 800b468:	f3af 8000 	nop.w
 800b46c:	1c42      	adds	r2, r0, #1
 800b46e:	4606      	mov	r6, r0
 800b470:	d1d6      	bne.n	800b420 <_svfiprintf_r+0x174>
 800b472:	89ab      	ldrh	r3, [r5, #12]
 800b474:	065b      	lsls	r3, r3, #25
 800b476:	f53f af2d 	bmi.w	800b2d4 <_svfiprintf_r+0x28>
 800b47a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b47c:	b01d      	add	sp, #116	; 0x74
 800b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b482:	ab03      	add	r3, sp, #12
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	462a      	mov	r2, r5
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <_svfiprintf_r+0x1f4>)
 800b48a:	a904      	add	r1, sp, #16
 800b48c:	4638      	mov	r0, r7
 800b48e:	f000 f921 	bl	800b6d4 <_printf_i>
 800b492:	e7eb      	b.n	800b46c <_svfiprintf_r+0x1c0>
 800b494:	0800d8ad 	.word	0x0800d8ad
 800b498:	0800d8b7 	.word	0x0800d8b7
 800b49c:	00000000 	.word	0x00000000
 800b4a0:	0800b1f9 	.word	0x0800b1f9
 800b4a4:	0800d8b3 	.word	0x0800d8b3

0800b4a8 <malloc>:
 800b4a8:	4b02      	ldr	r3, [pc, #8]	; (800b4b4 <malloc+0xc>)
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	6818      	ldr	r0, [r3, #0]
 800b4ae:	f000 b823 	b.w	800b4f8 <_malloc_r>
 800b4b2:	bf00      	nop
 800b4b4:	20000178 	.word	0x20000178

0800b4b8 <sbrk_aligned>:
 800b4b8:	b570      	push	{r4, r5, r6, lr}
 800b4ba:	4e0e      	ldr	r6, [pc, #56]	; (800b4f4 <sbrk_aligned+0x3c>)
 800b4bc:	460c      	mov	r4, r1
 800b4be:	6831      	ldr	r1, [r6, #0]
 800b4c0:	4605      	mov	r5, r0
 800b4c2:	b911      	cbnz	r1, 800b4ca <sbrk_aligned+0x12>
 800b4c4:	f000 fbe0 	bl	800bc88 <_sbrk_r>
 800b4c8:	6030      	str	r0, [r6, #0]
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	f000 fbdb 	bl	800bc88 <_sbrk_r>
 800b4d2:	1c43      	adds	r3, r0, #1
 800b4d4:	d00a      	beq.n	800b4ec <sbrk_aligned+0x34>
 800b4d6:	1cc4      	adds	r4, r0, #3
 800b4d8:	f024 0403 	bic.w	r4, r4, #3
 800b4dc:	42a0      	cmp	r0, r4
 800b4de:	d007      	beq.n	800b4f0 <sbrk_aligned+0x38>
 800b4e0:	1a21      	subs	r1, r4, r0
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	f000 fbd0 	bl	800bc88 <_sbrk_r>
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	d101      	bne.n	800b4f0 <sbrk_aligned+0x38>
 800b4ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
 800b4f4:	20002254 	.word	0x20002254

0800b4f8 <_malloc_r>:
 800b4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4fc:	1ccd      	adds	r5, r1, #3
 800b4fe:	f025 0503 	bic.w	r5, r5, #3
 800b502:	3508      	adds	r5, #8
 800b504:	2d0c      	cmp	r5, #12
 800b506:	bf38      	it	cc
 800b508:	250c      	movcc	r5, #12
 800b50a:	2d00      	cmp	r5, #0
 800b50c:	4607      	mov	r7, r0
 800b50e:	db01      	blt.n	800b514 <_malloc_r+0x1c>
 800b510:	42a9      	cmp	r1, r5
 800b512:	d905      	bls.n	800b520 <_malloc_r+0x28>
 800b514:	230c      	movs	r3, #12
 800b516:	603b      	str	r3, [r7, #0]
 800b518:	2600      	movs	r6, #0
 800b51a:	4630      	mov	r0, r6
 800b51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b520:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b5f4 <_malloc_r+0xfc>
 800b524:	f000 faa6 	bl	800ba74 <__malloc_lock>
 800b528:	f8d8 3000 	ldr.w	r3, [r8]
 800b52c:	461c      	mov	r4, r3
 800b52e:	bb5c      	cbnz	r4, 800b588 <_malloc_r+0x90>
 800b530:	4629      	mov	r1, r5
 800b532:	4638      	mov	r0, r7
 800b534:	f7ff ffc0 	bl	800b4b8 <sbrk_aligned>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	4604      	mov	r4, r0
 800b53c:	d155      	bne.n	800b5ea <_malloc_r+0xf2>
 800b53e:	f8d8 4000 	ldr.w	r4, [r8]
 800b542:	4626      	mov	r6, r4
 800b544:	2e00      	cmp	r6, #0
 800b546:	d145      	bne.n	800b5d4 <_malloc_r+0xdc>
 800b548:	2c00      	cmp	r4, #0
 800b54a:	d048      	beq.n	800b5de <_malloc_r+0xe6>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	4631      	mov	r1, r6
 800b550:	4638      	mov	r0, r7
 800b552:	eb04 0903 	add.w	r9, r4, r3
 800b556:	f000 fb97 	bl	800bc88 <_sbrk_r>
 800b55a:	4581      	cmp	r9, r0
 800b55c:	d13f      	bne.n	800b5de <_malloc_r+0xe6>
 800b55e:	6821      	ldr	r1, [r4, #0]
 800b560:	1a6d      	subs	r5, r5, r1
 800b562:	4629      	mov	r1, r5
 800b564:	4638      	mov	r0, r7
 800b566:	f7ff ffa7 	bl	800b4b8 <sbrk_aligned>
 800b56a:	3001      	adds	r0, #1
 800b56c:	d037      	beq.n	800b5de <_malloc_r+0xe6>
 800b56e:	6823      	ldr	r3, [r4, #0]
 800b570:	442b      	add	r3, r5
 800b572:	6023      	str	r3, [r4, #0]
 800b574:	f8d8 3000 	ldr.w	r3, [r8]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d038      	beq.n	800b5ee <_malloc_r+0xf6>
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	42a2      	cmp	r2, r4
 800b580:	d12b      	bne.n	800b5da <_malloc_r+0xe2>
 800b582:	2200      	movs	r2, #0
 800b584:	605a      	str	r2, [r3, #4]
 800b586:	e00f      	b.n	800b5a8 <_malloc_r+0xb0>
 800b588:	6822      	ldr	r2, [r4, #0]
 800b58a:	1b52      	subs	r2, r2, r5
 800b58c:	d41f      	bmi.n	800b5ce <_malloc_r+0xd6>
 800b58e:	2a0b      	cmp	r2, #11
 800b590:	d917      	bls.n	800b5c2 <_malloc_r+0xca>
 800b592:	1961      	adds	r1, r4, r5
 800b594:	42a3      	cmp	r3, r4
 800b596:	6025      	str	r5, [r4, #0]
 800b598:	bf18      	it	ne
 800b59a:	6059      	strne	r1, [r3, #4]
 800b59c:	6863      	ldr	r3, [r4, #4]
 800b59e:	bf08      	it	eq
 800b5a0:	f8c8 1000 	streq.w	r1, [r8]
 800b5a4:	5162      	str	r2, [r4, r5]
 800b5a6:	604b      	str	r3, [r1, #4]
 800b5a8:	4638      	mov	r0, r7
 800b5aa:	f104 060b 	add.w	r6, r4, #11
 800b5ae:	f000 fa67 	bl	800ba80 <__malloc_unlock>
 800b5b2:	f026 0607 	bic.w	r6, r6, #7
 800b5b6:	1d23      	adds	r3, r4, #4
 800b5b8:	1af2      	subs	r2, r6, r3
 800b5ba:	d0ae      	beq.n	800b51a <_malloc_r+0x22>
 800b5bc:	1b9b      	subs	r3, r3, r6
 800b5be:	50a3      	str	r3, [r4, r2]
 800b5c0:	e7ab      	b.n	800b51a <_malloc_r+0x22>
 800b5c2:	42a3      	cmp	r3, r4
 800b5c4:	6862      	ldr	r2, [r4, #4]
 800b5c6:	d1dd      	bne.n	800b584 <_malloc_r+0x8c>
 800b5c8:	f8c8 2000 	str.w	r2, [r8]
 800b5cc:	e7ec      	b.n	800b5a8 <_malloc_r+0xb0>
 800b5ce:	4623      	mov	r3, r4
 800b5d0:	6864      	ldr	r4, [r4, #4]
 800b5d2:	e7ac      	b.n	800b52e <_malloc_r+0x36>
 800b5d4:	4634      	mov	r4, r6
 800b5d6:	6876      	ldr	r6, [r6, #4]
 800b5d8:	e7b4      	b.n	800b544 <_malloc_r+0x4c>
 800b5da:	4613      	mov	r3, r2
 800b5dc:	e7cc      	b.n	800b578 <_malloc_r+0x80>
 800b5de:	230c      	movs	r3, #12
 800b5e0:	603b      	str	r3, [r7, #0]
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	f000 fa4c 	bl	800ba80 <__malloc_unlock>
 800b5e8:	e797      	b.n	800b51a <_malloc_r+0x22>
 800b5ea:	6025      	str	r5, [r4, #0]
 800b5ec:	e7dc      	b.n	800b5a8 <_malloc_r+0xb0>
 800b5ee:	605b      	str	r3, [r3, #4]
 800b5f0:	deff      	udf	#255	; 0xff
 800b5f2:	bf00      	nop
 800b5f4:	20002250 	.word	0x20002250

0800b5f8 <_printf_common>:
 800b5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5fc:	4616      	mov	r6, r2
 800b5fe:	4699      	mov	r9, r3
 800b600:	688a      	ldr	r2, [r1, #8]
 800b602:	690b      	ldr	r3, [r1, #16]
 800b604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b608:	4293      	cmp	r3, r2
 800b60a:	bfb8      	it	lt
 800b60c:	4613      	movlt	r3, r2
 800b60e:	6033      	str	r3, [r6, #0]
 800b610:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b614:	4607      	mov	r7, r0
 800b616:	460c      	mov	r4, r1
 800b618:	b10a      	cbz	r2, 800b61e <_printf_common+0x26>
 800b61a:	3301      	adds	r3, #1
 800b61c:	6033      	str	r3, [r6, #0]
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	0699      	lsls	r1, r3, #26
 800b622:	bf42      	ittt	mi
 800b624:	6833      	ldrmi	r3, [r6, #0]
 800b626:	3302      	addmi	r3, #2
 800b628:	6033      	strmi	r3, [r6, #0]
 800b62a:	6825      	ldr	r5, [r4, #0]
 800b62c:	f015 0506 	ands.w	r5, r5, #6
 800b630:	d106      	bne.n	800b640 <_printf_common+0x48>
 800b632:	f104 0a19 	add.w	sl, r4, #25
 800b636:	68e3      	ldr	r3, [r4, #12]
 800b638:	6832      	ldr	r2, [r6, #0]
 800b63a:	1a9b      	subs	r3, r3, r2
 800b63c:	42ab      	cmp	r3, r5
 800b63e:	dc26      	bgt.n	800b68e <_printf_common+0x96>
 800b640:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b644:	1e13      	subs	r3, r2, #0
 800b646:	6822      	ldr	r2, [r4, #0]
 800b648:	bf18      	it	ne
 800b64a:	2301      	movne	r3, #1
 800b64c:	0692      	lsls	r2, r2, #26
 800b64e:	d42b      	bmi.n	800b6a8 <_printf_common+0xb0>
 800b650:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b654:	4649      	mov	r1, r9
 800b656:	4638      	mov	r0, r7
 800b658:	47c0      	blx	r8
 800b65a:	3001      	adds	r0, #1
 800b65c:	d01e      	beq.n	800b69c <_printf_common+0xa4>
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	6922      	ldr	r2, [r4, #16]
 800b662:	f003 0306 	and.w	r3, r3, #6
 800b666:	2b04      	cmp	r3, #4
 800b668:	bf02      	ittt	eq
 800b66a:	68e5      	ldreq	r5, [r4, #12]
 800b66c:	6833      	ldreq	r3, [r6, #0]
 800b66e:	1aed      	subeq	r5, r5, r3
 800b670:	68a3      	ldr	r3, [r4, #8]
 800b672:	bf0c      	ite	eq
 800b674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b678:	2500      	movne	r5, #0
 800b67a:	4293      	cmp	r3, r2
 800b67c:	bfc4      	itt	gt
 800b67e:	1a9b      	subgt	r3, r3, r2
 800b680:	18ed      	addgt	r5, r5, r3
 800b682:	2600      	movs	r6, #0
 800b684:	341a      	adds	r4, #26
 800b686:	42b5      	cmp	r5, r6
 800b688:	d11a      	bne.n	800b6c0 <_printf_common+0xc8>
 800b68a:	2000      	movs	r0, #0
 800b68c:	e008      	b.n	800b6a0 <_printf_common+0xa8>
 800b68e:	2301      	movs	r3, #1
 800b690:	4652      	mov	r2, sl
 800b692:	4649      	mov	r1, r9
 800b694:	4638      	mov	r0, r7
 800b696:	47c0      	blx	r8
 800b698:	3001      	adds	r0, #1
 800b69a:	d103      	bne.n	800b6a4 <_printf_common+0xac>
 800b69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a4:	3501      	adds	r5, #1
 800b6a6:	e7c6      	b.n	800b636 <_printf_common+0x3e>
 800b6a8:	18e1      	adds	r1, r4, r3
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	2030      	movs	r0, #48	; 0x30
 800b6ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6b2:	4422      	add	r2, r4
 800b6b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6bc:	3302      	adds	r3, #2
 800b6be:	e7c7      	b.n	800b650 <_printf_common+0x58>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	4622      	mov	r2, r4
 800b6c4:	4649      	mov	r1, r9
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	47c0      	blx	r8
 800b6ca:	3001      	adds	r0, #1
 800b6cc:	d0e6      	beq.n	800b69c <_printf_common+0xa4>
 800b6ce:	3601      	adds	r6, #1
 800b6d0:	e7d9      	b.n	800b686 <_printf_common+0x8e>
	...

0800b6d4 <_printf_i>:
 800b6d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d8:	7e0f      	ldrb	r7, [r1, #24]
 800b6da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6dc:	2f78      	cmp	r7, #120	; 0x78
 800b6de:	4691      	mov	r9, r2
 800b6e0:	4680      	mov	r8, r0
 800b6e2:	460c      	mov	r4, r1
 800b6e4:	469a      	mov	sl, r3
 800b6e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6ea:	d807      	bhi.n	800b6fc <_printf_i+0x28>
 800b6ec:	2f62      	cmp	r7, #98	; 0x62
 800b6ee:	d80a      	bhi.n	800b706 <_printf_i+0x32>
 800b6f0:	2f00      	cmp	r7, #0
 800b6f2:	f000 80d4 	beq.w	800b89e <_printf_i+0x1ca>
 800b6f6:	2f58      	cmp	r7, #88	; 0x58
 800b6f8:	f000 80c0 	beq.w	800b87c <_printf_i+0x1a8>
 800b6fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b700:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b704:	e03a      	b.n	800b77c <_printf_i+0xa8>
 800b706:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b70a:	2b15      	cmp	r3, #21
 800b70c:	d8f6      	bhi.n	800b6fc <_printf_i+0x28>
 800b70e:	a101      	add	r1, pc, #4	; (adr r1, 800b714 <_printf_i+0x40>)
 800b710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b714:	0800b76d 	.word	0x0800b76d
 800b718:	0800b781 	.word	0x0800b781
 800b71c:	0800b6fd 	.word	0x0800b6fd
 800b720:	0800b6fd 	.word	0x0800b6fd
 800b724:	0800b6fd 	.word	0x0800b6fd
 800b728:	0800b6fd 	.word	0x0800b6fd
 800b72c:	0800b781 	.word	0x0800b781
 800b730:	0800b6fd 	.word	0x0800b6fd
 800b734:	0800b6fd 	.word	0x0800b6fd
 800b738:	0800b6fd 	.word	0x0800b6fd
 800b73c:	0800b6fd 	.word	0x0800b6fd
 800b740:	0800b885 	.word	0x0800b885
 800b744:	0800b7ad 	.word	0x0800b7ad
 800b748:	0800b83f 	.word	0x0800b83f
 800b74c:	0800b6fd 	.word	0x0800b6fd
 800b750:	0800b6fd 	.word	0x0800b6fd
 800b754:	0800b8a7 	.word	0x0800b8a7
 800b758:	0800b6fd 	.word	0x0800b6fd
 800b75c:	0800b7ad 	.word	0x0800b7ad
 800b760:	0800b6fd 	.word	0x0800b6fd
 800b764:	0800b6fd 	.word	0x0800b6fd
 800b768:	0800b847 	.word	0x0800b847
 800b76c:	682b      	ldr	r3, [r5, #0]
 800b76e:	1d1a      	adds	r2, r3, #4
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	602a      	str	r2, [r5, #0]
 800b774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b778:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b77c:	2301      	movs	r3, #1
 800b77e:	e09f      	b.n	800b8c0 <_printf_i+0x1ec>
 800b780:	6820      	ldr	r0, [r4, #0]
 800b782:	682b      	ldr	r3, [r5, #0]
 800b784:	0607      	lsls	r7, r0, #24
 800b786:	f103 0104 	add.w	r1, r3, #4
 800b78a:	6029      	str	r1, [r5, #0]
 800b78c:	d501      	bpl.n	800b792 <_printf_i+0xbe>
 800b78e:	681e      	ldr	r6, [r3, #0]
 800b790:	e003      	b.n	800b79a <_printf_i+0xc6>
 800b792:	0646      	lsls	r6, r0, #25
 800b794:	d5fb      	bpl.n	800b78e <_printf_i+0xba>
 800b796:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b79a:	2e00      	cmp	r6, #0
 800b79c:	da03      	bge.n	800b7a6 <_printf_i+0xd2>
 800b79e:	232d      	movs	r3, #45	; 0x2d
 800b7a0:	4276      	negs	r6, r6
 800b7a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7a6:	485a      	ldr	r0, [pc, #360]	; (800b910 <_printf_i+0x23c>)
 800b7a8:	230a      	movs	r3, #10
 800b7aa:	e012      	b.n	800b7d2 <_printf_i+0xfe>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	6820      	ldr	r0, [r4, #0]
 800b7b0:	1d19      	adds	r1, r3, #4
 800b7b2:	6029      	str	r1, [r5, #0]
 800b7b4:	0605      	lsls	r5, r0, #24
 800b7b6:	d501      	bpl.n	800b7bc <_printf_i+0xe8>
 800b7b8:	681e      	ldr	r6, [r3, #0]
 800b7ba:	e002      	b.n	800b7c2 <_printf_i+0xee>
 800b7bc:	0641      	lsls	r1, r0, #25
 800b7be:	d5fb      	bpl.n	800b7b8 <_printf_i+0xe4>
 800b7c0:	881e      	ldrh	r6, [r3, #0]
 800b7c2:	4853      	ldr	r0, [pc, #332]	; (800b910 <_printf_i+0x23c>)
 800b7c4:	2f6f      	cmp	r7, #111	; 0x6f
 800b7c6:	bf0c      	ite	eq
 800b7c8:	2308      	moveq	r3, #8
 800b7ca:	230a      	movne	r3, #10
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7d2:	6865      	ldr	r5, [r4, #4]
 800b7d4:	60a5      	str	r5, [r4, #8]
 800b7d6:	2d00      	cmp	r5, #0
 800b7d8:	bfa2      	ittt	ge
 800b7da:	6821      	ldrge	r1, [r4, #0]
 800b7dc:	f021 0104 	bicge.w	r1, r1, #4
 800b7e0:	6021      	strge	r1, [r4, #0]
 800b7e2:	b90e      	cbnz	r6, 800b7e8 <_printf_i+0x114>
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	d04b      	beq.n	800b880 <_printf_i+0x1ac>
 800b7e8:	4615      	mov	r5, r2
 800b7ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7ee:	fb03 6711 	mls	r7, r3, r1, r6
 800b7f2:	5dc7      	ldrb	r7, [r0, r7]
 800b7f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7f8:	4637      	mov	r7, r6
 800b7fa:	42bb      	cmp	r3, r7
 800b7fc:	460e      	mov	r6, r1
 800b7fe:	d9f4      	bls.n	800b7ea <_printf_i+0x116>
 800b800:	2b08      	cmp	r3, #8
 800b802:	d10b      	bne.n	800b81c <_printf_i+0x148>
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	07de      	lsls	r6, r3, #31
 800b808:	d508      	bpl.n	800b81c <_printf_i+0x148>
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	6861      	ldr	r1, [r4, #4]
 800b80e:	4299      	cmp	r1, r3
 800b810:	bfde      	ittt	le
 800b812:	2330      	movle	r3, #48	; 0x30
 800b814:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b818:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b81c:	1b52      	subs	r2, r2, r5
 800b81e:	6122      	str	r2, [r4, #16]
 800b820:	f8cd a000 	str.w	sl, [sp]
 800b824:	464b      	mov	r3, r9
 800b826:	aa03      	add	r2, sp, #12
 800b828:	4621      	mov	r1, r4
 800b82a:	4640      	mov	r0, r8
 800b82c:	f7ff fee4 	bl	800b5f8 <_printf_common>
 800b830:	3001      	adds	r0, #1
 800b832:	d14a      	bne.n	800b8ca <_printf_i+0x1f6>
 800b834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b838:	b004      	add	sp, #16
 800b83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	f043 0320 	orr.w	r3, r3, #32
 800b844:	6023      	str	r3, [r4, #0]
 800b846:	4833      	ldr	r0, [pc, #204]	; (800b914 <_printf_i+0x240>)
 800b848:	2778      	movs	r7, #120	; 0x78
 800b84a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b84e:	6823      	ldr	r3, [r4, #0]
 800b850:	6829      	ldr	r1, [r5, #0]
 800b852:	061f      	lsls	r7, r3, #24
 800b854:	f851 6b04 	ldr.w	r6, [r1], #4
 800b858:	d402      	bmi.n	800b860 <_printf_i+0x18c>
 800b85a:	065f      	lsls	r7, r3, #25
 800b85c:	bf48      	it	mi
 800b85e:	b2b6      	uxthmi	r6, r6
 800b860:	07df      	lsls	r7, r3, #31
 800b862:	bf48      	it	mi
 800b864:	f043 0320 	orrmi.w	r3, r3, #32
 800b868:	6029      	str	r1, [r5, #0]
 800b86a:	bf48      	it	mi
 800b86c:	6023      	strmi	r3, [r4, #0]
 800b86e:	b91e      	cbnz	r6, 800b878 <_printf_i+0x1a4>
 800b870:	6823      	ldr	r3, [r4, #0]
 800b872:	f023 0320 	bic.w	r3, r3, #32
 800b876:	6023      	str	r3, [r4, #0]
 800b878:	2310      	movs	r3, #16
 800b87a:	e7a7      	b.n	800b7cc <_printf_i+0xf8>
 800b87c:	4824      	ldr	r0, [pc, #144]	; (800b910 <_printf_i+0x23c>)
 800b87e:	e7e4      	b.n	800b84a <_printf_i+0x176>
 800b880:	4615      	mov	r5, r2
 800b882:	e7bd      	b.n	800b800 <_printf_i+0x12c>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	6826      	ldr	r6, [r4, #0]
 800b888:	6961      	ldr	r1, [r4, #20]
 800b88a:	1d18      	adds	r0, r3, #4
 800b88c:	6028      	str	r0, [r5, #0]
 800b88e:	0635      	lsls	r5, r6, #24
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	d501      	bpl.n	800b898 <_printf_i+0x1c4>
 800b894:	6019      	str	r1, [r3, #0]
 800b896:	e002      	b.n	800b89e <_printf_i+0x1ca>
 800b898:	0670      	lsls	r0, r6, #25
 800b89a:	d5fb      	bpl.n	800b894 <_printf_i+0x1c0>
 800b89c:	8019      	strh	r1, [r3, #0]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	6123      	str	r3, [r4, #16]
 800b8a2:	4615      	mov	r5, r2
 800b8a4:	e7bc      	b.n	800b820 <_printf_i+0x14c>
 800b8a6:	682b      	ldr	r3, [r5, #0]
 800b8a8:	1d1a      	adds	r2, r3, #4
 800b8aa:	602a      	str	r2, [r5, #0]
 800b8ac:	681d      	ldr	r5, [r3, #0]
 800b8ae:	6862      	ldr	r2, [r4, #4]
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	f7f4 fcac 	bl	8000210 <memchr>
 800b8b8:	b108      	cbz	r0, 800b8be <_printf_i+0x1ea>
 800b8ba:	1b40      	subs	r0, r0, r5
 800b8bc:	6060      	str	r0, [r4, #4]
 800b8be:	6863      	ldr	r3, [r4, #4]
 800b8c0:	6123      	str	r3, [r4, #16]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c8:	e7aa      	b.n	800b820 <_printf_i+0x14c>
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	462a      	mov	r2, r5
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	4640      	mov	r0, r8
 800b8d2:	47d0      	blx	sl
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	d0ad      	beq.n	800b834 <_printf_i+0x160>
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	079b      	lsls	r3, r3, #30
 800b8dc:	d413      	bmi.n	800b906 <_printf_i+0x232>
 800b8de:	68e0      	ldr	r0, [r4, #12]
 800b8e0:	9b03      	ldr	r3, [sp, #12]
 800b8e2:	4298      	cmp	r0, r3
 800b8e4:	bfb8      	it	lt
 800b8e6:	4618      	movlt	r0, r3
 800b8e8:	e7a6      	b.n	800b838 <_printf_i+0x164>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	4640      	mov	r0, r8
 800b8f2:	47d0      	blx	sl
 800b8f4:	3001      	adds	r0, #1
 800b8f6:	d09d      	beq.n	800b834 <_printf_i+0x160>
 800b8f8:	3501      	adds	r5, #1
 800b8fa:	68e3      	ldr	r3, [r4, #12]
 800b8fc:	9903      	ldr	r1, [sp, #12]
 800b8fe:	1a5b      	subs	r3, r3, r1
 800b900:	42ab      	cmp	r3, r5
 800b902:	dcf2      	bgt.n	800b8ea <_printf_i+0x216>
 800b904:	e7eb      	b.n	800b8de <_printf_i+0x20a>
 800b906:	2500      	movs	r5, #0
 800b908:	f104 0619 	add.w	r6, r4, #25
 800b90c:	e7f5      	b.n	800b8fa <_printf_i+0x226>
 800b90e:	bf00      	nop
 800b910:	0800d8be 	.word	0x0800d8be
 800b914:	0800d8cf 	.word	0x0800d8cf

0800b918 <__sflush_r>:
 800b918:	898a      	ldrh	r2, [r1, #12]
 800b91a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91e:	4605      	mov	r5, r0
 800b920:	0710      	lsls	r0, r2, #28
 800b922:	460c      	mov	r4, r1
 800b924:	d458      	bmi.n	800b9d8 <__sflush_r+0xc0>
 800b926:	684b      	ldr	r3, [r1, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	dc05      	bgt.n	800b938 <__sflush_r+0x20>
 800b92c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b92e:	2b00      	cmp	r3, #0
 800b930:	dc02      	bgt.n	800b938 <__sflush_r+0x20>
 800b932:	2000      	movs	r0, #0
 800b934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b93a:	2e00      	cmp	r6, #0
 800b93c:	d0f9      	beq.n	800b932 <__sflush_r+0x1a>
 800b93e:	2300      	movs	r3, #0
 800b940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b944:	682f      	ldr	r7, [r5, #0]
 800b946:	6a21      	ldr	r1, [r4, #32]
 800b948:	602b      	str	r3, [r5, #0]
 800b94a:	d032      	beq.n	800b9b2 <__sflush_r+0x9a>
 800b94c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	075a      	lsls	r2, r3, #29
 800b952:	d505      	bpl.n	800b960 <__sflush_r+0x48>
 800b954:	6863      	ldr	r3, [r4, #4]
 800b956:	1ac0      	subs	r0, r0, r3
 800b958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b95a:	b10b      	cbz	r3, 800b960 <__sflush_r+0x48>
 800b95c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b95e:	1ac0      	subs	r0, r0, r3
 800b960:	2300      	movs	r3, #0
 800b962:	4602      	mov	r2, r0
 800b964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b966:	6a21      	ldr	r1, [r4, #32]
 800b968:	4628      	mov	r0, r5
 800b96a:	47b0      	blx	r6
 800b96c:	1c43      	adds	r3, r0, #1
 800b96e:	89a3      	ldrh	r3, [r4, #12]
 800b970:	d106      	bne.n	800b980 <__sflush_r+0x68>
 800b972:	6829      	ldr	r1, [r5, #0]
 800b974:	291d      	cmp	r1, #29
 800b976:	d82b      	bhi.n	800b9d0 <__sflush_r+0xb8>
 800b978:	4a29      	ldr	r2, [pc, #164]	; (800ba20 <__sflush_r+0x108>)
 800b97a:	410a      	asrs	r2, r1
 800b97c:	07d6      	lsls	r6, r2, #31
 800b97e:	d427      	bmi.n	800b9d0 <__sflush_r+0xb8>
 800b980:	2200      	movs	r2, #0
 800b982:	6062      	str	r2, [r4, #4]
 800b984:	04d9      	lsls	r1, r3, #19
 800b986:	6922      	ldr	r2, [r4, #16]
 800b988:	6022      	str	r2, [r4, #0]
 800b98a:	d504      	bpl.n	800b996 <__sflush_r+0x7e>
 800b98c:	1c42      	adds	r2, r0, #1
 800b98e:	d101      	bne.n	800b994 <__sflush_r+0x7c>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b903      	cbnz	r3, 800b996 <__sflush_r+0x7e>
 800b994:	6560      	str	r0, [r4, #84]	; 0x54
 800b996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b998:	602f      	str	r7, [r5, #0]
 800b99a:	2900      	cmp	r1, #0
 800b99c:	d0c9      	beq.n	800b932 <__sflush_r+0x1a>
 800b99e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9a2:	4299      	cmp	r1, r3
 800b9a4:	d002      	beq.n	800b9ac <__sflush_r+0x94>
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f000 f986 	bl	800bcb8 <_free_r>
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	6360      	str	r0, [r4, #52]	; 0x34
 800b9b0:	e7c0      	b.n	800b934 <__sflush_r+0x1c>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	47b0      	blx	r6
 800b9b8:	1c41      	adds	r1, r0, #1
 800b9ba:	d1c8      	bne.n	800b94e <__sflush_r+0x36>
 800b9bc:	682b      	ldr	r3, [r5, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d0c5      	beq.n	800b94e <__sflush_r+0x36>
 800b9c2:	2b1d      	cmp	r3, #29
 800b9c4:	d001      	beq.n	800b9ca <__sflush_r+0xb2>
 800b9c6:	2b16      	cmp	r3, #22
 800b9c8:	d101      	bne.n	800b9ce <__sflush_r+0xb6>
 800b9ca:	602f      	str	r7, [r5, #0]
 800b9cc:	e7b1      	b.n	800b932 <__sflush_r+0x1a>
 800b9ce:	89a3      	ldrh	r3, [r4, #12]
 800b9d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9d4:	81a3      	strh	r3, [r4, #12]
 800b9d6:	e7ad      	b.n	800b934 <__sflush_r+0x1c>
 800b9d8:	690f      	ldr	r7, [r1, #16]
 800b9da:	2f00      	cmp	r7, #0
 800b9dc:	d0a9      	beq.n	800b932 <__sflush_r+0x1a>
 800b9de:	0793      	lsls	r3, r2, #30
 800b9e0:	680e      	ldr	r6, [r1, #0]
 800b9e2:	bf08      	it	eq
 800b9e4:	694b      	ldreq	r3, [r1, #20]
 800b9e6:	600f      	str	r7, [r1, #0]
 800b9e8:	bf18      	it	ne
 800b9ea:	2300      	movne	r3, #0
 800b9ec:	eba6 0807 	sub.w	r8, r6, r7
 800b9f0:	608b      	str	r3, [r1, #8]
 800b9f2:	f1b8 0f00 	cmp.w	r8, #0
 800b9f6:	dd9c      	ble.n	800b932 <__sflush_r+0x1a>
 800b9f8:	6a21      	ldr	r1, [r4, #32]
 800b9fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9fc:	4643      	mov	r3, r8
 800b9fe:	463a      	mov	r2, r7
 800ba00:	4628      	mov	r0, r5
 800ba02:	47b0      	blx	r6
 800ba04:	2800      	cmp	r0, #0
 800ba06:	dc06      	bgt.n	800ba16 <__sflush_r+0xfe>
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba0e:	81a3      	strh	r3, [r4, #12]
 800ba10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba14:	e78e      	b.n	800b934 <__sflush_r+0x1c>
 800ba16:	4407      	add	r7, r0
 800ba18:	eba8 0800 	sub.w	r8, r8, r0
 800ba1c:	e7e9      	b.n	800b9f2 <__sflush_r+0xda>
 800ba1e:	bf00      	nop
 800ba20:	dfbffffe 	.word	0xdfbffffe

0800ba24 <_fflush_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	690b      	ldr	r3, [r1, #16]
 800ba28:	4605      	mov	r5, r0
 800ba2a:	460c      	mov	r4, r1
 800ba2c:	b913      	cbnz	r3, 800ba34 <_fflush_r+0x10>
 800ba2e:	2500      	movs	r5, #0
 800ba30:	4628      	mov	r0, r5
 800ba32:	bd38      	pop	{r3, r4, r5, pc}
 800ba34:	b118      	cbz	r0, 800ba3e <_fflush_r+0x1a>
 800ba36:	6a03      	ldr	r3, [r0, #32]
 800ba38:	b90b      	cbnz	r3, 800ba3e <_fflush_r+0x1a>
 800ba3a:	f7fe ffc7 	bl	800a9cc <__sinit>
 800ba3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0f3      	beq.n	800ba2e <_fflush_r+0xa>
 800ba46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba48:	07d0      	lsls	r0, r2, #31
 800ba4a:	d404      	bmi.n	800ba56 <_fflush_r+0x32>
 800ba4c:	0599      	lsls	r1, r3, #22
 800ba4e:	d402      	bmi.n	800ba56 <_fflush_r+0x32>
 800ba50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba52:	f7ff fba2 	bl	800b19a <__retarget_lock_acquire_recursive>
 800ba56:	4628      	mov	r0, r5
 800ba58:	4621      	mov	r1, r4
 800ba5a:	f7ff ff5d 	bl	800b918 <__sflush_r>
 800ba5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba60:	07da      	lsls	r2, r3, #31
 800ba62:	4605      	mov	r5, r0
 800ba64:	d4e4      	bmi.n	800ba30 <_fflush_r+0xc>
 800ba66:	89a3      	ldrh	r3, [r4, #12]
 800ba68:	059b      	lsls	r3, r3, #22
 800ba6a:	d4e1      	bmi.n	800ba30 <_fflush_r+0xc>
 800ba6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba6e:	f7ff fb95 	bl	800b19c <__retarget_lock_release_recursive>
 800ba72:	e7dd      	b.n	800ba30 <_fflush_r+0xc>

0800ba74 <__malloc_lock>:
 800ba74:	4801      	ldr	r0, [pc, #4]	; (800ba7c <__malloc_lock+0x8>)
 800ba76:	f7ff bb90 	b.w	800b19a <__retarget_lock_acquire_recursive>
 800ba7a:	bf00      	nop
 800ba7c:	2000224c 	.word	0x2000224c

0800ba80 <__malloc_unlock>:
 800ba80:	4801      	ldr	r0, [pc, #4]	; (800ba88 <__malloc_unlock+0x8>)
 800ba82:	f7ff bb8b 	b.w	800b19c <__retarget_lock_release_recursive>
 800ba86:	bf00      	nop
 800ba88:	2000224c 	.word	0x2000224c

0800ba8c <__sread>:
 800ba8c:	b510      	push	{r4, lr}
 800ba8e:	460c      	mov	r4, r1
 800ba90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba94:	f000 f8e6 	bl	800bc64 <_read_r>
 800ba98:	2800      	cmp	r0, #0
 800ba9a:	bfab      	itete	ge
 800ba9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba9e:	89a3      	ldrhlt	r3, [r4, #12]
 800baa0:	181b      	addge	r3, r3, r0
 800baa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800baa6:	bfac      	ite	ge
 800baa8:	6563      	strge	r3, [r4, #84]	; 0x54
 800baaa:	81a3      	strhlt	r3, [r4, #12]
 800baac:	bd10      	pop	{r4, pc}

0800baae <__swrite>:
 800baae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab2:	461f      	mov	r7, r3
 800bab4:	898b      	ldrh	r3, [r1, #12]
 800bab6:	05db      	lsls	r3, r3, #23
 800bab8:	4605      	mov	r5, r0
 800baba:	460c      	mov	r4, r1
 800babc:	4616      	mov	r6, r2
 800babe:	d505      	bpl.n	800bacc <__swrite+0x1e>
 800bac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bac4:	2302      	movs	r3, #2
 800bac6:	2200      	movs	r2, #0
 800bac8:	f000 f8ba 	bl	800bc40 <_lseek_r>
 800bacc:	89a3      	ldrh	r3, [r4, #12]
 800bace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bad6:	81a3      	strh	r3, [r4, #12]
 800bad8:	4632      	mov	r2, r6
 800bada:	463b      	mov	r3, r7
 800badc:	4628      	mov	r0, r5
 800bade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bae2:	f7ff bb1d 	b.w	800b120 <_write_r>

0800bae6 <__sseek>:
 800bae6:	b510      	push	{r4, lr}
 800bae8:	460c      	mov	r4, r1
 800baea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baee:	f000 f8a7 	bl	800bc40 <_lseek_r>
 800baf2:	1c43      	adds	r3, r0, #1
 800baf4:	89a3      	ldrh	r3, [r4, #12]
 800baf6:	bf15      	itete	ne
 800baf8:	6560      	strne	r0, [r4, #84]	; 0x54
 800bafa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bafe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb02:	81a3      	strheq	r3, [r4, #12]
 800bb04:	bf18      	it	ne
 800bb06:	81a3      	strhne	r3, [r4, #12]
 800bb08:	bd10      	pop	{r4, pc}

0800bb0a <__sclose>:
 800bb0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb0e:	f000 b887 	b.w	800bc20 <_close_r>
	...

0800bb14 <fileno>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d13      	ldr	r5, [pc, #76]	; (800bb64 <fileno+0x50>)
 800bb18:	4604      	mov	r4, r0
 800bb1a:	6828      	ldr	r0, [r5, #0]
 800bb1c:	b118      	cbz	r0, 800bb26 <fileno+0x12>
 800bb1e:	6a03      	ldr	r3, [r0, #32]
 800bb20:	b90b      	cbnz	r3, 800bb26 <fileno+0x12>
 800bb22:	f7fe ff53 	bl	800a9cc <__sinit>
 800bb26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb28:	07d8      	lsls	r0, r3, #31
 800bb2a:	d405      	bmi.n	800bb38 <fileno+0x24>
 800bb2c:	89a3      	ldrh	r3, [r4, #12]
 800bb2e:	0599      	lsls	r1, r3, #22
 800bb30:	d402      	bmi.n	800bb38 <fileno+0x24>
 800bb32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb34:	f7ff fb31 	bl	800b19a <__retarget_lock_acquire_recursive>
 800bb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb3c:	b15b      	cbz	r3, 800bb56 <fileno+0x42>
 800bb3e:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800bb42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb44:	07d2      	lsls	r2, r2, #31
 800bb46:	d404      	bmi.n	800bb52 <fileno+0x3e>
 800bb48:	059b      	lsls	r3, r3, #22
 800bb4a:	d402      	bmi.n	800bb52 <fileno+0x3e>
 800bb4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb4e:	f7ff fb25 	bl	800b19c <__retarget_lock_release_recursive>
 800bb52:	4628      	mov	r0, r5
 800bb54:	bd38      	pop	{r3, r4, r5, pc}
 800bb56:	682a      	ldr	r2, [r5, #0]
 800bb58:	2109      	movs	r1, #9
 800bb5a:	6011      	str	r1, [r2, #0]
 800bb5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bb60:	e7ef      	b.n	800bb42 <fileno+0x2e>
 800bb62:	bf00      	nop
 800bb64:	20000178 	.word	0x20000178

0800bb68 <fiprintf>:
 800bb68:	b40e      	push	{r1, r2, r3}
 800bb6a:	b503      	push	{r0, r1, lr}
 800bb6c:	4601      	mov	r1, r0
 800bb6e:	ab03      	add	r3, sp, #12
 800bb70:	4805      	ldr	r0, [pc, #20]	; (800bb88 <fiprintf+0x20>)
 800bb72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb76:	6800      	ldr	r0, [r0, #0]
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	f000 f913 	bl	800bda4 <_vfiprintf_r>
 800bb7e:	b002      	add	sp, #8
 800bb80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb84:	b003      	add	sp, #12
 800bb86:	4770      	bx	lr
 800bb88:	20000178 	.word	0x20000178

0800bb8c <_realloc_r>:
 800bb8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb90:	4680      	mov	r8, r0
 800bb92:	4614      	mov	r4, r2
 800bb94:	460e      	mov	r6, r1
 800bb96:	b921      	cbnz	r1, 800bba2 <_realloc_r+0x16>
 800bb98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	f7ff bcab 	b.w	800b4f8 <_malloc_r>
 800bba2:	b92a      	cbnz	r2, 800bbb0 <_realloc_r+0x24>
 800bba4:	f000 f888 	bl	800bcb8 <_free_r>
 800bba8:	4625      	mov	r5, r4
 800bbaa:	4628      	mov	r0, r5
 800bbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbb0:	f000 fa12 	bl	800bfd8 <_malloc_usable_size_r>
 800bbb4:	4284      	cmp	r4, r0
 800bbb6:	4607      	mov	r7, r0
 800bbb8:	d802      	bhi.n	800bbc0 <_realloc_r+0x34>
 800bbba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbbe:	d812      	bhi.n	800bbe6 <_realloc_r+0x5a>
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	f7ff fc98 	bl	800b4f8 <_malloc_r>
 800bbc8:	4605      	mov	r5, r0
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d0ed      	beq.n	800bbaa <_realloc_r+0x1e>
 800bbce:	42bc      	cmp	r4, r7
 800bbd0:	4622      	mov	r2, r4
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	bf28      	it	cs
 800bbd6:	463a      	movcs	r2, r7
 800bbd8:	f7ff fae1 	bl	800b19e <memcpy>
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4640      	mov	r0, r8
 800bbe0:	f000 f86a 	bl	800bcb8 <_free_r>
 800bbe4:	e7e1      	b.n	800bbaa <_realloc_r+0x1e>
 800bbe6:	4635      	mov	r5, r6
 800bbe8:	e7df      	b.n	800bbaa <_realloc_r+0x1e>

0800bbea <memmove>:
 800bbea:	4288      	cmp	r0, r1
 800bbec:	b510      	push	{r4, lr}
 800bbee:	eb01 0402 	add.w	r4, r1, r2
 800bbf2:	d902      	bls.n	800bbfa <memmove+0x10>
 800bbf4:	4284      	cmp	r4, r0
 800bbf6:	4623      	mov	r3, r4
 800bbf8:	d807      	bhi.n	800bc0a <memmove+0x20>
 800bbfa:	1e43      	subs	r3, r0, #1
 800bbfc:	42a1      	cmp	r1, r4
 800bbfe:	d008      	beq.n	800bc12 <memmove+0x28>
 800bc00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc04:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc08:	e7f8      	b.n	800bbfc <memmove+0x12>
 800bc0a:	4402      	add	r2, r0
 800bc0c:	4601      	mov	r1, r0
 800bc0e:	428a      	cmp	r2, r1
 800bc10:	d100      	bne.n	800bc14 <memmove+0x2a>
 800bc12:	bd10      	pop	{r4, pc}
 800bc14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc18:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc1c:	e7f7      	b.n	800bc0e <memmove+0x24>
	...

0800bc20 <_close_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d06      	ldr	r5, [pc, #24]	; (800bc3c <_close_r+0x1c>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	f7f5 f8f7 	bl	8000e1e <_close>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d102      	bne.n	800bc3a <_close_r+0x1a>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	b103      	cbz	r3, 800bc3a <_close_r+0x1a>
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	20002258 	.word	0x20002258

0800bc40 <_lseek_r>:
 800bc40:	b538      	push	{r3, r4, r5, lr}
 800bc42:	4d07      	ldr	r5, [pc, #28]	; (800bc60 <_lseek_r+0x20>)
 800bc44:	4604      	mov	r4, r0
 800bc46:	4608      	mov	r0, r1
 800bc48:	4611      	mov	r1, r2
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	602a      	str	r2, [r5, #0]
 800bc4e:	461a      	mov	r2, r3
 800bc50:	f7f5 f90c 	bl	8000e6c <_lseek>
 800bc54:	1c43      	adds	r3, r0, #1
 800bc56:	d102      	bne.n	800bc5e <_lseek_r+0x1e>
 800bc58:	682b      	ldr	r3, [r5, #0]
 800bc5a:	b103      	cbz	r3, 800bc5e <_lseek_r+0x1e>
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	bd38      	pop	{r3, r4, r5, pc}
 800bc60:	20002258 	.word	0x20002258

0800bc64 <_read_r>:
 800bc64:	b538      	push	{r3, r4, r5, lr}
 800bc66:	4d07      	ldr	r5, [pc, #28]	; (800bc84 <_read_r+0x20>)
 800bc68:	4604      	mov	r4, r0
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	2200      	movs	r2, #0
 800bc70:	602a      	str	r2, [r5, #0]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f7f5 f89a 	bl	8000dac <_read>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d102      	bne.n	800bc82 <_read_r+0x1e>
 800bc7c:	682b      	ldr	r3, [r5, #0]
 800bc7e:	b103      	cbz	r3, 800bc82 <_read_r+0x1e>
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	bd38      	pop	{r3, r4, r5, pc}
 800bc84:	20002258 	.word	0x20002258

0800bc88 <_sbrk_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4d06      	ldr	r5, [pc, #24]	; (800bca4 <_sbrk_r+0x1c>)
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	4604      	mov	r4, r0
 800bc90:	4608      	mov	r0, r1
 800bc92:	602b      	str	r3, [r5, #0]
 800bc94:	f7f5 f8f8 	bl	8000e88 <_sbrk>
 800bc98:	1c43      	adds	r3, r0, #1
 800bc9a:	d102      	bne.n	800bca2 <_sbrk_r+0x1a>
 800bc9c:	682b      	ldr	r3, [r5, #0]
 800bc9e:	b103      	cbz	r3, 800bca2 <_sbrk_r+0x1a>
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	bd38      	pop	{r3, r4, r5, pc}
 800bca4:	20002258 	.word	0x20002258

0800bca8 <abort>:
 800bca8:	b508      	push	{r3, lr}
 800bcaa:	2006      	movs	r0, #6
 800bcac:	f000 fade 	bl	800c26c <raise>
 800bcb0:	2001      	movs	r0, #1
 800bcb2:	f7f5 f871 	bl	8000d98 <_exit>
	...

0800bcb8 <_free_r>:
 800bcb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcba:	2900      	cmp	r1, #0
 800bcbc:	d044      	beq.n	800bd48 <_free_r+0x90>
 800bcbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcc2:	9001      	str	r0, [sp, #4]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f1a1 0404 	sub.w	r4, r1, #4
 800bcca:	bfb8      	it	lt
 800bccc:	18e4      	addlt	r4, r4, r3
 800bcce:	f7ff fed1 	bl	800ba74 <__malloc_lock>
 800bcd2:	4a1e      	ldr	r2, [pc, #120]	; (800bd4c <_free_r+0x94>)
 800bcd4:	9801      	ldr	r0, [sp, #4]
 800bcd6:	6813      	ldr	r3, [r2, #0]
 800bcd8:	b933      	cbnz	r3, 800bce8 <_free_r+0x30>
 800bcda:	6063      	str	r3, [r4, #4]
 800bcdc:	6014      	str	r4, [r2, #0]
 800bcde:	b003      	add	sp, #12
 800bce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bce4:	f7ff becc 	b.w	800ba80 <__malloc_unlock>
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	d908      	bls.n	800bcfe <_free_r+0x46>
 800bcec:	6825      	ldr	r5, [r4, #0]
 800bcee:	1961      	adds	r1, r4, r5
 800bcf0:	428b      	cmp	r3, r1
 800bcf2:	bf01      	itttt	eq
 800bcf4:	6819      	ldreq	r1, [r3, #0]
 800bcf6:	685b      	ldreq	r3, [r3, #4]
 800bcf8:	1949      	addeq	r1, r1, r5
 800bcfa:	6021      	streq	r1, [r4, #0]
 800bcfc:	e7ed      	b.n	800bcda <_free_r+0x22>
 800bcfe:	461a      	mov	r2, r3
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	b10b      	cbz	r3, 800bd08 <_free_r+0x50>
 800bd04:	42a3      	cmp	r3, r4
 800bd06:	d9fa      	bls.n	800bcfe <_free_r+0x46>
 800bd08:	6811      	ldr	r1, [r2, #0]
 800bd0a:	1855      	adds	r5, r2, r1
 800bd0c:	42a5      	cmp	r5, r4
 800bd0e:	d10b      	bne.n	800bd28 <_free_r+0x70>
 800bd10:	6824      	ldr	r4, [r4, #0]
 800bd12:	4421      	add	r1, r4
 800bd14:	1854      	adds	r4, r2, r1
 800bd16:	42a3      	cmp	r3, r4
 800bd18:	6011      	str	r1, [r2, #0]
 800bd1a:	d1e0      	bne.n	800bcde <_free_r+0x26>
 800bd1c:	681c      	ldr	r4, [r3, #0]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	6053      	str	r3, [r2, #4]
 800bd22:	440c      	add	r4, r1
 800bd24:	6014      	str	r4, [r2, #0]
 800bd26:	e7da      	b.n	800bcde <_free_r+0x26>
 800bd28:	d902      	bls.n	800bd30 <_free_r+0x78>
 800bd2a:	230c      	movs	r3, #12
 800bd2c:	6003      	str	r3, [r0, #0]
 800bd2e:	e7d6      	b.n	800bcde <_free_r+0x26>
 800bd30:	6825      	ldr	r5, [r4, #0]
 800bd32:	1961      	adds	r1, r4, r5
 800bd34:	428b      	cmp	r3, r1
 800bd36:	bf04      	itt	eq
 800bd38:	6819      	ldreq	r1, [r3, #0]
 800bd3a:	685b      	ldreq	r3, [r3, #4]
 800bd3c:	6063      	str	r3, [r4, #4]
 800bd3e:	bf04      	itt	eq
 800bd40:	1949      	addeq	r1, r1, r5
 800bd42:	6021      	streq	r1, [r4, #0]
 800bd44:	6054      	str	r4, [r2, #4]
 800bd46:	e7ca      	b.n	800bcde <_free_r+0x26>
 800bd48:	b003      	add	sp, #12
 800bd4a:	bd30      	pop	{r4, r5, pc}
 800bd4c:	20002250 	.word	0x20002250

0800bd50 <__sfputc_r>:
 800bd50:	6893      	ldr	r3, [r2, #8]
 800bd52:	3b01      	subs	r3, #1
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	b410      	push	{r4}
 800bd58:	6093      	str	r3, [r2, #8]
 800bd5a:	da08      	bge.n	800bd6e <__sfputc_r+0x1e>
 800bd5c:	6994      	ldr	r4, [r2, #24]
 800bd5e:	42a3      	cmp	r3, r4
 800bd60:	db01      	blt.n	800bd66 <__sfputc_r+0x16>
 800bd62:	290a      	cmp	r1, #10
 800bd64:	d103      	bne.n	800bd6e <__sfputc_r+0x1e>
 800bd66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd6a:	f000 b93d 	b.w	800bfe8 <__swbuf_r>
 800bd6e:	6813      	ldr	r3, [r2, #0]
 800bd70:	1c58      	adds	r0, r3, #1
 800bd72:	6010      	str	r0, [r2, #0]
 800bd74:	7019      	strb	r1, [r3, #0]
 800bd76:	4608      	mov	r0, r1
 800bd78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <__sfputs_r>:
 800bd7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd80:	4606      	mov	r6, r0
 800bd82:	460f      	mov	r7, r1
 800bd84:	4614      	mov	r4, r2
 800bd86:	18d5      	adds	r5, r2, r3
 800bd88:	42ac      	cmp	r4, r5
 800bd8a:	d101      	bne.n	800bd90 <__sfputs_r+0x12>
 800bd8c:	2000      	movs	r0, #0
 800bd8e:	e007      	b.n	800bda0 <__sfputs_r+0x22>
 800bd90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd94:	463a      	mov	r2, r7
 800bd96:	4630      	mov	r0, r6
 800bd98:	f7ff ffda 	bl	800bd50 <__sfputc_r>
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	d1f3      	bne.n	800bd88 <__sfputs_r+0xa>
 800bda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bda4 <_vfiprintf_r>:
 800bda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bda8:	460d      	mov	r5, r1
 800bdaa:	b09d      	sub	sp, #116	; 0x74
 800bdac:	4614      	mov	r4, r2
 800bdae:	4698      	mov	r8, r3
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	b118      	cbz	r0, 800bdbc <_vfiprintf_r+0x18>
 800bdb4:	6a03      	ldr	r3, [r0, #32]
 800bdb6:	b90b      	cbnz	r3, 800bdbc <_vfiprintf_r+0x18>
 800bdb8:	f7fe fe08 	bl	800a9cc <__sinit>
 800bdbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bdbe:	07d9      	lsls	r1, r3, #31
 800bdc0:	d405      	bmi.n	800bdce <_vfiprintf_r+0x2a>
 800bdc2:	89ab      	ldrh	r3, [r5, #12]
 800bdc4:	059a      	lsls	r2, r3, #22
 800bdc6:	d402      	bmi.n	800bdce <_vfiprintf_r+0x2a>
 800bdc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdca:	f7ff f9e6 	bl	800b19a <__retarget_lock_acquire_recursive>
 800bdce:	89ab      	ldrh	r3, [r5, #12]
 800bdd0:	071b      	lsls	r3, r3, #28
 800bdd2:	d501      	bpl.n	800bdd8 <_vfiprintf_r+0x34>
 800bdd4:	692b      	ldr	r3, [r5, #16]
 800bdd6:	b99b      	cbnz	r3, 800be00 <_vfiprintf_r+0x5c>
 800bdd8:	4629      	mov	r1, r5
 800bdda:	4630      	mov	r0, r6
 800bddc:	f000 f942 	bl	800c064 <__swsetup_r>
 800bde0:	b170      	cbz	r0, 800be00 <_vfiprintf_r+0x5c>
 800bde2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bde4:	07dc      	lsls	r4, r3, #31
 800bde6:	d504      	bpl.n	800bdf2 <_vfiprintf_r+0x4e>
 800bde8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdec:	b01d      	add	sp, #116	; 0x74
 800bdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdf2:	89ab      	ldrh	r3, [r5, #12]
 800bdf4:	0598      	lsls	r0, r3, #22
 800bdf6:	d4f7      	bmi.n	800bde8 <_vfiprintf_r+0x44>
 800bdf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdfa:	f7ff f9cf 	bl	800b19c <__retarget_lock_release_recursive>
 800bdfe:	e7f3      	b.n	800bde8 <_vfiprintf_r+0x44>
 800be00:	2300      	movs	r3, #0
 800be02:	9309      	str	r3, [sp, #36]	; 0x24
 800be04:	2320      	movs	r3, #32
 800be06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be0e:	2330      	movs	r3, #48	; 0x30
 800be10:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bfc4 <_vfiprintf_r+0x220>
 800be14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be18:	f04f 0901 	mov.w	r9, #1
 800be1c:	4623      	mov	r3, r4
 800be1e:	469a      	mov	sl, r3
 800be20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be24:	b10a      	cbz	r2, 800be2a <_vfiprintf_r+0x86>
 800be26:	2a25      	cmp	r2, #37	; 0x25
 800be28:	d1f9      	bne.n	800be1e <_vfiprintf_r+0x7a>
 800be2a:	ebba 0b04 	subs.w	fp, sl, r4
 800be2e:	d00b      	beq.n	800be48 <_vfiprintf_r+0xa4>
 800be30:	465b      	mov	r3, fp
 800be32:	4622      	mov	r2, r4
 800be34:	4629      	mov	r1, r5
 800be36:	4630      	mov	r0, r6
 800be38:	f7ff ffa1 	bl	800bd7e <__sfputs_r>
 800be3c:	3001      	adds	r0, #1
 800be3e:	f000 80a9 	beq.w	800bf94 <_vfiprintf_r+0x1f0>
 800be42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be44:	445a      	add	r2, fp
 800be46:	9209      	str	r2, [sp, #36]	; 0x24
 800be48:	f89a 3000 	ldrb.w	r3, [sl]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f000 80a1 	beq.w	800bf94 <_vfiprintf_r+0x1f0>
 800be52:	2300      	movs	r3, #0
 800be54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be5c:	f10a 0a01 	add.w	sl, sl, #1
 800be60:	9304      	str	r3, [sp, #16]
 800be62:	9307      	str	r3, [sp, #28]
 800be64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be68:	931a      	str	r3, [sp, #104]	; 0x68
 800be6a:	4654      	mov	r4, sl
 800be6c:	2205      	movs	r2, #5
 800be6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be72:	4854      	ldr	r0, [pc, #336]	; (800bfc4 <_vfiprintf_r+0x220>)
 800be74:	f7f4 f9cc 	bl	8000210 <memchr>
 800be78:	9a04      	ldr	r2, [sp, #16]
 800be7a:	b9d8      	cbnz	r0, 800beb4 <_vfiprintf_r+0x110>
 800be7c:	06d1      	lsls	r1, r2, #27
 800be7e:	bf44      	itt	mi
 800be80:	2320      	movmi	r3, #32
 800be82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be86:	0713      	lsls	r3, r2, #28
 800be88:	bf44      	itt	mi
 800be8a:	232b      	movmi	r3, #43	; 0x2b
 800be8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be90:	f89a 3000 	ldrb.w	r3, [sl]
 800be94:	2b2a      	cmp	r3, #42	; 0x2a
 800be96:	d015      	beq.n	800bec4 <_vfiprintf_r+0x120>
 800be98:	9a07      	ldr	r2, [sp, #28]
 800be9a:	4654      	mov	r4, sl
 800be9c:	2000      	movs	r0, #0
 800be9e:	f04f 0c0a 	mov.w	ip, #10
 800bea2:	4621      	mov	r1, r4
 800bea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bea8:	3b30      	subs	r3, #48	; 0x30
 800beaa:	2b09      	cmp	r3, #9
 800beac:	d94d      	bls.n	800bf4a <_vfiprintf_r+0x1a6>
 800beae:	b1b0      	cbz	r0, 800bede <_vfiprintf_r+0x13a>
 800beb0:	9207      	str	r2, [sp, #28]
 800beb2:	e014      	b.n	800bede <_vfiprintf_r+0x13a>
 800beb4:	eba0 0308 	sub.w	r3, r0, r8
 800beb8:	fa09 f303 	lsl.w	r3, r9, r3
 800bebc:	4313      	orrs	r3, r2
 800bebe:	9304      	str	r3, [sp, #16]
 800bec0:	46a2      	mov	sl, r4
 800bec2:	e7d2      	b.n	800be6a <_vfiprintf_r+0xc6>
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	1d19      	adds	r1, r3, #4
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	9103      	str	r1, [sp, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	bfbb      	ittet	lt
 800bed0:	425b      	neglt	r3, r3
 800bed2:	f042 0202 	orrlt.w	r2, r2, #2
 800bed6:	9307      	strge	r3, [sp, #28]
 800bed8:	9307      	strlt	r3, [sp, #28]
 800beda:	bfb8      	it	lt
 800bedc:	9204      	strlt	r2, [sp, #16]
 800bede:	7823      	ldrb	r3, [r4, #0]
 800bee0:	2b2e      	cmp	r3, #46	; 0x2e
 800bee2:	d10c      	bne.n	800befe <_vfiprintf_r+0x15a>
 800bee4:	7863      	ldrb	r3, [r4, #1]
 800bee6:	2b2a      	cmp	r3, #42	; 0x2a
 800bee8:	d134      	bne.n	800bf54 <_vfiprintf_r+0x1b0>
 800beea:	9b03      	ldr	r3, [sp, #12]
 800beec:	1d1a      	adds	r2, r3, #4
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	9203      	str	r2, [sp, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	bfb8      	it	lt
 800bef6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800befa:	3402      	adds	r4, #2
 800befc:	9305      	str	r3, [sp, #20]
 800befe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bfd4 <_vfiprintf_r+0x230>
 800bf02:	7821      	ldrb	r1, [r4, #0]
 800bf04:	2203      	movs	r2, #3
 800bf06:	4650      	mov	r0, sl
 800bf08:	f7f4 f982 	bl	8000210 <memchr>
 800bf0c:	b138      	cbz	r0, 800bf1e <_vfiprintf_r+0x17a>
 800bf0e:	9b04      	ldr	r3, [sp, #16]
 800bf10:	eba0 000a 	sub.w	r0, r0, sl
 800bf14:	2240      	movs	r2, #64	; 0x40
 800bf16:	4082      	lsls	r2, r0
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	3401      	adds	r4, #1
 800bf1c:	9304      	str	r3, [sp, #16]
 800bf1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf22:	4829      	ldr	r0, [pc, #164]	; (800bfc8 <_vfiprintf_r+0x224>)
 800bf24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf28:	2206      	movs	r2, #6
 800bf2a:	f7f4 f971 	bl	8000210 <memchr>
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d03f      	beq.n	800bfb2 <_vfiprintf_r+0x20e>
 800bf32:	4b26      	ldr	r3, [pc, #152]	; (800bfcc <_vfiprintf_r+0x228>)
 800bf34:	bb1b      	cbnz	r3, 800bf7e <_vfiprintf_r+0x1da>
 800bf36:	9b03      	ldr	r3, [sp, #12]
 800bf38:	3307      	adds	r3, #7
 800bf3a:	f023 0307 	bic.w	r3, r3, #7
 800bf3e:	3308      	adds	r3, #8
 800bf40:	9303      	str	r3, [sp, #12]
 800bf42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf44:	443b      	add	r3, r7
 800bf46:	9309      	str	r3, [sp, #36]	; 0x24
 800bf48:	e768      	b.n	800be1c <_vfiprintf_r+0x78>
 800bf4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf4e:	460c      	mov	r4, r1
 800bf50:	2001      	movs	r0, #1
 800bf52:	e7a6      	b.n	800bea2 <_vfiprintf_r+0xfe>
 800bf54:	2300      	movs	r3, #0
 800bf56:	3401      	adds	r4, #1
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	f04f 0c0a 	mov.w	ip, #10
 800bf60:	4620      	mov	r0, r4
 800bf62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf66:	3a30      	subs	r2, #48	; 0x30
 800bf68:	2a09      	cmp	r2, #9
 800bf6a:	d903      	bls.n	800bf74 <_vfiprintf_r+0x1d0>
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d0c6      	beq.n	800befe <_vfiprintf_r+0x15a>
 800bf70:	9105      	str	r1, [sp, #20]
 800bf72:	e7c4      	b.n	800befe <_vfiprintf_r+0x15a>
 800bf74:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf78:	4604      	mov	r4, r0
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	e7f0      	b.n	800bf60 <_vfiprintf_r+0x1bc>
 800bf7e:	ab03      	add	r3, sp, #12
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	462a      	mov	r2, r5
 800bf84:	4b12      	ldr	r3, [pc, #72]	; (800bfd0 <_vfiprintf_r+0x22c>)
 800bf86:	a904      	add	r1, sp, #16
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f3af 8000 	nop.w
 800bf8e:	4607      	mov	r7, r0
 800bf90:	1c78      	adds	r0, r7, #1
 800bf92:	d1d6      	bne.n	800bf42 <_vfiprintf_r+0x19e>
 800bf94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf96:	07d9      	lsls	r1, r3, #31
 800bf98:	d405      	bmi.n	800bfa6 <_vfiprintf_r+0x202>
 800bf9a:	89ab      	ldrh	r3, [r5, #12]
 800bf9c:	059a      	lsls	r2, r3, #22
 800bf9e:	d402      	bmi.n	800bfa6 <_vfiprintf_r+0x202>
 800bfa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfa2:	f7ff f8fb 	bl	800b19c <__retarget_lock_release_recursive>
 800bfa6:	89ab      	ldrh	r3, [r5, #12]
 800bfa8:	065b      	lsls	r3, r3, #25
 800bfaa:	f53f af1d 	bmi.w	800bde8 <_vfiprintf_r+0x44>
 800bfae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfb0:	e71c      	b.n	800bdec <_vfiprintf_r+0x48>
 800bfb2:	ab03      	add	r3, sp, #12
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	4b05      	ldr	r3, [pc, #20]	; (800bfd0 <_vfiprintf_r+0x22c>)
 800bfba:	a904      	add	r1, sp, #16
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	f7ff fb89 	bl	800b6d4 <_printf_i>
 800bfc2:	e7e4      	b.n	800bf8e <_vfiprintf_r+0x1ea>
 800bfc4:	0800d8ad 	.word	0x0800d8ad
 800bfc8:	0800d8b7 	.word	0x0800d8b7
 800bfcc:	00000000 	.word	0x00000000
 800bfd0:	0800bd7f 	.word	0x0800bd7f
 800bfd4:	0800d8b3 	.word	0x0800d8b3

0800bfd8 <_malloc_usable_size_r>:
 800bfd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfdc:	1f18      	subs	r0, r3, #4
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	bfbc      	itt	lt
 800bfe2:	580b      	ldrlt	r3, [r1, r0]
 800bfe4:	18c0      	addlt	r0, r0, r3
 800bfe6:	4770      	bx	lr

0800bfe8 <__swbuf_r>:
 800bfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfea:	460e      	mov	r6, r1
 800bfec:	4614      	mov	r4, r2
 800bfee:	4605      	mov	r5, r0
 800bff0:	b118      	cbz	r0, 800bffa <__swbuf_r+0x12>
 800bff2:	6a03      	ldr	r3, [r0, #32]
 800bff4:	b90b      	cbnz	r3, 800bffa <__swbuf_r+0x12>
 800bff6:	f7fe fce9 	bl	800a9cc <__sinit>
 800bffa:	69a3      	ldr	r3, [r4, #24]
 800bffc:	60a3      	str	r3, [r4, #8]
 800bffe:	89a3      	ldrh	r3, [r4, #12]
 800c000:	071a      	lsls	r2, r3, #28
 800c002:	d525      	bpl.n	800c050 <__swbuf_r+0x68>
 800c004:	6923      	ldr	r3, [r4, #16]
 800c006:	b31b      	cbz	r3, 800c050 <__swbuf_r+0x68>
 800c008:	6823      	ldr	r3, [r4, #0]
 800c00a:	6922      	ldr	r2, [r4, #16]
 800c00c:	1a98      	subs	r0, r3, r2
 800c00e:	6963      	ldr	r3, [r4, #20]
 800c010:	b2f6      	uxtb	r6, r6
 800c012:	4283      	cmp	r3, r0
 800c014:	4637      	mov	r7, r6
 800c016:	dc04      	bgt.n	800c022 <__swbuf_r+0x3a>
 800c018:	4621      	mov	r1, r4
 800c01a:	4628      	mov	r0, r5
 800c01c:	f7ff fd02 	bl	800ba24 <_fflush_r>
 800c020:	b9e0      	cbnz	r0, 800c05c <__swbuf_r+0x74>
 800c022:	68a3      	ldr	r3, [r4, #8]
 800c024:	3b01      	subs	r3, #1
 800c026:	60a3      	str	r3, [r4, #8]
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	1c5a      	adds	r2, r3, #1
 800c02c:	6022      	str	r2, [r4, #0]
 800c02e:	701e      	strb	r6, [r3, #0]
 800c030:	6962      	ldr	r2, [r4, #20]
 800c032:	1c43      	adds	r3, r0, #1
 800c034:	429a      	cmp	r2, r3
 800c036:	d004      	beq.n	800c042 <__swbuf_r+0x5a>
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	07db      	lsls	r3, r3, #31
 800c03c:	d506      	bpl.n	800c04c <__swbuf_r+0x64>
 800c03e:	2e0a      	cmp	r6, #10
 800c040:	d104      	bne.n	800c04c <__swbuf_r+0x64>
 800c042:	4621      	mov	r1, r4
 800c044:	4628      	mov	r0, r5
 800c046:	f7ff fced 	bl	800ba24 <_fflush_r>
 800c04a:	b938      	cbnz	r0, 800c05c <__swbuf_r+0x74>
 800c04c:	4638      	mov	r0, r7
 800c04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c050:	4621      	mov	r1, r4
 800c052:	4628      	mov	r0, r5
 800c054:	f000 f806 	bl	800c064 <__swsetup_r>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d0d5      	beq.n	800c008 <__swbuf_r+0x20>
 800c05c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c060:	e7f4      	b.n	800c04c <__swbuf_r+0x64>
	...

0800c064 <__swsetup_r>:
 800c064:	b538      	push	{r3, r4, r5, lr}
 800c066:	4b2a      	ldr	r3, [pc, #168]	; (800c110 <__swsetup_r+0xac>)
 800c068:	4605      	mov	r5, r0
 800c06a:	6818      	ldr	r0, [r3, #0]
 800c06c:	460c      	mov	r4, r1
 800c06e:	b118      	cbz	r0, 800c078 <__swsetup_r+0x14>
 800c070:	6a03      	ldr	r3, [r0, #32]
 800c072:	b90b      	cbnz	r3, 800c078 <__swsetup_r+0x14>
 800c074:	f7fe fcaa 	bl	800a9cc <__sinit>
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c07e:	0718      	lsls	r0, r3, #28
 800c080:	d422      	bmi.n	800c0c8 <__swsetup_r+0x64>
 800c082:	06d9      	lsls	r1, r3, #27
 800c084:	d407      	bmi.n	800c096 <__swsetup_r+0x32>
 800c086:	2309      	movs	r3, #9
 800c088:	602b      	str	r3, [r5, #0]
 800c08a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c094:	e034      	b.n	800c100 <__swsetup_r+0x9c>
 800c096:	0758      	lsls	r0, r3, #29
 800c098:	d512      	bpl.n	800c0c0 <__swsetup_r+0x5c>
 800c09a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c09c:	b141      	cbz	r1, 800c0b0 <__swsetup_r+0x4c>
 800c09e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0a2:	4299      	cmp	r1, r3
 800c0a4:	d002      	beq.n	800c0ac <__swsetup_r+0x48>
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	f7ff fe06 	bl	800bcb8 <_free_r>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	6363      	str	r3, [r4, #52]	; 0x34
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0b6:	81a3      	strh	r3, [r4, #12]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	6063      	str	r3, [r4, #4]
 800c0bc:	6923      	ldr	r3, [r4, #16]
 800c0be:	6023      	str	r3, [r4, #0]
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	f043 0308 	orr.w	r3, r3, #8
 800c0c6:	81a3      	strh	r3, [r4, #12]
 800c0c8:	6923      	ldr	r3, [r4, #16]
 800c0ca:	b94b      	cbnz	r3, 800c0e0 <__swsetup_r+0x7c>
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0d6:	d003      	beq.n	800c0e0 <__swsetup_r+0x7c>
 800c0d8:	4621      	mov	r1, r4
 800c0da:	4628      	mov	r0, r5
 800c0dc:	f000 f840 	bl	800c160 <__smakebuf_r>
 800c0e0:	89a0      	ldrh	r0, [r4, #12]
 800c0e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0e6:	f010 0301 	ands.w	r3, r0, #1
 800c0ea:	d00a      	beq.n	800c102 <__swsetup_r+0x9e>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	60a3      	str	r3, [r4, #8]
 800c0f0:	6963      	ldr	r3, [r4, #20]
 800c0f2:	425b      	negs	r3, r3
 800c0f4:	61a3      	str	r3, [r4, #24]
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	b943      	cbnz	r3, 800c10c <__swsetup_r+0xa8>
 800c0fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0fe:	d1c4      	bne.n	800c08a <__swsetup_r+0x26>
 800c100:	bd38      	pop	{r3, r4, r5, pc}
 800c102:	0781      	lsls	r1, r0, #30
 800c104:	bf58      	it	pl
 800c106:	6963      	ldrpl	r3, [r4, #20]
 800c108:	60a3      	str	r3, [r4, #8]
 800c10a:	e7f4      	b.n	800c0f6 <__swsetup_r+0x92>
 800c10c:	2000      	movs	r0, #0
 800c10e:	e7f7      	b.n	800c100 <__swsetup_r+0x9c>
 800c110:	20000178 	.word	0x20000178

0800c114 <__swhatbuf_r>:
 800c114:	b570      	push	{r4, r5, r6, lr}
 800c116:	460c      	mov	r4, r1
 800c118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c11c:	2900      	cmp	r1, #0
 800c11e:	b096      	sub	sp, #88	; 0x58
 800c120:	4615      	mov	r5, r2
 800c122:	461e      	mov	r6, r3
 800c124:	da0d      	bge.n	800c142 <__swhatbuf_r+0x2e>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c12c:	f04f 0100 	mov.w	r1, #0
 800c130:	bf0c      	ite	eq
 800c132:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c136:	2340      	movne	r3, #64	; 0x40
 800c138:	2000      	movs	r0, #0
 800c13a:	6031      	str	r1, [r6, #0]
 800c13c:	602b      	str	r3, [r5, #0]
 800c13e:	b016      	add	sp, #88	; 0x58
 800c140:	bd70      	pop	{r4, r5, r6, pc}
 800c142:	466a      	mov	r2, sp
 800c144:	f000 f848 	bl	800c1d8 <_fstat_r>
 800c148:	2800      	cmp	r0, #0
 800c14a:	dbec      	blt.n	800c126 <__swhatbuf_r+0x12>
 800c14c:	9901      	ldr	r1, [sp, #4]
 800c14e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c152:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c156:	4259      	negs	r1, r3
 800c158:	4159      	adcs	r1, r3
 800c15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c15e:	e7eb      	b.n	800c138 <__swhatbuf_r+0x24>

0800c160 <__smakebuf_r>:
 800c160:	898b      	ldrh	r3, [r1, #12]
 800c162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c164:	079d      	lsls	r5, r3, #30
 800c166:	4606      	mov	r6, r0
 800c168:	460c      	mov	r4, r1
 800c16a:	d507      	bpl.n	800c17c <__smakebuf_r+0x1c>
 800c16c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c170:	6023      	str	r3, [r4, #0]
 800c172:	6123      	str	r3, [r4, #16]
 800c174:	2301      	movs	r3, #1
 800c176:	6163      	str	r3, [r4, #20]
 800c178:	b002      	add	sp, #8
 800c17a:	bd70      	pop	{r4, r5, r6, pc}
 800c17c:	ab01      	add	r3, sp, #4
 800c17e:	466a      	mov	r2, sp
 800c180:	f7ff ffc8 	bl	800c114 <__swhatbuf_r>
 800c184:	9900      	ldr	r1, [sp, #0]
 800c186:	4605      	mov	r5, r0
 800c188:	4630      	mov	r0, r6
 800c18a:	f7ff f9b5 	bl	800b4f8 <_malloc_r>
 800c18e:	b948      	cbnz	r0, 800c1a4 <__smakebuf_r+0x44>
 800c190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c194:	059a      	lsls	r2, r3, #22
 800c196:	d4ef      	bmi.n	800c178 <__smakebuf_r+0x18>
 800c198:	f023 0303 	bic.w	r3, r3, #3
 800c19c:	f043 0302 	orr.w	r3, r3, #2
 800c1a0:	81a3      	strh	r3, [r4, #12]
 800c1a2:	e7e3      	b.n	800c16c <__smakebuf_r+0xc>
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	6020      	str	r0, [r4, #0]
 800c1a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1ac:	81a3      	strh	r3, [r4, #12]
 800c1ae:	9b00      	ldr	r3, [sp, #0]
 800c1b0:	6163      	str	r3, [r4, #20]
 800c1b2:	9b01      	ldr	r3, [sp, #4]
 800c1b4:	6120      	str	r0, [r4, #16]
 800c1b6:	b15b      	cbz	r3, 800c1d0 <__smakebuf_r+0x70>
 800c1b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f000 f81d 	bl	800c1fc <_isatty_r>
 800c1c2:	b128      	cbz	r0, 800c1d0 <__smakebuf_r+0x70>
 800c1c4:	89a3      	ldrh	r3, [r4, #12]
 800c1c6:	f023 0303 	bic.w	r3, r3, #3
 800c1ca:	f043 0301 	orr.w	r3, r3, #1
 800c1ce:	81a3      	strh	r3, [r4, #12]
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	431d      	orrs	r5, r3
 800c1d4:	81a5      	strh	r5, [r4, #12]
 800c1d6:	e7cf      	b.n	800c178 <__smakebuf_r+0x18>

0800c1d8 <_fstat_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4d07      	ldr	r5, [pc, #28]	; (800c1f8 <_fstat_r+0x20>)
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4604      	mov	r4, r0
 800c1e0:	4608      	mov	r0, r1
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	602b      	str	r3, [r5, #0]
 800c1e6:	f7f4 fe26 	bl	8000e36 <_fstat>
 800c1ea:	1c43      	adds	r3, r0, #1
 800c1ec:	d102      	bne.n	800c1f4 <_fstat_r+0x1c>
 800c1ee:	682b      	ldr	r3, [r5, #0]
 800c1f0:	b103      	cbz	r3, 800c1f4 <_fstat_r+0x1c>
 800c1f2:	6023      	str	r3, [r4, #0]
 800c1f4:	bd38      	pop	{r3, r4, r5, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20002258 	.word	0x20002258

0800c1fc <_isatty_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	4d06      	ldr	r5, [pc, #24]	; (800c218 <_isatty_r+0x1c>)
 800c200:	2300      	movs	r3, #0
 800c202:	4604      	mov	r4, r0
 800c204:	4608      	mov	r0, r1
 800c206:	602b      	str	r3, [r5, #0]
 800c208:	f7f4 fe25 	bl	8000e56 <_isatty>
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d102      	bne.n	800c216 <_isatty_r+0x1a>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	b103      	cbz	r3, 800c216 <_isatty_r+0x1a>
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	20002258 	.word	0x20002258

0800c21c <_raise_r>:
 800c21c:	291f      	cmp	r1, #31
 800c21e:	b538      	push	{r3, r4, r5, lr}
 800c220:	4604      	mov	r4, r0
 800c222:	460d      	mov	r5, r1
 800c224:	d904      	bls.n	800c230 <_raise_r+0x14>
 800c226:	2316      	movs	r3, #22
 800c228:	6003      	str	r3, [r0, #0]
 800c22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c22e:	bd38      	pop	{r3, r4, r5, pc}
 800c230:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c232:	b112      	cbz	r2, 800c23a <_raise_r+0x1e>
 800c234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c238:	b94b      	cbnz	r3, 800c24e <_raise_r+0x32>
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 f830 	bl	800c2a0 <_getpid_r>
 800c240:	462a      	mov	r2, r5
 800c242:	4601      	mov	r1, r0
 800c244:	4620      	mov	r0, r4
 800c246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c24a:	f000 b817 	b.w	800c27c <_kill_r>
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d00a      	beq.n	800c268 <_raise_r+0x4c>
 800c252:	1c59      	adds	r1, r3, #1
 800c254:	d103      	bne.n	800c25e <_raise_r+0x42>
 800c256:	2316      	movs	r3, #22
 800c258:	6003      	str	r3, [r0, #0]
 800c25a:	2001      	movs	r0, #1
 800c25c:	e7e7      	b.n	800c22e <_raise_r+0x12>
 800c25e:	2400      	movs	r4, #0
 800c260:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c264:	4628      	mov	r0, r5
 800c266:	4798      	blx	r3
 800c268:	2000      	movs	r0, #0
 800c26a:	e7e0      	b.n	800c22e <_raise_r+0x12>

0800c26c <raise>:
 800c26c:	4b02      	ldr	r3, [pc, #8]	; (800c278 <raise+0xc>)
 800c26e:	4601      	mov	r1, r0
 800c270:	6818      	ldr	r0, [r3, #0]
 800c272:	f7ff bfd3 	b.w	800c21c <_raise_r>
 800c276:	bf00      	nop
 800c278:	20000178 	.word	0x20000178

0800c27c <_kill_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4d07      	ldr	r5, [pc, #28]	; (800c29c <_kill_r+0x20>)
 800c280:	2300      	movs	r3, #0
 800c282:	4604      	mov	r4, r0
 800c284:	4608      	mov	r0, r1
 800c286:	4611      	mov	r1, r2
 800c288:	602b      	str	r3, [r5, #0]
 800c28a:	f7f4 fd75 	bl	8000d78 <_kill>
 800c28e:	1c43      	adds	r3, r0, #1
 800c290:	d102      	bne.n	800c298 <_kill_r+0x1c>
 800c292:	682b      	ldr	r3, [r5, #0]
 800c294:	b103      	cbz	r3, 800c298 <_kill_r+0x1c>
 800c296:	6023      	str	r3, [r4, #0]
 800c298:	bd38      	pop	{r3, r4, r5, pc}
 800c29a:	bf00      	nop
 800c29c:	20002258 	.word	0x20002258

0800c2a0 <_getpid_r>:
 800c2a0:	f7f4 bd62 	b.w	8000d68 <_getpid>

0800c2a4 <_init>:
 800c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a6:	bf00      	nop
 800c2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2aa:	bc08      	pop	{r3}
 800c2ac:	469e      	mov	lr, r3
 800c2ae:	4770      	bx	lr

0800c2b0 <_fini>:
 800c2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b2:	bf00      	nop
 800c2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2b6:	bc08      	pop	{r3}
 800c2b8:	469e      	mov	lr, r3
 800c2ba:	4770      	bx	lr
