
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004174  08004174  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004174  08004174  00014174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800417c  0800417c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000014  08004198  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08004198  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008940  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f95  00000000  00000000  000289c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0002a960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000783  00000000  00000000  0002b320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000153df  00000000  00000000  0002baa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ab7a  00000000  00000000  00040e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084f27  00000000  00000000  0004b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000274c  00000000  00000000  000d0924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d3070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004124 	.word	0x08004124

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	08004124 	.word	0x08004124

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b970 	b.w	80004dc <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9e08      	ldr	r6, [sp, #32]
 800021a:	460d      	mov	r5, r1
 800021c:	4604      	mov	r4, r0
 800021e:	460f      	mov	r7, r1
 8000220:	2b00      	cmp	r3, #0
 8000222:	d14a      	bne.n	80002ba <__udivmoddi4+0xa6>
 8000224:	428a      	cmp	r2, r1
 8000226:	4694      	mov	ip, r2
 8000228:	d965      	bls.n	80002f6 <__udivmoddi4+0xe2>
 800022a:	fab2 f382 	clz	r3, r2
 800022e:	b143      	cbz	r3, 8000242 <__udivmoddi4+0x2e>
 8000230:	fa02 fc03 	lsl.w	ip, r2, r3
 8000234:	f1c3 0220 	rsb	r2, r3, #32
 8000238:	409f      	lsls	r7, r3
 800023a:	fa20 f202 	lsr.w	r2, r0, r2
 800023e:	4317      	orrs	r7, r2
 8000240:	409c      	lsls	r4, r3
 8000242:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000246:	fa1f f58c 	uxth.w	r5, ip
 800024a:	fbb7 f1fe 	udiv	r1, r7, lr
 800024e:	0c22      	lsrs	r2, r4, #16
 8000250:	fb0e 7711 	mls	r7, lr, r1, r7
 8000254:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000258:	fb01 f005 	mul.w	r0, r1, r5
 800025c:	4290      	cmp	r0, r2
 800025e:	d90a      	bls.n	8000276 <__udivmoddi4+0x62>
 8000260:	eb1c 0202 	adds.w	r2, ip, r2
 8000264:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000268:	f080 811c 	bcs.w	80004a4 <__udivmoddi4+0x290>
 800026c:	4290      	cmp	r0, r2
 800026e:	f240 8119 	bls.w	80004a4 <__udivmoddi4+0x290>
 8000272:	3902      	subs	r1, #2
 8000274:	4462      	add	r2, ip
 8000276:	1a12      	subs	r2, r2, r0
 8000278:	b2a4      	uxth	r4, r4
 800027a:	fbb2 f0fe 	udiv	r0, r2, lr
 800027e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000282:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000286:	fb00 f505 	mul.w	r5, r0, r5
 800028a:	42a5      	cmp	r5, r4
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x90>
 800028e:	eb1c 0404 	adds.w	r4, ip, r4
 8000292:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x294>
 800029a:	42a5      	cmp	r5, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x294>
 80002a0:	4464      	add	r4, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11e      	cbz	r6, 80002b6 <__udivmoddi4+0xa2>
 80002ae:	40dc      	lsrs	r4, r3
 80002b0:	2300      	movs	r3, #0
 80002b2:	e9c6 4300 	strd	r4, r3, [r6]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0xbc>
 80002be:	2e00      	cmp	r6, #0
 80002c0:	f000 80ed 	beq.w	800049e <__udivmoddi4+0x28a>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	d149      	bne.n	800036c <__udivmoddi4+0x158>
 80002d8:	42ab      	cmp	r3, r5
 80002da:	d302      	bcc.n	80002e2 <__udivmoddi4+0xce>
 80002dc:	4282      	cmp	r2, r0
 80002de:	f200 80f8 	bhi.w	80004d2 <__udivmoddi4+0x2be>
 80002e2:	1a84      	subs	r4, r0, r2
 80002e4:	eb65 0203 	sbc.w	r2, r5, r3
 80002e8:	2001      	movs	r0, #1
 80002ea:	4617      	mov	r7, r2
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d0e2      	beq.n	80002b6 <__udivmoddi4+0xa2>
 80002f0:	e9c6 4700 	strd	r4, r7, [r6]
 80002f4:	e7df      	b.n	80002b6 <__udivmoddi4+0xa2>
 80002f6:	b902      	cbnz	r2, 80002fa <__udivmoddi4+0xe6>
 80002f8:	deff      	udf	#255	; 0xff
 80002fa:	fab2 f382 	clz	r3, r2
 80002fe:	2b00      	cmp	r3, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x210>
 8000304:	1a8a      	subs	r2, r1, r2
 8000306:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030a:	fa1f fe8c 	uxth.w	lr, ip
 800030e:	2101      	movs	r1, #1
 8000310:	fbb2 f5f7 	udiv	r5, r2, r7
 8000314:	fb07 2015 	mls	r0, r7, r5, r2
 8000318:	0c22      	lsrs	r2, r4, #16
 800031a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031e:	fb0e f005 	mul.w	r0, lr, r5
 8000322:	4290      	cmp	r0, r2
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x124>
 8000326:	eb1c 0202 	adds.w	r2, ip, r2
 800032a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x122>
 8000330:	4290      	cmp	r0, r2
 8000332:	f200 80cb 	bhi.w	80004cc <__udivmoddi4+0x2b8>
 8000336:	4645      	mov	r5, r8
 8000338:	1a12      	subs	r2, r2, r0
 800033a:	b2a4      	uxth	r4, r4
 800033c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000340:	fb07 2210 	mls	r2, r7, r0, r2
 8000344:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000348:	fb0e fe00 	mul.w	lr, lr, r0
 800034c:	45a6      	cmp	lr, r4
 800034e:	d908      	bls.n	8000362 <__udivmoddi4+0x14e>
 8000350:	eb1c 0404 	adds.w	r4, ip, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x14c>
 800035a:	45a6      	cmp	lr, r4
 800035c:	f200 80bb 	bhi.w	80004d6 <__udivmoddi4+0x2c2>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 040e 	sub.w	r4, r4, lr
 8000366:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800036a:	e79f      	b.n	80002ac <__udivmoddi4+0x98>
 800036c:	f1c1 0720 	rsb	r7, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 fc07 	lsr.w	ip, r2, r7
 8000376:	ea4c 0c03 	orr.w	ip, ip, r3
 800037a:	fa05 f401 	lsl.w	r4, r5, r1
 800037e:	fa20 f307 	lsr.w	r3, r0, r7
 8000382:	40fd      	lsrs	r5, r7
 8000384:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fbb5 f8f9 	udiv	r8, r5, r9
 800038e:	fa1f fe8c 	uxth.w	lr, ip
 8000392:	fb09 5518 	mls	r5, r9, r8, r5
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb08 f50e 	mul.w	r5, r8, lr
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	fa00 f001 	lsl.w	r0, r0, r1
 80003aa:	d90b      	bls.n	80003c4 <__udivmoddi4+0x1b0>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b4:	f080 8088 	bcs.w	80004c8 <__udivmoddi4+0x2b4>
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	f240 8085 	bls.w	80004c8 <__udivmoddi4+0x2b4>
 80003be:	f1a8 0802 	sub.w	r8, r8, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	b29d      	uxth	r5, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1da>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e4:	d26c      	bcs.n	80004c0 <__udivmoddi4+0x2ac>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	d96a      	bls.n	80004c0 <__udivmoddi4+0x2ac>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	4464      	add	r4, ip
 80003ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f2:	fba3 9502 	umull	r9, r5, r3, r2
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	42ac      	cmp	r4, r5
 80003fc:	46c8      	mov	r8, r9
 80003fe:	46ae      	mov	lr, r5
 8000400:	d356      	bcc.n	80004b0 <__udivmoddi4+0x29c>
 8000402:	d053      	beq.n	80004ac <__udivmoddi4+0x298>
 8000404:	b156      	cbz	r6, 800041c <__udivmoddi4+0x208>
 8000406:	ebb0 0208 	subs.w	r2, r0, r8
 800040a:	eb64 040e 	sbc.w	r4, r4, lr
 800040e:	fa04 f707 	lsl.w	r7, r4, r7
 8000412:	40ca      	lsrs	r2, r1
 8000414:	40cc      	lsrs	r4, r1
 8000416:	4317      	orrs	r7, r2
 8000418:	e9c6 7400 	strd	r7, r4, [r6]
 800041c:	4618      	mov	r0, r3
 800041e:	2100      	movs	r1, #0
 8000420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000424:	f1c3 0120 	rsb	r1, r3, #32
 8000428:	fa02 fc03 	lsl.w	ip, r2, r3
 800042c:	fa20 f201 	lsr.w	r2, r0, r1
 8000430:	fa25 f101 	lsr.w	r1, r5, r1
 8000434:	409d      	lsls	r5, r3
 8000436:	432a      	orrs	r2, r5
 8000438:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043c:	fa1f fe8c 	uxth.w	lr, ip
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1510 	mls	r5, r7, r0, r1
 8000448:	0c11      	lsrs	r1, r2, #16
 800044a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044e:	fb00 f50e 	mul.w	r5, r0, lr
 8000452:	428d      	cmp	r5, r1
 8000454:	fa04 f403 	lsl.w	r4, r4, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x258>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000462:	d22f      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000464:	428d      	cmp	r5, r1
 8000466:	d92d      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 8000468:	3802      	subs	r0, #2
 800046a:	4461      	add	r1, ip
 800046c:	1b49      	subs	r1, r1, r5
 800046e:	b292      	uxth	r2, r2
 8000470:	fbb1 f5f7 	udiv	r5, r1, r7
 8000474:	fb07 1115 	mls	r1, r7, r5, r1
 8000478:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800047c:	fb05 f10e 	mul.w	r1, r5, lr
 8000480:	4291      	cmp	r1, r2
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x282>
 8000484:	eb1c 0202 	adds.w	r2, ip, r2
 8000488:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800048c:	d216      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800048e:	4291      	cmp	r1, r2
 8000490:	d914      	bls.n	80004bc <__udivmoddi4+0x2a8>
 8000492:	3d02      	subs	r5, #2
 8000494:	4462      	add	r2, ip
 8000496:	1a52      	subs	r2, r2, r1
 8000498:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800049c:	e738      	b.n	8000310 <__udivmoddi4+0xfc>
 800049e:	4631      	mov	r1, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e708      	b.n	80002b6 <__udivmoddi4+0xa2>
 80004a4:	4639      	mov	r1, r7
 80004a6:	e6e6      	b.n	8000276 <__udivmoddi4+0x62>
 80004a8:	4610      	mov	r0, r2
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x90>
 80004ac:	4548      	cmp	r0, r9
 80004ae:	d2a9      	bcs.n	8000404 <__udivmoddi4+0x1f0>
 80004b0:	ebb9 0802 	subs.w	r8, r9, r2
 80004b4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b8:	3b01      	subs	r3, #1
 80004ba:	e7a3      	b.n	8000404 <__udivmoddi4+0x1f0>
 80004bc:	4645      	mov	r5, r8
 80004be:	e7ea      	b.n	8000496 <__udivmoddi4+0x282>
 80004c0:	462b      	mov	r3, r5
 80004c2:	e794      	b.n	80003ee <__udivmoddi4+0x1da>
 80004c4:	4640      	mov	r0, r8
 80004c6:	e7d1      	b.n	800046c <__udivmoddi4+0x258>
 80004c8:	46d0      	mov	r8, sl
 80004ca:	e77b      	b.n	80003c4 <__udivmoddi4+0x1b0>
 80004cc:	3d02      	subs	r5, #2
 80004ce:	4462      	add	r2, ip
 80004d0:	e732      	b.n	8000338 <__udivmoddi4+0x124>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e70a      	b.n	80002ec <__udivmoddi4+0xd8>
 80004d6:	4464      	add	r4, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e742      	b.n	8000362 <__udivmoddi4+0x14e>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e4:	f002 f89c 	bl	8002620 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004e8:	f000 f81c 	bl	8000524 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ec:	f000 f884 	bl	80005f8 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	if (!bootloader_init()) {
 80004f0:	f000 fd9a 	bl	8001028 <bootloader_init>
 80004f4:	4603      	mov	r3, r0
 80004f6:	f083 0301 	eor.w	r3, r3, #1
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <main+0x24>
		Error_Handler();
 8000500:	f000 f8cc 	bl	800069c <Error_Handler>
	}

	if (update_available()) {
 8000504:	f000 fdae 	bl	8001064 <update_available>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d006      	beq.n	800051c <main+0x3c>
		if (flash_process() != HAL_OK) {
 800050e:	f000 fe51 	bl	80011b4 <flash_process>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <main+0x3c>
			Error_Handler();
 8000518:	f000 f8c0 	bl	800069c <Error_Handler>
		}

	}

	//Jump to application
   	jump_to_app();
 800051c:	f000 fd94 	bl	8001048 <jump_to_app>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000520:	e7fe      	b.n	8000520 <main+0x40>
	...

08000524 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f003 fdca 	bl	80040cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <SystemClock_Config+0xd0>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8000598:	2319      	movs	r3, #25
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 800059c:	23a8      	movs	r3, #168	; 0xa8
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f002 fe53 	bl	8003258 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x98>
		Error_Handler();
 80005b8:	f000 f870 	bl	800069c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2102      	movs	r1, #2
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 f8b5 	bl	8003748 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
		Error_Handler();
 80005e4:	f000 f85a 	bl	800069c <Error_Handler>
	}
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_GPIO_Init+0x9c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <MX_GPIO_Init+0x9c>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_GPIO_Init+0x9c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_GPIO_Init+0x9c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a18      	ldr	r2, [pc, #96]	; (8000694 <MX_GPIO_Init+0x9c>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_GPIO_Init+0x9c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_GPIO_Init+0x9c>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a11      	ldr	r2, [pc, #68]	; (8000694 <MX_GPIO_Init+0x9c>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_GPIO_Init+0x9c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000668:	480b      	ldr	r0, [pc, #44]	; (8000698 <MX_GPIO_Init+0xa0>)
 800066a:	f002 fdc1 	bl	80031f0 <HAL_GPIO_WritePin>
	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800066e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000672:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000674:	2301      	movs	r3, #1
 8000676:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	4619      	mov	r1, r3
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_GPIO_Init+0xa0>)
 8000688:	f002 fc2e 	bl	8002ee8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800068c:	bf00      	nop
 800068e:	3720      	adds	r7, #32
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020800 	.word	0x40020800

0800069c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006a4:	e7fe      	b.n	80006a4 <Error_Handler+0x8>
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_MspInit+0x4c>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <HAL_MspInit+0x4c>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_MspInit+0x4c>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_MspInit+0x4c>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800

080006f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a19      	ldr	r2, [pc, #100]	; (800077c <HAL_SPI_MspInit+0x84>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d12b      	bne.n	8000772 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_SPI_MspInit+0x88>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	4a17      	ldr	r2, [pc, #92]	; (8000780 <HAL_SPI_MspInit+0x88>)
 8000724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000728:	6453      	str	r3, [r2, #68]	; 0x44
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_SPI_MspInit+0x88>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_SPI_MspInit+0x88>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <HAL_SPI_MspInit+0x88>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_SPI_MspInit+0x88>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000752:	23e0      	movs	r3, #224	; 0xe0
 8000754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000762:	2305      	movs	r3, #5
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <HAL_SPI_MspInit+0x8c>)
 800076e:	f002 fbbb 	bl	8002ee8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000772:	bf00      	nop
 8000774:	3728      	adds	r7, #40	; 0x28
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40013000 	.word	0x40013000
 8000780:	40023800 	.word	0x40023800
 8000784:	40020000 	.word	0x40020000

08000788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800078c:	e7fe      	b.n	800078c <NMI_Handler+0x4>

0800078e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <HardFault_Handler+0x4>

08000794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <MemManage_Handler+0x4>

0800079a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <BusFault_Handler+0x4>

080007a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>

080007a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f001 ff76 	bl	80026c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}

080007dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <SystemInit+0x20>)
 80007e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <SystemInit+0x20>)
 80007e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000838 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000804:	f7ff ffea 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	; (800084c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800082e:	f003 fc55 	bl	80040dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000832:	f7ff fe55 	bl	80004e0 <main>
  bx  lr    
 8000836:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000838:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000844:	08004184 	.word	0x08004184
  ldr r2, =_sbss
 8000848:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800084c:	200003a8 	.word	0x200003a8

08000850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC_IRQHandler>

08000852 <Error_Handler>:
#define CS_DISABLE() HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET)
#define CS_ENABLE()  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET)

SPI_HandleTypeDef hspi1;

static void Error_Handler(void) {
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000856:	b672      	cpsid	i
}
 8000858:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800085a:	e7fe      	b.n	800085a <Error_Handler+0x8>

0800085c <SPI_transfer>:
	}
	/* USER CODE END Error_Handler_Debug */
}

static inline uint8_t SPI_transfer(uint8_t tx_Byte) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af02      	add	r7, sp, #8
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_Byte;
	HAL_SPI_TransmitReceive(&hspi1, &tx_Byte, &rx_Byte, 1, HAL_MAX_DELAY);
 8000866:	f107 020f 	add.w	r2, r7, #15
 800086a:	1df9      	adds	r1, r7, #7
 800086c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <SPI_transfer+0x38>)
 8000876:	f003 f99c 	bl	8003bb2 <HAL_SPI_TransmitReceive>
	while (hspi1.State == HAL_SPI_STATE_BUSY)
 800087a:	bf00      	nop
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SPI_transfer+0x38>)
 800087e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b02      	cmp	r3, #2
 8000886:	d0f9      	beq.n	800087c <SPI_transfer+0x20>
		;  // wait xmission complete
	return rx_Byte;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000030 	.word	0x20000030

08000898 <SD_powerUpSeq>:

void SD_powerUpSeq() {
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	// make sure card is deselected
	CS_DISABLE();
 800089e:	2201      	movs	r2, #1
 80008a0:	2110      	movs	r1, #16
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <SD_powerUpSeq+0x48>)
 80008a4:	f002 fca4 	bl	80031f0 <HAL_GPIO_WritePin>

	// give SD card time to power up
	HAL_Delay(1);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f001 ff2b 	bl	8002704 <HAL_Delay>

	// send 80 clock cycles to synchronize
	for (uint8_t i = 0; i < 20; i++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	e005      	b.n	80008c0 <SD_powerUpSeq+0x28>
		SPI_transfer(0xFF);
 80008b4:	20ff      	movs	r0, #255	; 0xff
 80008b6:	f7ff ffd1 	bl	800085c <SPI_transfer>
	for (uint8_t i = 0; i < 20; i++)
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	3301      	adds	r3, #1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b13      	cmp	r3, #19
 80008c4:	d9f6      	bls.n	80008b4 <SD_powerUpSeq+0x1c>

	// deselect SD card
	CS_DISABLE();
 80008c6:	2201      	movs	r2, #1
 80008c8:	2110      	movs	r1, #16
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <SD_powerUpSeq+0x48>)
 80008cc:	f002 fc90 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 80008d0:	20ff      	movs	r0, #255	; 0xff
 80008d2:	f7ff ffc3 	bl	800085c <SPI_transfer>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020000 	.word	0x40020000

080008e4 <SD_command>:

void SD_command(uint8_t cmd, uint32_t arg, uint8_t crc) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	// transmit command to sd card
	SPI_transfer(cmd | 0x40);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ffad 	bl	800085c <SPI_transfer>

	// transmit argument
	SPI_transfer((uint8_t) (arg >> 24));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	0e1b      	lsrs	r3, r3, #24
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff ffa7 	bl	800085c <SPI_transfer>
	SPI_transfer((uint8_t) (arg >> 16));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	0c1b      	lsrs	r3, r3, #16
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ffa1 	bl	800085c <SPI_transfer>
	SPI_transfer((uint8_t) (arg >> 8));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	0a1b      	lsrs	r3, r3, #8
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff9b 	bl	800085c <SPI_transfer>
	SPI_transfer((uint8_t) (arg));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2db      	uxtb	r3, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff96 	bl	800085c <SPI_transfer>

	// transmit crc
	SPI_transfer(crc | 0x01);
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff8f 	bl	800085c <SPI_transfer>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <SD_readRes1>:

uint8_t SD_readRes1() {
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
	uint8_t i = 0, res1;
 800094c:	2300      	movs	r3, #0
 800094e:	71fb      	strb	r3, [r7, #7]

	// keep polling until actual data received
	while ((res1 = SPI_transfer(0xFF)) == 0xFF) {
 8000950:	e005      	b.n	800095e <SD_readRes1+0x18>
		i++;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	3301      	adds	r3, #1
 8000956:	71fb      	strb	r3, [r7, #7]

		// if no data received for 8 bytes, break
		if (i > 8)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b08      	cmp	r3, #8
 800095c:	d808      	bhi.n	8000970 <SD_readRes1+0x2a>
	while ((res1 = SPI_transfer(0xFF)) == 0xFF) {
 800095e:	20ff      	movs	r0, #255	; 0xff
 8000960:	f7ff ff7c 	bl	800085c <SPI_transfer>
 8000964:	4603      	mov	r3, r0
 8000966:	71bb      	strb	r3, [r7, #6]
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	2bff      	cmp	r3, #255	; 0xff
 800096c:	d0f1      	beq.n	8000952 <SD_readRes1+0xc>
 800096e:	e000      	b.n	8000972 <SD_readRes1+0x2c>
			break;
 8000970:	bf00      	nop
	}

	return res1;
 8000972:	79bb      	ldrb	r3, [r7, #6]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <SD_goIdleState>:

uint8_t SD_goIdleState() {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
	// assert chip select
	SPI_transfer(0xFF);
 8000982:	20ff      	movs	r0, #255	; 0xff
 8000984:	f7ff ff6a 	bl	800085c <SPI_transfer>
	CS_ENABLE();
 8000988:	2200      	movs	r2, #0
 800098a:	2110      	movs	r1, #16
 800098c:	480f      	ldr	r0, [pc, #60]	; (80009cc <SD_goIdleState+0x50>)
 800098e:	f002 fc2f 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000992:	20ff      	movs	r0, #255	; 0xff
 8000994:	f7ff ff62 	bl	800085c <SPI_transfer>

	// send CMD0
	SD_command(CMD0, CMD0_ARG, CMD0_CRC);
 8000998:	2294      	movs	r2, #148	; 0x94
 800099a:	2100      	movs	r1, #0
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff ffa1 	bl	80008e4 <SD_command>

	// read response
	uint8_t res1 = SD_readRes1();
 80009a2:	f7ff ffd0 	bl	8000946 <SD_readRes1>
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]

	// deassert chip select
	SPI_transfer(0xFF);
 80009aa:	20ff      	movs	r0, #255	; 0xff
 80009ac:	f7ff ff56 	bl	800085c <SPI_transfer>
	CS_DISABLE();
 80009b0:	2201      	movs	r2, #1
 80009b2:	2110      	movs	r1, #16
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <SD_goIdleState+0x50>)
 80009b6:	f002 fc1b 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 80009ba:	20ff      	movs	r0, #255	; 0xff
 80009bc:	f7ff ff4e 	bl	800085c <SPI_transfer>

	return res1;
 80009c0:	79fb      	ldrb	r3, [r7, #7]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40020000 	.word	0x40020000

080009d0 <SD_readRes3_7>:

void SD_readRes3_7(uint8_t *res) {
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	// read response 1 in R7
	res[0] = SD_readRes1();
 80009d8:	f7ff ffb5 	bl	8000946 <SD_readRes1>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	701a      	strb	r2, [r3, #0]

	// if error reading R1, return
	if (res[0] > 1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d81c      	bhi.n	8000a26 <SD_readRes3_7+0x56>
		return;

	// read remaining bytes
	res[1] = SPI_transfer(0xFF);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	1c5c      	adds	r4, r3, #1
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	f7ff ff33 	bl	800085c <SPI_transfer>
 80009f6:	4603      	mov	r3, r0
 80009f8:	7023      	strb	r3, [r4, #0]
	res[2] = SPI_transfer(0xFF);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	1c9c      	adds	r4, r3, #2
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	f7ff ff2c 	bl	800085c <SPI_transfer>
 8000a04:	4603      	mov	r3, r0
 8000a06:	7023      	strb	r3, [r4, #0]
	res[3] = SPI_transfer(0xFF);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	1cdc      	adds	r4, r3, #3
 8000a0c:	20ff      	movs	r0, #255	; 0xff
 8000a0e:	f7ff ff25 	bl	800085c <SPI_transfer>
 8000a12:	4603      	mov	r3, r0
 8000a14:	7023      	strb	r3, [r4, #0]
	res[4] = SPI_transfer(0xFF);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	1d1c      	adds	r4, r3, #4
 8000a1a:	20ff      	movs	r0, #255	; 0xff
 8000a1c:	f7ff ff1e 	bl	800085c <SPI_transfer>
 8000a20:	4603      	mov	r3, r0
 8000a22:	7023      	strb	r3, [r4, #0]
 8000a24:	e000      	b.n	8000a28 <SD_readRes3_7+0x58>
		return;
 8000a26:	bf00      	nop
}
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd90      	pop	{r4, r7, pc}
	...

08000a30 <SD_sendIfCond>:

void SD_sendIfCond(uint8_t *res) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	// assert chip select
	SPI_transfer(0xFF);
 8000a38:	20ff      	movs	r0, #255	; 0xff
 8000a3a:	f7ff ff0f 	bl	800085c <SPI_transfer>
	CS_ENABLE();
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2110      	movs	r1, #16
 8000a42:	480f      	ldr	r0, [pc, #60]	; (8000a80 <SD_sendIfCond+0x50>)
 8000a44:	f002 fbd4 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	f7ff ff07 	bl	800085c <SPI_transfer>

	// send CMD8
	SD_command(CMD8, CMD8_ARG, CMD8_CRC);
 8000a4e:	2286      	movs	r2, #134	; 0x86
 8000a50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000a54:	2008      	movs	r0, #8
 8000a56:	f7ff ff45 	bl	80008e4 <SD_command>

	// read response
	SD_readRes3_7(res);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f7ff ffb8 	bl	80009d0 <SD_readRes3_7>

	// deassert chip select
	SPI_transfer(0xFF);
 8000a60:	20ff      	movs	r0, #255	; 0xff
 8000a62:	f7ff fefb 	bl	800085c <SPI_transfer>
	CS_DISABLE();
 8000a66:	2201      	movs	r2, #1
 8000a68:	2110      	movs	r1, #16
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <SD_sendIfCond+0x50>)
 8000a6c:	f002 fbc0 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	f7ff fef3 	bl	800085c <SPI_transfer>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020000 	.word	0x40020000

08000a84 <SD_readOCR>:

void SD_readOCR(uint8_t *res) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	// assert chip select
	SPI_transfer(0xFF);
 8000a8c:	20ff      	movs	r0, #255	; 0xff
 8000a8e:	f7ff fee5 	bl	800085c <SPI_transfer>
	CS_ENABLE();
 8000a92:	2200      	movs	r2, #0
 8000a94:	2110      	movs	r1, #16
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <SD_readOCR+0x4c>)
 8000a98:	f002 fbaa 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000a9c:	20ff      	movs	r0, #255	; 0xff
 8000a9e:	f7ff fedd 	bl	800085c <SPI_transfer>

	// send CMD58
	SD_command(CMD58, CMD58_ARG, CMD58_CRC);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	203a      	movs	r0, #58	; 0x3a
 8000aa8:	f7ff ff1c 	bl	80008e4 <SD_command>

	// read response
	SD_readRes3_7(res);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff8f 	bl	80009d0 <SD_readRes3_7>

	// deassert chip select
	SPI_transfer(0xFF);
 8000ab2:	20ff      	movs	r0, #255	; 0xff
 8000ab4:	f7ff fed2 	bl	800085c <SPI_transfer>
	CS_DISABLE();
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2110      	movs	r1, #16
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <SD_readOCR+0x4c>)
 8000abe:	f002 fb97 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000ac2:	20ff      	movs	r0, #255	; 0xff
 8000ac4:	f7ff feca 	bl	800085c <SPI_transfer>
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <SD_sendApp>:

uint8_t SD_sendApp() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
	// assert chip select
	SPI_transfer(0xFF);
 8000ada:	20ff      	movs	r0, #255	; 0xff
 8000adc:	f7ff febe 	bl	800085c <SPI_transfer>
	CS_ENABLE();
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	480f      	ldr	r0, [pc, #60]	; (8000b24 <SD_sendApp+0x50>)
 8000ae6:	f002 fb83 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000aea:	20ff      	movs	r0, #255	; 0xff
 8000aec:	f7ff feb6 	bl	800085c <SPI_transfer>

	// send CMD0
	SD_command(CMD55, CMD55_ARG, CMD55_CRC);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2037      	movs	r0, #55	; 0x37
 8000af6:	f7ff fef5 	bl	80008e4 <SD_command>

	// read response
	uint8_t res1 = SD_readRes1();
 8000afa:	f7ff ff24 	bl	8000946 <SD_readRes1>
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]

	// deassert chip select
	SPI_transfer(0xFF);
 8000b02:	20ff      	movs	r0, #255	; 0xff
 8000b04:	f7ff feaa 	bl	800085c <SPI_transfer>
	CS_DISABLE();
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2110      	movs	r1, #16
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <SD_sendApp+0x50>)
 8000b0e:	f002 fb6f 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000b12:	20ff      	movs	r0, #255	; 0xff
 8000b14:	f7ff fea2 	bl	800085c <SPI_transfer>

	return res1;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40020000 	.word	0x40020000

08000b28 <SD_sendOpCond>:

uint8_t SD_sendOpCond() {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	// assert chip select
	SPI_transfer(0xFF);
 8000b2e:	20ff      	movs	r0, #255	; 0xff
 8000b30:	f7ff fe94 	bl	800085c <SPI_transfer>
	CS_ENABLE();
 8000b34:	2200      	movs	r2, #0
 8000b36:	2110      	movs	r1, #16
 8000b38:	480f      	ldr	r0, [pc, #60]	; (8000b78 <SD_sendOpCond+0x50>)
 8000b3a:	f002 fb59 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000b3e:	20ff      	movs	r0, #255	; 0xff
 8000b40:	f7ff fe8c 	bl	800085c <SPI_transfer>

	// send CMD0
	SD_command(ACMD41, ACMD41_ARG, ACMD41_CRC);
 8000b44:	2200      	movs	r2, #0
 8000b46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b4a:	2029      	movs	r0, #41	; 0x29
 8000b4c:	f7ff feca 	bl	80008e4 <SD_command>

	// read response
	uint8_t res1 = SD_readRes1();
 8000b50:	f7ff fef9 	bl	8000946 <SD_readRes1>
 8000b54:	4603      	mov	r3, r0
 8000b56:	71fb      	strb	r3, [r7, #7]

	// deassert chip select
	SPI_transfer(0xFF);
 8000b58:	20ff      	movs	r0, #255	; 0xff
 8000b5a:	f7ff fe7f 	bl	800085c <SPI_transfer>
	CS_DISABLE();
 8000b5e:	2201      	movs	r2, #1
 8000b60:	2110      	movs	r1, #16
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <SD_sendOpCond+0x50>)
 8000b64:	f002 fb44 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000b68:	20ff      	movs	r0, #255	; 0xff
 8000b6a:	f7ff fe77 	bl	800085c <SPI_transfer>

	return res1;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40020000 	.word	0x40020000

08000b7c <SD_read_start>:
	if (SD_TOKEN_ERROR(token))
		//USB_SerialPrint("\tError\r\n");
}
*/

uint8_t SD_read_start(uint8_t *buf, uint16_t read_len, uint8_t *token) {
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	460b      	mov	r3, r1
 8000b86:	607a      	str	r2, [r7, #4]
 8000b88:	817b      	strh	r3, [r7, #10]
	uint8_t res1, read;
	uint16_t readAttempts;

	// read R1
	res1 = SD_readRes1();
 8000b8a:	f7ff fedc 	bl	8000946 <SD_readRes1>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	74fb      	strb	r3, [r7, #19]

	// if response received from card
	if (res1 == SD_READY) {
 8000b92:	7cfb      	ldrb	r3, [r7, #19]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d132      	bne.n	8000bfe <SD_read_start+0x82>
		// wait for a response token (timeout = 100ms)
		readAttempts = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	82fb      	strh	r3, [r7, #22]

		while ((read = SPI_transfer(0xFF)) != 0xFE) {
 8000b9c:	e007      	b.n	8000bae <SD_read_start+0x32>

			if (readAttempts == SD_MAX_READ_ATTEMPTS)
 8000b9e:	8afb      	ldrh	r3, [r7, #22]
 8000ba0:	f241 1294 	movw	r2, #4500	; 0x1194
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d00b      	beq.n	8000bc0 <SD_read_start+0x44>
				break;
			readAttempts++;
 8000ba8:	8afb      	ldrh	r3, [r7, #22]
 8000baa:	3301      	adds	r3, #1
 8000bac:	82fb      	strh	r3, [r7, #22]
		while ((read = SPI_transfer(0xFF)) != 0xFE) {
 8000bae:	20ff      	movs	r0, #255	; 0xff
 8000bb0:	f7ff fe54 	bl	800085c <SPI_transfer>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	74bb      	strb	r3, [r7, #18]
 8000bb8:	7cbb      	ldrb	r3, [r7, #18]
 8000bba:	2bfe      	cmp	r3, #254	; 0xfe
 8000bbc:	d1ef      	bne.n	8000b9e <SD_read_start+0x22>
 8000bbe:	e000      	b.n	8000bc2 <SD_read_start+0x46>
				break;
 8000bc0:	bf00      	nop
		}

		// if response token is 0xFE
		if (read == 0xFE) {
 8000bc2:	7cbb      	ldrb	r3, [r7, #18]
 8000bc4:	2bfe      	cmp	r3, #254	; 0xfe
 8000bc6:	d117      	bne.n	8000bf8 <SD_read_start+0x7c>
			// read 512 byte block
			for (uint16_t i = 0; i < read_len; i++)
 8000bc8:	2300      	movs	r3, #0
 8000bca:	82bb      	strh	r3, [r7, #20]
 8000bcc:	e00a      	b.n	8000be4 <SD_read_start+0x68>
				*buf++ = SPI_transfer(0xFF);
 8000bce:	68fc      	ldr	r4, [r7, #12]
 8000bd0:	1c63      	adds	r3, r4, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	20ff      	movs	r0, #255	; 0xff
 8000bd6:	f7ff fe41 	bl	800085c <SPI_transfer>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	7023      	strb	r3, [r4, #0]
			for (uint16_t i = 0; i < read_len; i++)
 8000bde:	8abb      	ldrh	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	82bb      	strh	r3, [r7, #20]
 8000be4:	8aba      	ldrh	r2, [r7, #20]
 8000be6:	897b      	ldrh	r3, [r7, #10]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d3f0      	bcc.n	8000bce <SD_read_start+0x52>

			// read 16-bit CRC
			SPI_transfer(0xFF);
 8000bec:	20ff      	movs	r0, #255	; 0xff
 8000bee:	f7ff fe35 	bl	800085c <SPI_transfer>
			SPI_transfer(0xFF);
 8000bf2:	20ff      	movs	r0, #255	; 0xff
 8000bf4:	f7ff fe32 	bl	800085c <SPI_transfer>
		}

		// set token to card response
		*token = read;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	7cba      	ldrb	r2, [r7, #18]
 8000bfc:	701a      	strb	r2, [r3, #0]
	}

	return res1;
 8000bfe:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	371c      	adds	r7, #28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd90      	pop	{r4, r7, pc}

08000c08 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c0e:	4a18      	ldr	r2, [pc, #96]	; (8000c70 <MX_SPI1_Init+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c18:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c20:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c38:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c3c:	2208      	movs	r2, #8
 8000c3e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4c:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c54:	220a      	movs	r2, #10
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_SPI1_Init+0x64>)
 8000c5a:	f002 ff21 	bl	8003aa0 <HAL_SPI_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000c64:	f7ff fdf5 	bl	8000852 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000030 	.word	0x20000030
 8000c70:	40013000 	.word	0x40013000

08000c74 <SD_init>:

uint8_t SD_init() {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
	MX_SPI1_Init();
 8000c8a:	f7ff ffbd 	bl	8000c08 <MX_SPI1_Init>

	/*Configure GPIO pin : PA4 for Chip Select*/
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c8e:	2310      	movs	r3, #16
 8000c90:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4828      	ldr	r0, [pc, #160]	; (8000d48 <SD_init+0xd4>)
 8000ca6:	f002 f91f 	bl	8002ee8 <HAL_GPIO_Init>

	uint8_t res[5], cmdAttempts = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	77fb      	strb	r3, [r7, #31]

	SD_powerUpSeq();
 8000cae:	f7ff fdf3 	bl	8000898 <SD_powerUpSeq>

	// command card to idle
	while ((res[0] = SD_goIdleState()) != 0x01) {
 8000cb2:	e00a      	b.n	8000cca <SD_init+0x56>
		cmdAttempts++;
 8000cb4:	7ffb      	ldrb	r3, [r7, #31]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	77fb      	strb	r3, [r7, #31]
		if (cmdAttempts > 50) {
 8000cba:	7ffb      	ldrb	r3, [r7, #31]
 8000cbc:	2b32      	cmp	r3, #50	; 0x32
 8000cbe:	d904      	bls.n	8000cca <SD_init+0x56>
			if (res[0] == 0)
 8000cc0:	783b      	ldrb	r3, [r7, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <SD_init+0x56>
				//USB_SerialPrint("Card Not Found!\r\n");

			// SD_printR1(res[0]);
			return SD_INIT_ERROR;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	e03a      	b.n	8000d40 <SD_init+0xcc>
	while ((res[0] = SD_goIdleState()) != 0x01) {
 8000cca:	f7ff fe57 	bl	800097c <SD_goIdleState>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	703b      	strb	r3, [r7, #0]
 8000cd2:	783b      	ldrb	r3, [r7, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d1ed      	bne.n	8000cb4 <SD_init+0x40>
		}
	}

	// send interface conditions
	SD_sendIfCond(res);
 8000cd8:	463b      	mov	r3, r7
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fea8 	bl	8000a30 <SD_sendIfCond>
	if (res[0] != 0x01) {
 8000ce0:	783b      	ldrb	r3, [r7, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d001      	beq.n	8000cea <SD_init+0x76>
		// SD_printR1(res[0]);
		return SD_INIT_ERROR;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e02a      	b.n	8000d40 <SD_init+0xcc>
	}

	// check echo pattern
	if (res[4] != 0xAA) {
 8000cea:	793b      	ldrb	r3, [r7, #4]
 8000cec:	2baa      	cmp	r3, #170	; 0xaa
 8000cee:	d001      	beq.n	8000cf4 <SD_init+0x80>
		// SD_printR7(res);
		return SD_INIT_ERROR;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e025      	b.n	8000d40 <SD_init+0xcc>
	}

	// attempt to initialize card
	cmdAttempts = 0;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	77fb      	strb	r3, [r7, #31]
	do {
		if (cmdAttempts > 100)
 8000cf8:	7ffb      	ldrb	r3, [r7, #31]
 8000cfa:	2b64      	cmp	r3, #100	; 0x64
 8000cfc:	d901      	bls.n	8000d02 <SD_init+0x8e>
			return SD_INIT_ERROR;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	e01e      	b.n	8000d40 <SD_init+0xcc>

		// send app cmd
		res[0] = SD_sendApp();
 8000d02:	f7ff fee7 	bl	8000ad4 <SD_sendApp>
 8000d06:	4603      	mov	r3, r0
 8000d08:	703b      	strb	r3, [r7, #0]

		// if no error in response
		if (res[0] < 2) {
 8000d0a:	783b      	ldrb	r3, [r7, #0]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d803      	bhi.n	8000d18 <SD_init+0xa4>
			res[0] = SD_sendOpCond();
 8000d10:	f7ff ff0a 	bl	8000b28 <SD_sendOpCond>
 8000d14:	4603      	mov	r3, r0
 8000d16:	703b      	strb	r3, [r7, #0]
		}

		// wait
		HAL_Delay(10);
 8000d18:	200a      	movs	r0, #10
 8000d1a:	f001 fcf3 	bl	8002704 <HAL_Delay>

		cmdAttempts++;
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]
 8000d20:	3301      	adds	r3, #1
 8000d22:	77fb      	strb	r3, [r7, #31]
	} while (res[0] != SD_READY);
 8000d24:	783b      	ldrb	r3, [r7, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1e6      	bne.n	8000cf8 <SD_init+0x84>

	// read OCR
	SD_readOCR(res);
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fea9 	bl	8000a84 <SD_readOCR>
	// check card is ready
	if (!(res[1] & 0x80)) {
 8000d32:	787b      	ldrb	r3, [r7, #1]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db01      	blt.n	8000d3e <SD_init+0xca>
		// SD_printR3(res);
		return SD_INIT_ERROR;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e000      	b.n	8000d40 <SD_init+0xcc>
	} else {
		//if (res[1] & 0x40)
			//USB_SerialPrint("Card Type: SDHC\r\n");
	}
	return SD_INIT_SUCCESS;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40020000 	.word	0x40020000

08000d4c <SD_readSingleBlock>:

uint8_t SD_readSingleBlock(uint32_t addr, uint8_t *buf, uint8_t *token) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	// set token to none
	*token = 0xFF;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	22ff      	movs	r2, #255	; 0xff
 8000d5c:	701a      	strb	r2, [r3, #0]

	// assert chip select
	SPI_transfer(0xFF);
 8000d5e:	20ff      	movs	r0, #255	; 0xff
 8000d60:	f7ff fd7c 	bl	800085c <SPI_transfer>
	CS_ENABLE();
 8000d64:	2200      	movs	r2, #0
 8000d66:	2110      	movs	r1, #16
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <SD_readSingleBlock+0x64>)
 8000d6a:	f002 fa41 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000d6e:	20ff      	movs	r0, #255	; 0xff
 8000d70:	f7ff fd74 	bl	800085c <SPI_transfer>

	// send CMD17
	SD_command(CMD17, addr, CMD17_CRC);
 8000d74:	2295      	movs	r2, #149	; 0x95
 8000d76:	68f9      	ldr	r1, [r7, #12]
 8000d78:	2011      	movs	r0, #17
 8000d7a:	f7ff fdb3 	bl	80008e4 <SD_command>

	uint8_t res1 = SD_read_start(buf, SD_BLOCK_LEN, token);
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d84:	68b8      	ldr	r0, [r7, #8]
 8000d86:	f7ff fef9 	bl	8000b7c <SD_read_start>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	75fb      	strb	r3, [r7, #23]

	// deassert chip select
	SPI_transfer(0xFF);
 8000d8e:	20ff      	movs	r0, #255	; 0xff
 8000d90:	f7ff fd64 	bl	800085c <SPI_transfer>
	CS_DISABLE();
 8000d94:	2201      	movs	r2, #1
 8000d96:	2110      	movs	r1, #16
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <SD_readSingleBlock+0x64>)
 8000d9a:	f002 fa29 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000d9e:	20ff      	movs	r0, #255	; 0xff
 8000da0:	f7ff fd5c 	bl	800085c <SPI_transfer>

	return res1;
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020000 	.word	0x40020000

08000db4 <SD_readSector>:

uint8_t SD_readSector(uint32_t addr, uint8_t *buf) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	uint8_t res1, token;

	res1 = SD_readSingleBlock(addr, buf, &token);
 8000dbe:	f107 030e 	add.w	r3, r7, #14
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	6839      	ldr	r1, [r7, #0]
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffc0 	bl	8000d4c <SD_readSingleBlock>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73fb      	strb	r3, [r7, #15]
	if (res1 == SD_READY) {
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d10d      	bne.n	8000df2 <SD_readSector+0x3e>
		// if error token received
		if (!(token & 0xF0)) {
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d101      	bne.n	8000de4 <SD_readSector+0x30>
			//SD_printDataErrToken(token);
			return SD_READ_ERROR;
 8000de0:	2304      	movs	r3, #4
 8000de2:	e007      	b.n	8000df4 <SD_readSector+0x40>
		} else if (token == 0xFF) {
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	2bff      	cmp	r3, #255	; 0xff
 8000de8:	d101      	bne.n	8000dee <SD_readSector+0x3a>
			//USB_SerialPrint("Read Timeout\r\n");
			return SD_READ_ERROR;
 8000dea:	2304      	movs	r3, #4
 8000dec:	e002      	b.n	8000df4 <SD_readSector+0x40>
		}
		return SD_READ_SUCCESS;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e000      	b.n	8000df4 <SD_readSector+0x40>
	} else {
		// SD_printR1(res1);
		return SD_READ_ERROR;
 8000df2:	2304      	movs	r3, #4
	}
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_writeSingleBlock>:

uint8_t _writeSingleBlock(uint32_t addr, uint8_t *buf, uint8_t *token) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
	uint8_t writeAttempts, read, res1;

	// set token to none
	*token = 0xFF;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	701a      	strb	r2, [r3, #0]

	// assert chip select
	SPI_transfer(0xFF);
 8000e0e:	20ff      	movs	r0, #255	; 0xff
 8000e10:	f7ff fd24 	bl	800085c <SPI_transfer>
	CS_ENABLE();
 8000e14:	2200      	movs	r2, #0
 8000e16:	2110      	movs	r1, #16
 8000e18:	482c      	ldr	r0, [pc, #176]	; (8000ecc <_writeSingleBlock+0xd0>)
 8000e1a:	f002 f9e9 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000e1e:	20ff      	movs	r0, #255	; 0xff
 8000e20:	f7ff fd1c 	bl	800085c <SPI_transfer>

	// send CMD24
	SD_command(CMD24, addr, CMD24_CRC);
 8000e24:	2200      	movs	r2, #0
 8000e26:	68f9      	ldr	r1, [r7, #12]
 8000e28:	2018      	movs	r0, #24
 8000e2a:	f7ff fd5b 	bl	80008e4 <SD_command>

	// read response
	res1 = SD_readRes1();
 8000e2e:	f7ff fd8a 	bl	8000946 <SD_readRes1>
 8000e32:	4603      	mov	r3, r0
 8000e34:	74fb      	strb	r3, [r7, #19]

	// if no error
	if (res1 == SD_READY) {
 8000e36:	7cfb      	ldrb	r3, [r7, #19]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d136      	bne.n	8000eaa <_writeSingleBlock+0xae>
		// send start token
		SPI_transfer(SD_START_TOKEN);
 8000e3c:	20fe      	movs	r0, #254	; 0xfe
 8000e3e:	f7ff fd0d 	bl	800085c <SPI_transfer>

		// write buffer to card
		for (uint16_t i = 0; i < SD_BLOCK_LEN; i++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	82bb      	strh	r3, [r7, #20]
 8000e46:	e009      	b.n	8000e5c <_writeSingleBlock+0x60>
			SPI_transfer(buf[i]);
 8000e48:	8abb      	ldrh	r3, [r7, #20]
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fd03 	bl	800085c <SPI_transfer>
		for (uint16_t i = 0; i < SD_BLOCK_LEN; i++)
 8000e56:	8abb      	ldrh	r3, [r7, #20]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	82bb      	strh	r3, [r7, #20]
 8000e5c:	8abb      	ldrh	r3, [r7, #20]
 8000e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e62:	d3f1      	bcc.n	8000e48 <_writeSingleBlock+0x4c>
		// wait for a response (timeout = 250ms)
		writeAttempts = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	75fb      	strb	r3, [r7, #23]

		while (writeAttempts != SD_MAX_WRITE_ATTEMPTS) {
			if ((read = SPI_transfer(0xFF)) != 0xFF)
 8000e68:	20ff      	movs	r0, #255	; 0xff
 8000e6a:	f7ff fcf7 	bl	800085c <SPI_transfer>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	74bb      	strb	r3, [r7, #18]
 8000e72:	7cbb      	ldrb	r3, [r7, #18]
 8000e74:	2bff      	cmp	r3, #255	; 0xff
 8000e76:	d103      	bne.n	8000e80 <_writeSingleBlock+0x84>
				break;
			writeAttempts++;
 8000e78:	7dfb      	ldrb	r3, [r7, #23]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	75fb      	strb	r3, [r7, #23]
			if ((read = SPI_transfer(0xFF)) != 0xFF)
 8000e7e:	e7f3      	b.n	8000e68 <_writeSingleBlock+0x6c>
				break;
 8000e80:	bf00      	nop
		}
		// if data accepted
		if ((read & 0x1F) == 0x05) {
 8000e82:	7cbb      	ldrb	r3, [r7, #18]
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	2b05      	cmp	r3, #5
 8000e8a:	d10e      	bne.n	8000eaa <_writeSingleBlock+0xae>
			// set token to data accepted
			*token = 0x05;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2205      	movs	r2, #5
 8000e90:	701a      	strb	r2, [r3, #0]

			// wait for write to finish (timeout = 250ms)
			writeAttempts = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	75fb      	strb	r3, [r7, #23]
			while (SPI_transfer(0xFF) == 0x00) {
 8000e96:	e002      	b.n	8000e9e <_writeSingleBlock+0xa2>
				if (writeAttempts == SD_MAX_WRITE_ATTEMPTS) {
					*token = 0x00;
					break;
				}
				writeAttempts++;
 8000e98:	7dfb      	ldrb	r3, [r7, #23]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	75fb      	strb	r3, [r7, #23]
			while (SPI_transfer(0xFF) == 0x00) {
 8000e9e:	20ff      	movs	r0, #255	; 0xff
 8000ea0:	f7ff fcdc 	bl	800085c <SPI_transfer>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d0f6      	beq.n	8000e98 <_writeSingleBlock+0x9c>
			}
		}
	}
	// deassert chip select
	SPI_transfer(0xFF);
 8000eaa:	20ff      	movs	r0, #255	; 0xff
 8000eac:	f7ff fcd6 	bl	800085c <SPI_transfer>
	CS_DISABLE();
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2110      	movs	r1, #16
 8000eb4:	4805      	ldr	r0, [pc, #20]	; (8000ecc <_writeSingleBlock+0xd0>)
 8000eb6:	f002 f99b 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000eba:	20ff      	movs	r0, #255	; 0xff
 8000ebc:	f7ff fcce 	bl	800085c <SPI_transfer>

	return res1;
 8000ec0:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <SD_writeSector>:

uint8_t SD_writeSector(uint32_t addr, uint8_t *buf) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
	uint8_t token, res1;
	res1 = _writeSingleBlock(addr, buf, &token);
 8000eda:	f107 030e 	add.w	r3, r7, #14
 8000ede:	461a      	mov	r2, r3
 8000ee0:	6839      	ldr	r1, [r7, #0]
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff8a 	bl	8000dfc <_writeSingleBlock>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	73fb      	strb	r3, [r7, #15]

	if (res1 == SD_READY) {
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d10c      	bne.n	8000f0c <SD_writeSector+0x3c>
		if (token == 0x05)
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d101      	bne.n	8000efc <SD_writeSector+0x2c>
			return SD_WRITE_SUCCESS;
 8000ef8:	2305      	movs	r3, #5
 8000efa:	e00a      	b.n	8000f12 <SD_writeSector+0x42>
		else if (token == 0xFF || token == 0x00)
 8000efc:	7bbb      	ldrb	r3, [r7, #14]
 8000efe:	2bff      	cmp	r3, #255	; 0xff
 8000f00:	d002      	beq.n	8000f08 <SD_writeSector+0x38>
 8000f02:	7bbb      	ldrb	r3, [r7, #14]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d103      	bne.n	8000f10 <SD_writeSector+0x40>
			return SD_WRITE_ERROR;
 8000f08:	2306      	movs	r3, #6
 8000f0a:	e002      	b.n	8000f12 <SD_writeSector+0x42>
	} else {
		// SD_printR1(res1);
		return SD_WRITE_ERROR;
 8000f0c:	2306      	movs	r3, #6
 8000f0e:	e000      	b.n	8000f12 <SD_writeSector+0x42>
	}
	return SD_WRITE_ERROR;
 8000f10:	2306      	movs	r3, #6
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <SD_readMultipleSecStart>:

uint8_t SD_readMultipleSecStart(uint32_t start_addr) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	uint8_t res1;

	// assert chip select
	SPI_transfer(0xFF);
 8000f24:	20ff      	movs	r0, #255	; 0xff
 8000f26:	f7ff fc99 	bl	800085c <SPI_transfer>
	CS_ENABLE();
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	480a      	ldr	r0, [pc, #40]	; (8000f58 <SD_readMultipleSecStart+0x3c>)
 8000f30:	f002 f95e 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8000f34:	20ff      	movs	r0, #255	; 0xff
 8000f36:	f7ff fc91 	bl	800085c <SPI_transfer>

	// send CMD24
	SD_command(CMD18, start_addr, CMD18_CRC);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	2012      	movs	r0, #18
 8000f40:	f7ff fcd0 	bl	80008e4 <SD_command>

	// read response
	res1 = SD_readRes1();
 8000f44:	f7ff fcff 	bl	8000946 <SD_readRes1>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	73fb      	strb	r3, [r7, #15]

	return res1;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020000 	.word	0x40020000

08000f5c <SD_readMultipleSec>:

sd_ret_t SD_readMultipleSec(uint8_t *buff) {
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	uint8_t read = 0xFF;
 8000f64:	23ff      	movs	r3, #255	; 0xff
 8000f66:	727b      	strb	r3, [r7, #9]
	uint32_t readAttempts;

	// wait for a response token (timeout = 100ms)
	readAttempts = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]

	while ((read = SPI_transfer(0xFF)) != 0xFE) {
 8000f6c:	e007      	b.n	8000f7e <SD_readMultipleSec+0x22>

		if (readAttempts == SD_MAX_READ_ATTEMPTS)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f241 1294 	movw	r2, #4500	; 0x1194
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d00b      	beq.n	8000f90 <SD_readMultipleSec+0x34>
			break;
		readAttempts++;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
	while ((read = SPI_transfer(0xFF)) != 0xFE) {
 8000f7e:	20ff      	movs	r0, #255	; 0xff
 8000f80:	f7ff fc6c 	bl	800085c <SPI_transfer>
 8000f84:	4603      	mov	r3, r0
 8000f86:	727b      	strb	r3, [r7, #9]
 8000f88:	7a7b      	ldrb	r3, [r7, #9]
 8000f8a:	2bfe      	cmp	r3, #254	; 0xfe
 8000f8c:	d1ef      	bne.n	8000f6e <SD_readMultipleSec+0x12>
 8000f8e:	e000      	b.n	8000f92 <SD_readMultipleSec+0x36>
			break;
 8000f90:	bf00      	nop
	}

	// if response token is 0xFE
	if (read == 0xFE) {
 8000f92:	7a7b      	ldrb	r3, [r7, #9]
 8000f94:	2bfe      	cmp	r3, #254	; 0xfe
 8000f96:	d117      	bne.n	8000fc8 <SD_readMultipleSec+0x6c>
		// read 512 byte block
		for (uint16_t i = 0; i < 512; i++)
 8000f98:	2300      	movs	r3, #0
 8000f9a:	817b      	strh	r3, [r7, #10]
 8000f9c:	e00a      	b.n	8000fb4 <SD_readMultipleSec+0x58>
			buff[i] = SPI_transfer(0xFF);
 8000f9e:	897b      	ldrh	r3, [r7, #10]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	18d4      	adds	r4, r2, r3
 8000fa4:	20ff      	movs	r0, #255	; 0xff
 8000fa6:	f7ff fc59 	bl	800085c <SPI_transfer>
 8000faa:	4603      	mov	r3, r0
 8000fac:	7023      	strb	r3, [r4, #0]
		for (uint16_t i = 0; i < 512; i++)
 8000fae:	897b      	ldrh	r3, [r7, #10]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	817b      	strh	r3, [r7, #10]
 8000fb4:	897b      	ldrh	r3, [r7, #10]
 8000fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fba:	d3f0      	bcc.n	8000f9e <SD_readMultipleSec+0x42>

		// read 16-bit CRC
		SPI_transfer(0xFF);
 8000fbc:	20ff      	movs	r0, #255	; 0xff
 8000fbe:	f7ff fc4d 	bl	800085c <SPI_transfer>
		SPI_transfer(0xFF);
 8000fc2:	20ff      	movs	r0, #255	; 0xff
 8000fc4:	f7ff fc4a 	bl	800085c <SPI_transfer>
	}

	if (!(read & 0xF0)) {
 8000fc8:	7a7b      	ldrb	r3, [r7, #9]
 8000fca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <SD_readMultipleSec+0x7a>
		//SD_printDataErrToken(read);
		return SD_READ_ERROR;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	e005      	b.n	8000fe2 <SD_readMultipleSec+0x86>
	} else if (read == 0xFF) {
 8000fd6:	7a7b      	ldrb	r3, [r7, #9]
 8000fd8:	2bff      	cmp	r3, #255	; 0xff
 8000fda:	d101      	bne.n	8000fe0 <SD_readMultipleSec+0x84>
		//USB_SerialPrint("Read Timeout\r\n");
		return SD_READ_ERROR;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e000      	b.n	8000fe2 <SD_readMultipleSec+0x86>
	}
	return SD_READ_SUCCESS;
 8000fe0:	2303      	movs	r3, #3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
	...

08000fec <SD_readMultipleSecStop>:

void SD_readMultipleSecStop() {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	SD_command(CMD12, CMD12_ARG, CMD12_CRC);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f7ff fc75 	bl	80008e4 <SD_command>

	while (SPI_transfer(0xFF) == 0x00)
 8000ffa:	bf00      	nop
 8000ffc:	20ff      	movs	r0, #255	; 0xff
 8000ffe:	f7ff fc2d 	bl	800085c <SPI_transfer>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f9      	beq.n	8000ffc <SD_readMultipleSecStop+0x10>
		;

	// deassert chip select
	SPI_transfer(0xFF);
 8001008:	20ff      	movs	r0, #255	; 0xff
 800100a:	f7ff fc27 	bl	800085c <SPI_transfer>
	CS_DISABLE();
 800100e:	2201      	movs	r2, #1
 8001010:	2110      	movs	r1, #16
 8001012:	4804      	ldr	r0, [pc, #16]	; (8001024 <SD_readMultipleSecStop+0x38>)
 8001014:	f002 f8ec 	bl	80031f0 <HAL_GPIO_WritePin>
	SPI_transfer(0xFF);
 8001018:	20ff      	movs	r0, #255	; 0xff
 800101a:	f7ff fc1f 	bl	800085c <SPI_transfer>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020000 	.word	0x40020000

08001028 <bootloader_init>:
uint8_t wordBuf[4] = { 0 };
uint32_t flashAddress = APP_START;
uint32_t byteCnt = 0;
uint8_t bufIndex;

bool bootloader_init() {
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
	if (!mySdFat_init()) {
 800102c:	f001 fa9e 	bl	800256c <mySdFat_init>
 8001030:	4603      	mov	r3, r0
 8001032:	f083 0301 	eor.w	r3, r3, #1
 8001036:	b2db      	uxtb	r3, r3
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <bootloader_init+0x18>
		return false;
 800103c:	2300      	movs	r3, #0
 800103e:	e000      	b.n	8001042 <bootloader_init+0x1a>
	}
	return true;
 8001040:	2301      	movs	r3, #1

}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <jump_to_app>:

void jump_to_app() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0

	reset_handler_t app_reset_handler = (reset_handler_t) (RESET_HANDLER);
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <jump_to_app+0x18>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	607b      	str	r3, [r7, #4]

	app_reset_handler();
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4798      	blx	r3

}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	08004004 	.word	0x08004004

08001064 <update_available>:

bool update_available() {
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	b095      	sub	sp, #84	; 0x54
 8001068:	af08      	add	r7, sp, #32
	appFile = pathExists("/STM32-BOOT/app.bin");
 800106a:	4c14      	ldr	r4, [pc, #80]	; (80010bc <update_available+0x58>)
 800106c:	463b      	mov	r3, r7
 800106e:	4914      	ldr	r1, [pc, #80]	; (80010c0 <update_available+0x5c>)
 8001070:	4618      	mov	r0, r3
 8001072:	f000 ff73 	bl	8001f5c <pathExists>
 8001076:	4625      	mov	r5, r4
 8001078:	463c      	mov	r4, r7
 800107a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800107e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001082:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001086:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	if (startCluster(appFile) == 0)
 800108a:	4e0c      	ldr	r6, [pc, #48]	; (80010bc <update_available+0x58>)
 800108c:	466d      	mov	r5, sp
 800108e:	f106 0410 	add.w	r4, r6, #16
 8001092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001096:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800109a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800109e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010a2:	f000 fabf 	bl	8001624 <startCluster>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <update_available+0x4c>
		return false;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e000      	b.n	80010b2 <update_available+0x4e>
	return true;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3734      	adds	r7, #52	; 0x34
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000088 	.word	0x20000088
 80010c0:	0800413c 	.word	0x0800413c

080010c4 <erase_flash>:

static HAL_StatusTypeDef erase_flash() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef EraseInit;
	uint32_t SectorError;

	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
	EraseInit.Sector = FLASH_SECTOR_1;
 80010ce:	2301      	movs	r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
	EraseInit.NbSectors = 3;
 80010d2:	2303      	movs	r3, #3
 80010d4:	613b      	str	r3, [r7, #16]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80010d6:	2302      	movs	r3, #2
 80010d8:	617b      	str	r3, [r7, #20]

	return HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 80010da:	463a      	mov	r2, r7
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fddf 	bl	8002ca4 <HAL_FLASHEx_Erase>
 80010e6:	4603      	mov	r3, r0

}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <program_flash>:

static HAL_StatusTypeDef program_flash() {
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]

	while (byteCnt != fileSize(&appFile)) {
 80010fa:	e041      	b.n	8001180 <program_flash+0x90>
		wordBuf[bufIndex++] = readByte(&appFile);
 80010fc:	4b27      	ldr	r3, [pc, #156]	; (800119c <program_flash+0xac>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	b2d1      	uxtb	r1, r2
 8001104:	4a25      	ldr	r2, [pc, #148]	; (800119c <program_flash+0xac>)
 8001106:	7011      	strb	r1, [r2, #0]
 8001108:	461e      	mov	r6, r3
 800110a:	4825      	ldr	r0, [pc, #148]	; (80011a0 <program_flash+0xb0>)
 800110c:	f001 f814 	bl	8002138 <readByte>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <program_flash+0xb4>)
 8001116:	559a      	strb	r2, [r3, r6]
		byteCnt++;
 8001118:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <program_flash+0xb8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <program_flash+0xb8>)
 8001120:	6013      	str	r3, [r2, #0]
		if (bufIndex == 4) {
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <program_flash+0xac>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d12a      	bne.n	8001180 <program_flash+0x90>
			status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, flashAddress,
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <program_flash+0xbc>)
 800112c:	6819      	ldr	r1, [r3, #0]
					*((uint32_t*) wordBuf));
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <program_flash+0xb4>)
 8001130:	681b      	ldr	r3, [r3, #0]
			status = HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, flashAddress,
 8001132:	2200      	movs	r2, #0
 8001134:	461c      	mov	r4, r3
 8001136:	4615      	mov	r5, r2
 8001138:	4622      	mov	r2, r4
 800113a:	462b      	mov	r3, r5
 800113c:	2002      	movs	r0, #2
 800113e:	f001 fbeb 	bl	8002918 <HAL_FLASH_Program>
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
			if (status != HAL_OK)
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <program_flash+0x60>
				return status;
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	e020      	b.n	8001192 <program_flash+0xa2>

			flashAddress += 4;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <program_flash+0xbc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3304      	adds	r3, #4
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <program_flash+0xbc>)
 8001158:	6013      	str	r3, [r2, #0]

			memset(wordBuf, 0, sizeof(wordBuf));
 800115a:	2204      	movs	r2, #4
 800115c:	2100      	movs	r1, #0
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <program_flash+0xb4>)
 8001160:	f002 ffb4 	bl	80040cc <memset>
			bufIndex = 0;
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <program_flash+0xac>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
			if(byteCnt%32==0)
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <program_flash+0xb8>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 031f 	and.w	r3, r3, #31
 8001172:	2b00      	cmp	r3, #0
 8001174:	d104      	bne.n	8001180 <program_flash+0x90>
				 HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <program_flash+0xc0>)
 800117c:	f002 f851 	bl	8003222 <HAL_GPIO_TogglePin>
	while (byteCnt != fileSize(&appFile)) {
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <program_flash+0xb0>)
 8001182:	f000 fab7 	bl	80016f4 <fileSize>
 8001186:	4602      	mov	r2, r0
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <program_flash+0xb8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d1b5      	bne.n	80010fc <program_flash+0xc>

		}

	}
	return status;
 8001190:	79fb      	ldrb	r3, [r7, #7]

}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	bf00      	nop
 800119c:	200000bc 	.word	0x200000bc
 80011a0:	20000088 	.word	0x20000088
 80011a4:	200000b4 	.word	0x200000b4
 80011a8:	200000b8 	.word	0x200000b8
 80011ac:	20000004 	.word	0x20000004
 80011b0:	40020800 	.word	0x40020800

080011b4 <flash_process>:

HAL_StatusTypeDef flash_process() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

	HAL_StatusTypeDef status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]

	status = HAL_FLASH_Unlock();
 80011be:	f001 fbff 	bl	80029c0 <HAL_FLASH_Unlock>
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]

	if (status != HAL_OK)
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <flash_process+0x1c>
		return status;
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	e01b      	b.n	8001208 <flash_process+0x54>

	status = erase_flash();
 80011d0:	f7ff ff78 	bl	80010c4 <erase_flash>
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <flash_process+0x2e>
		return status;
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	e012      	b.n	8001208 <flash_process+0x54>

	status = program_flash();
 80011e2:	f7ff ff85 	bl	80010f0 <program_flash>
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]

	if (status != HAL_OK)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <flash_process+0x40>
		return status;
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	e009      	b.n	8001208 <flash_process+0x54>

	HAL_FLASH_Lock();
 80011f4:	f001 fc06 	bl	8002a04 <HAL_FLASH_Lock>

	fileClose(&appFile);
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <flash_process+0x5c>)
 80011fa:	f000 ff6d 	bl	80020d8 <fileClose>

	fileDelete("/STM32-BOOT", "app.bin");
 80011fe:	4905      	ldr	r1, [pc, #20]	; (8001214 <flash_process+0x60>)
 8001200:	4805      	ldr	r0, [pc, #20]	; (8001218 <flash_process+0x64>)
 8001202:	f001 f8bb 	bl	800237c <fileDelete>

	return status;
 8001206:	79fb      	ldrb	r3, [r7, #7]

}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000088 	.word	0x20000088
 8001214:	08004150 	.word	0x08004150
 8001218:	08004158 	.word	0x08004158

0800121c <getBootSecParams>:
/**
 * @brief Get the Boot Sectore params
 * @return true
 * @return false
 */
static bool getBootSecParams() {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	if (SD_readSector(BOOT_SEC_START, SD_buff) == SD_READ_SUCCESS) {
 8001220:	4966      	ldr	r1, [pc, #408]	; (80013bc <getBootSecParams+0x1a0>)
 8001222:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001226:	f7ff fdc5 	bl	8000db4 <SD_readSector>
 800122a:	4603      	mov	r3, r0
 800122c:	2b03      	cmp	r3, #3
 800122e:	f040 80c2 	bne.w	80013b6 <getBootSecParams+0x19a>

		params.BPB_BytesPerSec = (uint16_t) SD_buff[11];
 8001232:	4b62      	ldr	r3, [pc, #392]	; (80013bc <getBootSecParams+0x1a0>)
 8001234:	7adb      	ldrb	r3, [r3, #11]
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <getBootSecParams+0x1a4>)
 800123a:	801a      	strh	r2, [r3, #0]
		params.BPB_BytesPerSec |= (uint16_t) (SD_buff[12] << 8);
 800123c:	4b60      	ldr	r3, [pc, #384]	; (80013c0 <getBootSecParams+0x1a4>)
 800123e:	881a      	ldrh	r2, [r3, #0]
 8001240:	4b5e      	ldr	r3, [pc, #376]	; (80013bc <getBootSecParams+0x1a0>)
 8001242:	7b1b      	ldrb	r3, [r3, #12]
 8001244:	b29b      	uxth	r3, r3
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b29b      	uxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b5c      	ldr	r3, [pc, #368]	; (80013c0 <getBootSecParams+0x1a4>)
 8001250:	801a      	strh	r2, [r3, #0]

		params.BPB_SecPerClus = SD_buff[13];
 8001252:	4b5a      	ldr	r3, [pc, #360]	; (80013bc <getBootSecParams+0x1a0>)
 8001254:	7b5a      	ldrb	r2, [r3, #13]
 8001256:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <getBootSecParams+0x1a4>)
 8001258:	709a      	strb	r2, [r3, #2]

		params.BPB_RsvdSecCnt = (uint16_t) SD_buff[14];
 800125a:	4b58      	ldr	r3, [pc, #352]	; (80013bc <getBootSecParams+0x1a0>)
 800125c:	7b9b      	ldrb	r3, [r3, #14]
 800125e:	b29a      	uxth	r2, r3
 8001260:	4b57      	ldr	r3, [pc, #348]	; (80013c0 <getBootSecParams+0x1a4>)
 8001262:	809a      	strh	r2, [r3, #4]
		params.BPB_RsvdSecCnt |= ((uint16_t) SD_buff[15]) << 8;
 8001264:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <getBootSecParams+0x1a4>)
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	b21a      	sxth	r2, r3
 800126a:	4b54      	ldr	r3, [pc, #336]	; (80013bc <getBootSecParams+0x1a0>)
 800126c:	7bdb      	ldrb	r3, [r3, #15]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b21b      	sxth	r3, r3
 8001272:	4313      	orrs	r3, r2
 8001274:	b21b      	sxth	r3, r3
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <getBootSecParams+0x1a4>)
 800127a:	809a      	strh	r2, [r3, #4]

		params.BPB_TotSec32 = ((uint32_t) SD_buff[32]);
 800127c:	4b4f      	ldr	r3, [pc, #316]	; (80013bc <getBootSecParams+0x1a0>)
 800127e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001282:	461a      	mov	r2, r3
 8001284:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <getBootSecParams+0x1a4>)
 8001286:	60da      	str	r2, [r3, #12]
		params.BPB_TotSec32 |= ((uint32_t) SD_buff[33]) << 8;
 8001288:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <getBootSecParams+0x1a4>)
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <getBootSecParams+0x1a0>)
 800128e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	4313      	orrs	r3, r2
 8001296:	4a4a      	ldr	r2, [pc, #296]	; (80013c0 <getBootSecParams+0x1a4>)
 8001298:	60d3      	str	r3, [r2, #12]
		params.BPB_TotSec32 |= ((uint32_t) SD_buff[34]) << 16;
 800129a:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <getBootSecParams+0x1a4>)
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	4b47      	ldr	r3, [pc, #284]	; (80013bc <getBootSecParams+0x1a0>)
 80012a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80012a4:	041b      	lsls	r3, r3, #16
 80012a6:	4313      	orrs	r3, r2
 80012a8:	4a45      	ldr	r2, [pc, #276]	; (80013c0 <getBootSecParams+0x1a4>)
 80012aa:	60d3      	str	r3, [r2, #12]
		params.BPB_TotSec32 |= ((uint32_t) SD_buff[35]) << 24;
 80012ac:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <getBootSecParams+0x1a4>)
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	4b42      	ldr	r3, [pc, #264]	; (80013bc <getBootSecParams+0x1a0>)
 80012b2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80012b6:	061b      	lsls	r3, r3, #24
 80012b8:	4313      	orrs	r3, r2
 80012ba:	4a41      	ldr	r2, [pc, #260]	; (80013c0 <getBootSecParams+0x1a4>)
 80012bc:	60d3      	str	r3, [r2, #12]

		params.BPB_FATSz32 = ((uint32_t) SD_buff[36]);
 80012be:	4b3f      	ldr	r3, [pc, #252]	; (80013bc <getBootSecParams+0x1a0>)
 80012c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <getBootSecParams+0x1a4>)
 80012c8:	611a      	str	r2, [r3, #16]
		params.BPB_FATSz32 |= ((uint32_t) SD_buff[37]) << 8;
 80012ca:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <getBootSecParams+0x1a4>)
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <getBootSecParams+0x1a0>)
 80012d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	4313      	orrs	r3, r2
 80012d8:	4a39      	ldr	r2, [pc, #228]	; (80013c0 <getBootSecParams+0x1a4>)
 80012da:	6113      	str	r3, [r2, #16]
		params.BPB_FATSz32 |= ((uint32_t) SD_buff[38]) << 16;
 80012dc:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <getBootSecParams+0x1a4>)
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	4b36      	ldr	r3, [pc, #216]	; (80013bc <getBootSecParams+0x1a0>)
 80012e2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	4313      	orrs	r3, r2
 80012ea:	4a35      	ldr	r2, [pc, #212]	; (80013c0 <getBootSecParams+0x1a4>)
 80012ec:	6113      	str	r3, [r2, #16]
		params.BPB_FATSz32 |= ((uint32_t) SD_buff[39]) << 24;
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <getBootSecParams+0x1a4>)
 80012f0:	691a      	ldr	r2, [r3, #16]
 80012f2:	4b32      	ldr	r3, [pc, #200]	; (80013bc <getBootSecParams+0x1a0>)
 80012f4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80012f8:	061b      	lsls	r3, r3, #24
 80012fa:	4313      	orrs	r3, r2
 80012fc:	4a30      	ldr	r2, [pc, #192]	; (80013c0 <getBootSecParams+0x1a4>)
 80012fe:	6113      	str	r3, [r2, #16]

		params.BPB_RootEntCnt = (uint16_t) SD_buff[17];
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <getBootSecParams+0x1a0>)
 8001302:	7c5b      	ldrb	r3, [r3, #17]
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <getBootSecParams+0x1a4>)
 8001308:	811a      	strh	r2, [r3, #8]
		params.BPB_RootEntCnt |= ((uint16_t) SD_buff[18]) << 8;
 800130a:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <getBootSecParams+0x1a4>)
 800130c:	891b      	ldrh	r3, [r3, #8]
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <getBootSecParams+0x1a0>)
 8001312:	7c9b      	ldrb	r3, [r3, #18]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21b      	sxth	r3, r3
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <getBootSecParams+0x1a4>)
 8001320:	811a      	strh	r2, [r3, #8]

		params.BPB_NumFATs = SD_buff[16];
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <getBootSecParams+0x1a0>)
 8001324:	7c1a      	ldrb	r2, [r3, #16]
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <getBootSecParams+0x1a4>)
 8001328:	719a      	strb	r2, [r3, #6]

		params.BPB_RootClus = ((uint32_t) SD_buff[44]);
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <getBootSecParams+0x1a0>)
 800132c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001330:	461a      	mov	r2, r3
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <getBootSecParams+0x1a4>)
 8001334:	615a      	str	r2, [r3, #20]
		params.BPB_RootClus |= ((uint32_t) SD_buff[45]) << 8;
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <getBootSecParams+0x1a4>)
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <getBootSecParams+0x1a0>)
 800133c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001340:	021b      	lsls	r3, r3, #8
 8001342:	4313      	orrs	r3, r2
 8001344:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <getBootSecParams+0x1a4>)
 8001346:	6153      	str	r3, [r2, #20]
		params.BPB_RootClus |= ((uint32_t) SD_buff[46]) << 16;
 8001348:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <getBootSecParams+0x1a4>)
 800134a:	695a      	ldr	r2, [r3, #20]
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <getBootSecParams+0x1a0>)
 800134e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001352:	041b      	lsls	r3, r3, #16
 8001354:	4313      	orrs	r3, r2
 8001356:	4a1a      	ldr	r2, [pc, #104]	; (80013c0 <getBootSecParams+0x1a4>)
 8001358:	6153      	str	r3, [r2, #20]
		params.BPB_RootClus |= ((uint32_t) SD_buff[47]) << 24;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <getBootSecParams+0x1a4>)
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	4b17      	ldr	r3, [pc, #92]	; (80013bc <getBootSecParams+0x1a0>)
 8001360:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001364:	061b      	lsls	r3, r3, #24
 8001366:	4313      	orrs	r3, r2
 8001368:	4a15      	ldr	r2, [pc, #84]	; (80013c0 <getBootSecParams+0x1a4>)
 800136a:	6153      	str	r3, [r2, #20]

		params.BPB_FSInfo = (uint16_t) (SD_buff[48]);
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <getBootSecParams+0x1a0>)
 800136e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <getBootSecParams+0x1a4>)
 8001376:	831a      	strh	r2, [r3, #24]
		params.BPB_FSInfo |= ((uint16_t) (SD_buff[49])) << 8;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <getBootSecParams+0x1a4>)
 800137a:	8b1b      	ldrh	r3, [r3, #24]
 800137c:	b21a      	sxth	r2, r3
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <getBootSecParams+0x1a0>)
 8001380:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	b21b      	sxth	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b21b      	sxth	r3, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <getBootSecParams+0x1a4>)
 8001390:	831a      	strh	r2, [r3, #24]

		memcpy(params.BS_VolLab, &SD_buff[71], 11);
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <getBootSecParams+0x1a4>)
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <getBootSecParams+0x1a0>)
 8001396:	331a      	adds	r3, #26
 8001398:	3247      	adds	r2, #71	; 0x47
 800139a:	6810      	ldr	r0, [r2, #0]
 800139c:	6851      	ldr	r1, [r2, #4]
 800139e:	6018      	str	r0, [r3, #0]
 80013a0:	6059      	str	r1, [r3, #4]
 80013a2:	8911      	ldrh	r1, [r2, #8]
 80013a4:	7a92      	ldrb	r2, [r2, #10]
 80013a6:	8119      	strh	r1, [r3, #8]
 80013a8:	729a      	strb	r2, [r3, #10]
		params.BS_VolLab[8] = '\0';
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <getBootSecParams+0x1a4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

		return true;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <getBootSecParams+0x19c>
	}
	return false;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200000e8 	.word	0x200000e8
 80013c0:	200000c0 	.word	0x200000c0

080013c4 <getFatType>:
 * @brief Get the FAT type
 *
 * @return FATtype
 */

static FATtype getFatType() {
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
	uint32_t clusterCnt = DataSectorsCnt / params.BPB_SecPerClus;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <getFatType+0x48>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <getFatType+0x4c>)
 80013d0:	7892      	ldrb	r2, [r2, #2]
 80013d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80013d6:	607b      	str	r3, [r7, #4]

	if (clusterCnt <= 4085)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f640 72f5 	movw	r2, #4085	; 0xff5
 80013de:	4293      	cmp	r3, r2
 80013e0:	d801      	bhi.n	80013e6 <getFatType+0x22>
		return FAT12;
 80013e2:	2300      	movs	r3, #0
 80013e4:	e00c      	b.n	8001400 <getFatType+0x3c>

	else if (clusterCnt >= 4086 && clusterCnt <= 65525)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d906      	bls.n	80013fe <getFatType+0x3a>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d801      	bhi.n	80013fe <getFatType+0x3a>
		return FAT16;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <getFatType+0x3c>

	else
		return FAT32;
 80013fe:	2302      	movs	r3, #2
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	200002fc 	.word	0x200002fc
 8001410:	200000c0 	.word	0x200000c0

08001414 <fatEntLocation>:
 * @brief  get FAT entry location strcuture(Sector number and offset)
 *
 * @param[in] fat_entry_index  entry index of FAT table
 *
 */
static fatEntLoc_t fatEntLocation(uint32_t fat_entry_index) {
 8001414:	b480      	push	{r7}
 8001416:	b085      	sub	sp, #20
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	fatEntLoc_t fatEntLoc;
	fatEntLoc.fatSecNum = FatStartSector
			+ (fat_entry_index * 4 / params.BPB_BytesPerSec);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <fatEntLocation+0x50>)
 8001424:	8812      	ldrh	r2, [r2, #0]
 8001426:	fbb3 f2f2 	udiv	r2, r3, r2
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <fatEntLocation+0x54>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
	fatEntLoc.fatSecNum = FatStartSector
 8001430:	60bb      	str	r3, [r7, #8]
	fatEntLoc.fatEntOffset = (fat_entry_index * 4) % params.BPB_BytesPerSec;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4a0b      	ldr	r2, [pc, #44]	; (8001464 <fatEntLocation+0x50>)
 8001438:	8812      	ldrh	r2, [r2, #0]
 800143a:	fbb3 f1f2 	udiv	r1, r3, r2
 800143e:	fb01 f202 	mul.w	r2, r1, r2
 8001442:	1a9b      	subs	r3, r3, r2
 8001444:	b29b      	uxth	r3, r3
 8001446:	81bb      	strh	r3, [r7, #12]
	return fatEntLoc;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	461a      	mov	r2, r3
 800144c:	f107 0308 	add.w	r3, r7, #8
 8001450:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001454:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	200000c0 	.word	0x200000c0
 8001468:	200002e8 	.word	0x200002e8

0800146c <fatNextClus>:
 * @brief  Function to get the next cluster
 *
 * @param[in] fatThisClus Current cluster index
 * @return next cluster
 */
static uint32_t fatNextClus(uint32_t fatThisClus) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	fatEntLoc_t fatEntLoc = fatEntLocation(fatThisClus);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ffca 	bl	8001414 <fatEntLocation>
	SD_readSector(fatEntLoc.fatSecNum, SD_buff);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4907      	ldr	r1, [pc, #28]	; (80014a0 <fatNextClus+0x34>)
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fc95 	bl	8000db4 <SD_readSector>
	temp = *((uint32_t*) &SD_buff[fatEntLoc.fatEntOffset]);
 800148a:	8a3b      	ldrh	r3, [r7, #16]
 800148c:	461a      	mov	r2, r3
 800148e:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <fatNextClus+0x34>)
 8001490:	4413      	add	r3, r2
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	617b      	str	r3, [r7, #20]

	return temp;
 8001496:	697b      	ldr	r3, [r7, #20]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	200000e8 	.word	0x200000e8

080014a4 <fatSetNextClus>:

static void fatSetNextClus(uint32_t fatThisClus, uint32_t fatNextClus) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
	uint32_t *p_temp;
	fatEntLoc_t fatEntLoc = fatEntLocation(fatThisClus);
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ffad 	bl	8001414 <fatEntLocation>
	SD_readSector(fatEntLoc.fatSecNum, SD_buff);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	490a      	ldr	r1, [pc, #40]	; (80014e8 <fatSetNextClus+0x44>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fc78 	bl	8000db4 <SD_readSector>
	p_temp = ((uint32_t*) &SD_buff[fatEntLoc.fatEntOffset]);
 80014c4:	8a3b      	ldrh	r3, [r7, #16]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <fatSetNextClus+0x44>)
 80014ca:	4413      	add	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	683a      	ldr	r2, [r7, #0]
	memcpy(p_temp, &fatNextClus, 4);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	601a      	str	r2, [r3, #0]
	SD_writeSector(fatEntLoc.fatSecNum, SD_buff);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4904      	ldr	r1, [pc, #16]	; (80014e8 <fatSetNextClus+0x44>)
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fcf9 	bl	8000ed0 <SD_writeSector>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000e8 	.word	0x200000e8

080014ec <startSecOfClus>:

static uint32_t startSecOfClus(uint32_t cluster_index) {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	return (DataStartSector + (cluster_index - 2) * params.BPB_SecPerClus);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b02      	subs	r3, #2
 80014f8:	4a06      	ldr	r2, [pc, #24]	; (8001514 <startSecOfClus+0x28>)
 80014fa:	7892      	ldrb	r2, [r2, #2]
 80014fc:	fb03 f202 	mul.w	r2, r3, r2
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <startSecOfClus+0x2c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4413      	add	r3, r2
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200000c0 	.word	0x200000c0
 8001518:	200002f8 	.word	0x200002f8

0800151c <getShortFileName>:

static void getShortFileName(myFile p_file) {
 800151c:	b084      	sub	sp, #16
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	f107 0c10 	add.w	ip, r7, #16
 8001528:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t nameIndx = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	71fb      	strb	r3, [r7, #7]
	for (uint8_t index = 0; index < 8; index++) {
 8001530:	2300      	movs	r3, #0
 8001532:	71bb      	strb	r3, [r7, #6]
 8001534:	e03c      	b.n	80015b0 <getShortFileName+0x94>
		if (p_file.DIR_Name[index] == ' ')
 8001536:	79bb      	ldrb	r3, [r7, #6]
 8001538:	f107 0210 	add.w	r2, r7, #16
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	2b20      	cmp	r3, #32
 8001540:	d03a      	beq.n	80015b8 <getShortFileName+0x9c>
			break;

		if (p_file.DIR_NTRes & 0x08) {
 8001542:	7f3b      	ldrb	r3, [r7, #28]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d024      	beq.n	8001596 <getShortFileName+0x7a>
			if ((p_file.DIR_Name[index] > 64)
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	f107 0210 	add.w	r2, r7, #16
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	2b40      	cmp	r3, #64	; 0x40
 8001556:	d913      	bls.n	8001580 <getShortFileName+0x64>
					&& (p_file.DIR_Name[index] < 91)) {
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	f107 0210 	add.w	r2, r7, #16
 800155e:	5cd3      	ldrb	r3, [r2, r3]
 8001560:	2b5a      	cmp	r3, #90	; 0x5a
 8001562:	d80d      	bhi.n	8001580 <getShortFileName+0x64>
				fileName[nameIndx++] = p_file.DIR_Name[index] + 32;
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	f107 0210 	add.w	r2, r7, #16
 800156a:	5cd2      	ldrb	r2, [r2, r3]
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	1c59      	adds	r1, r3, #1
 8001570:	71f9      	strb	r1, [r7, #7]
 8001572:	4619      	mov	r1, r3
 8001574:	f102 0320 	add.w	r3, r2, #32
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <getShortFileName+0x104>)
 800157c:	545a      	strb	r2, [r3, r1]
 800157e:	e014      	b.n	80015aa <getShortFileName+0x8e>
			} else
				fileName[nameIndx++] = p_file.DIR_Name[index];
 8001580:	79ba      	ldrb	r2, [r7, #6]
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	1c59      	adds	r1, r3, #1
 8001586:	71f9      	strb	r1, [r7, #7]
 8001588:	4619      	mov	r1, r3
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	5c9a      	ldrb	r2, [r3, r2]
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <getShortFileName+0x104>)
 8001592:	545a      	strb	r2, [r3, r1]
 8001594:	e009      	b.n	80015aa <getShortFileName+0x8e>
		}

		else
			fileName[nameIndx++] = p_file.DIR_Name[index];
 8001596:	79ba      	ldrb	r2, [r7, #6]
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	1c59      	adds	r1, r3, #1
 800159c:	71f9      	strb	r1, [r7, #7]
 800159e:	4619      	mov	r1, r3
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	5c9a      	ldrb	r2, [r3, r2]
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <getShortFileName+0x104>)
 80015a8:	545a      	strb	r2, [r3, r1]
	for (uint8_t index = 0; index < 8; index++) {
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	3301      	adds	r3, #1
 80015ae:	71bb      	strb	r3, [r7, #6]
 80015b0:	79bb      	ldrb	r3, [r7, #6]
 80015b2:	2b07      	cmp	r3, #7
 80015b4:	d9bf      	bls.n	8001536 <getShortFileName+0x1a>
 80015b6:	e000      	b.n	80015ba <getShortFileName+0x9e>
			break;
 80015b8:	bf00      	nop
	}
	if ((p_file.DIR_attr & ATTR_DIRECTORY) == 0) {
 80015ba:	7efb      	ldrb	r3, [r7, #27]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d126      	bne.n	8001612 <getShortFileName+0xf6>
		if (p_file.DIR_ext[0] != ' ') {
 80015c4:	7e3b      	ldrb	r3, [r7, #24]
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d023      	beq.n	8001612 <getShortFileName+0xf6>
			fileName[nameIndx++] = '.';
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	71fa      	strb	r2, [r7, #7]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <getShortFileName+0x104>)
 80015d4:	212e      	movs	r1, #46	; 0x2e
 80015d6:	5499      	strb	r1, [r3, r2]
			for (uint8_t index = 0; index < 3; index++)
 80015d8:	2300      	movs	r3, #0
 80015da:	717b      	strb	r3, [r7, #5]
 80015dc:	e016      	b.n	800160c <getShortFileName+0xf0>
				fileName[nameIndx++] =
						(p_file.DIR_ext[index] == ' ') ?
 80015de:	797b      	ldrb	r3, [r7, #5]
 80015e0:	3310      	adds	r3, #16
 80015e2:	443b      	add	r3, r7
 80015e4:	7a1b      	ldrb	r3, [r3, #8]
				fileName[nameIndx++] =
 80015e6:	2b20      	cmp	r3, #32
 80015e8:	d006      	beq.n	80015f8 <getShortFileName+0xdc>
								'\0' : p_file.DIR_ext[index] + 32;
 80015ea:	797b      	ldrb	r3, [r7, #5]
 80015ec:	3310      	adds	r3, #16
 80015ee:	443b      	add	r3, r7
 80015f0:	7a1b      	ldrb	r3, [r3, #8]
				fileName[nameIndx++] =
 80015f2:	3320      	adds	r3, #32
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	e000      	b.n	80015fa <getShortFileName+0xde>
 80015f8:	2200      	movs	r2, #0
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	1c59      	adds	r1, r3, #1
 80015fe:	71f9      	strb	r1, [r7, #7]
 8001600:	4619      	mov	r1, r3
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <getShortFileName+0x104>)
 8001604:	545a      	strb	r2, [r3, r1]
			for (uint8_t index = 0; index < 3; index++)
 8001606:	797b      	ldrb	r3, [r7, #5]
 8001608:	3301      	adds	r3, #1
 800160a:	717b      	strb	r3, [r7, #5]
 800160c:	797b      	ldrb	r3, [r7, #5]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d9e5      	bls.n	80015de <getShortFileName+0xc2>
		}
	}
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	b004      	add	sp, #16
 800161e:	4770      	bx	lr
 8001620:	20000300 	.word	0x20000300

08001624 <startCluster>:

uint32_t startCluster(myFile file) {
 8001624:	b084      	sub	sp, #16
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	f107 0c10 	add.w	ip, r7, #16
 8001630:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint32_t startClus = (uint32_t) file.DIR_FstClusLO;
 8001634:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001636:	607b      	str	r3, [r7, #4]
	startClus |= ((uint32_t) (file.DIR_FstClusHI)) << 16;
 8001638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800163a:	041b      	lsls	r3, r3, #16
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	4313      	orrs	r3, r2
 8001640:	607b      	str	r3, [r7, #4]
	return startClus;
 8001642:	687b      	ldr	r3, [r7, #4]
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	b004      	add	sp, #16
 8001650:	4770      	bx	lr

08001652 <isFreeEntry>:

static inline bool isFreeEntry(myFile file) {
 8001652:	b084      	sub	sp, #16
 8001654:	b490      	push	{r4, r7}
 8001656:	af00      	add	r7, sp, #0
 8001658:	f107 0408 	add.w	r4, r7, #8
 800165c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return ((uint8_t) (file.DIR_Name[0]) == 0xE5) ? true : false;
 8001660:	7a3b      	ldrb	r3, [r7, #8]
 8001662:	2be5      	cmp	r3, #229	; 0xe5
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
}
 800166c:	4618      	mov	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bc90      	pop	{r4, r7}
 8001672:	b004      	add	sp, #16
 8001674:	4770      	bx	lr

08001676 <isDirectory>:

bool isDirectory(myFile file) {
 8001676:	b084      	sub	sp, #16
 8001678:	b490      	push	{r4, r7}
 800167a:	af00      	add	r7, sp, #0
 800167c:	f107 0408 	add.w	r4, r7, #8
 8001680:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return (((file.DIR_attr & (ATTR_DIRECTORY | ATTR_VOLUME_ID)) == 0)) ?
 8001684:	7cfb      	ldrb	r3, [r7, #19]
 8001686:	f003 0318 	and.w	r3, r3, #24
	false :
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
																			true;
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bc90      	pop	{r4, r7}
 800169a:	b004      	add	sp, #16
 800169c:	4770      	bx	lr

0800169e <isEndOfDir>:

bool isEndOfDir(myFile file) {
 800169e:	b084      	sub	sp, #16
 80016a0:	b490      	push	{r4, r7}
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	f107 0408 	add.w	r4, r7, #8
 80016a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return ((uint8_t) (file.DIR_Name[0]) == 0) ? true : false;
 80016ac:	7a3b      	ldrb	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	bf0c      	ite	eq
 80016b2:	2301      	moveq	r3, #1
 80016b4:	2300      	movne	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc90      	pop	{r4, r7}
 80016be:	b004      	add	sp, #16
 80016c0:	4770      	bx	lr

080016c2 <LFN_Entry>:
		return false;

	return true;
}

static bool LFN_Entry(myFile file) {
 80016c2:	b084      	sub	sp, #16
 80016c4:	b490      	push	{r4, r7}
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	f107 0408 	add.w	r4, r7, #8
 80016cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (((file.DIR_attr & ATTR_LONG_NAME_MASK) == ATTR_LONG_FILE_NAME)
 80016d0:	7cfb      	ldrb	r3, [r7, #19]
 80016d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016d6:	2b0f      	cmp	r3, #15
 80016d8:	d106      	bne.n	80016e8 <LFN_Entry+0x26>
			&& (((uint8_t) file.DIR_Name[0] & 0xF0) == 0x40))
 80016da:	7a3b      	ldrb	r3, [r7, #8]
 80016dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e0:	2b40      	cmp	r3, #64	; 0x40
 80016e2:	d101      	bne.n	80016e8 <LFN_Entry+0x26>
		return true;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <LFN_Entry+0x28>
	return false;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc90      	pop	{r4, r7}
 80016f0:	b004      	add	sp, #16
 80016f2:	4770      	bx	lr

080016f4 <fileSize>:

uint8_t fileLfnEntCnt(myFile *p_file) {
	return p_file->fileEntInf.LFN_EntCnt;
}

uint32_t fileSize(myFile *p_file) {
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	return p_file->DIR_FileSize;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <rootDir>:

myFile rootDir() {
 800170c:	b5b0      	push	{r4, r5, r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	SD_readSector(startSecOfClus(params.BPB_RootClus), SD_buff);
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <rootDir+0x5c>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff fee7 	bl	80014ec <startSecOfClus>
 800171e:	4603      	mov	r3, r0
 8001720:	4912      	ldr	r1, [pc, #72]	; (800176c <rootDir+0x60>)
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fb46 	bl	8000db4 <SD_readSector>
	myFile rootDir = *((myFile*) &SD_buff[0]);
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <rootDir+0x60>)
 800172a:	f107 040c 	add.w	r4, r7, #12
 800172e:	461d      	mov	r5, r3
 8001730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800173c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	rootDir.DIR_FstClusLO = 2;
 8001740:	2302      	movs	r3, #2
 8001742:	84fb      	strh	r3, [r7, #38]	; 0x26
	rootDir.entryIndex = 1;
 8001744:	2301      	movs	r3, #1
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c

	return rootDir;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	461d      	mov	r5, r3
 800174c:	f107 040c 	add.w	r4, r7, #12
 8001750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001758:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800175c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	3738      	adds	r7, #56	; 0x38
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	200000c0 	.word	0x200000c0
 800176c:	200000e8 	.word	0x200000e8

08001770 <nextFile>:
 * @brief function to get next file in the folder
 *
 * @param[in] p_file  pointer to the folder
 * @return next file in the folder
 */
myFile nextFile(myFile *p_file) {
 8001770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001774:	b0ad      	sub	sp, #180	; 0xb4
 8001776:	af08      	add	r7, sp, #32
 8001778:	6378      	str	r0, [r7, #52]	; 0x34
 800177a:	6339      	str	r1, [r7, #48]	; 0x30
	uint8_t sectorIndex = (p_file->entryIndex / 16) % params.BPB_SecPerClus;
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	0919      	lsrs	r1, r3, #4
 8001782:	4bc9      	ldr	r3, [pc, #804]	; (8001aa8 <nextFile+0x338>)
 8001784:	789b      	ldrb	r3, [r3, #2]
 8001786:	461a      	mov	r2, r3
 8001788:	fbb1 f3f2 	udiv	r3, r1, r2
 800178c:	fb02 f303 	mul.w	r3, r2, r3
 8001790:	1acb      	subs	r3, r1, r3
 8001792:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint32_t currentClus = startCluster(*p_file);
 8001796:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8001798:	466d      	mov	r5, sp
 800179a:	f106 0410 	add.w	r4, r6, #16
 800179e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80017a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80017aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017ae:	f7ff ff39 	bl	8001624 <startCluster>
 80017b2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	myFile temp = { 0 };
 80017b6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80017ba:	232c      	movs	r3, #44	; 0x2c
 80017bc:	461a      	mov	r2, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	f002 fc84 	bl	80040cc <memset>

	uint32_t currentClusterIndex = (p_file->entryIndex
 80017c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c6:	6a1a      	ldr	r2, [r3, #32]
			/ (16 * params.BPB_SecPerClus));
 80017c8:	4bb7      	ldr	r3, [pc, #732]	; (8001aa8 <nextFile+0x338>)
 80017ca:	789b      	ldrb	r3, [r3, #2]
 80017cc:	011b      	lsls	r3, r3, #4
	uint32_t currentClusterIndex = (p_file->entryIndex
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	67bb      	str	r3, [r7, #120]	; 0x78

	for (uint8_t i = 0; i < currentClusterIndex; i++) {
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80017da:	e026      	b.n	800182a <nextFile+0xba>
		currentClus = fatNextClus(currentClus);
 80017dc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80017e0:	f7ff fe44 	bl	800146c <fatNextClus>
 80017e4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		if (currentClus >= FAT_EOC) {
 80017e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80017ec:	4baf      	ldr	r3, [pc, #700]	; (8001aac <nextFile+0x33c>)
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d916      	bls.n	8001820 <nextFile+0xb0>
			p_file->entryIndex = 2;
 80017f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f4:	2202      	movs	r2, #2
 80017f6:	621a      	str	r2, [r3, #32]
			memset(&temp, 0, sizeof(myFile));
 80017f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017fc:	222c      	movs	r2, #44	; 0x2c
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f002 fc63 	bl	80040cc <memset>
			return temp;
 8001806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001808:	461d      	mov	r5, r3
 800180a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800180e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001812:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001814:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001816:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800181a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800181e:	e305      	b.n	8001e2c <nextFile+0x6bc>
	for (uint8_t i = 0; i < currentClusterIndex; i++) {
 8001820:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001824:	3301      	adds	r3, #1
 8001826:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800182a:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800182e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001830:	4293      	cmp	r3, r2
 8001832:	d8d3      	bhi.n	80017dc <nextFile+0x6c>
		}
	}

	if (p_file->entryIndex <= 2) {
 8001834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d812      	bhi.n	8001862 <nextFile+0xf2>
		sectorIndex = 0;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		currentClus = startCluster(*p_file);
 8001842:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8001844:	466d      	mov	r5, sp
 8001846:	f106 0410 	add.w	r4, r6, #16
 800184a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800184c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800184e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001852:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001856:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800185a:	f7ff fee3 	bl	8001624 <startCluster>
 800185e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	}

	if (!isDirectory(*p_file)) {
 8001862:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8001864:	466d      	mov	r5, sp
 8001866:	f106 0410 	add.w	r4, r6, #16
 800186a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800186e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001872:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001876:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800187a:	f7ff fefc 	bl	8001676 <isDirectory>
 800187e:	4603      	mov	r3, r0
 8001880:	f083 0301 	eor.w	r3, r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d013      	beq.n	80018b2 <nextFile+0x142>
		memset(&temp, 0, sizeof(myFile));
 800188a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800188e:	222c      	movs	r2, #44	; 0x2c
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f002 fc1a 	bl	80040cc <memset>
		return temp;
 8001898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189a:	461d      	mov	r5, r3
 800189c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80018a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80018b0:	e2bc      	b.n	8001e2c <nextFile+0x6bc>
	}

	while (1) {

		SD_readSector(startSecOfClus(currentClus) + sectorIndex, SD_buff);
 80018b2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80018b6:	f7ff fe19 	bl	80014ec <startSecOfClus>
 80018ba:	4602      	mov	r2, r0
 80018bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80018c0:	4413      	add	r3, r2
 80018c2:	497b      	ldr	r1, [pc, #492]	; (8001ab0 <nextFile+0x340>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fa75 	bl	8000db4 <SD_readSector>

		temp = *((myFile*) (SD_buff + (p_file->entryIndex % 16) * 32));
 80018ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	015a      	lsls	r2, r3, #5
 80018d4:	4b76      	ldr	r3, [pc, #472]	; (8001ab0 <nextFile+0x340>)
 80018d6:	4413      	add	r3, r2
 80018d8:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 80018dc:	461c      	mov	r4, r3
 80018de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}

		if (!isFreeEntry(temp)) {
 80018ee:	466d      	mov	r5, sp
 80018f0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018fc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001900:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001904:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001906:	f7ff fea4 	bl	8001652 <isFreeEntry>
 800190a:	4603      	mov	r3, r0
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 822a 	beq.w	8001d6c <nextFile+0x5fc>
			if (isEndOfDir(temp)) {
 8001918:	466d      	mov	r5, sp
 800191a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800191e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001922:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001926:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800192a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800192e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001930:	f7ff feb5 	bl	800169e <isEndOfDir>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d013      	beq.n	8001962 <nextFile+0x1f2>
				memset(&temp, 0, sizeof(myFile));
 800193a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800193e:	222c      	movs	r2, #44	; 0x2c
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f002 fbc2 	bl	80040cc <memset>
				return temp;
 8001948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194a:	461d      	mov	r5, r3
 800194c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001958:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800195c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001960:	e264      	b.n	8001e2c <nextFile+0x6bc>
			}

			if (LFN_Entry(temp)) {
 8001962:	466d      	mov	r5, sp
 8001964:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800196c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001970:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001974:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800197a:	f7ff fea2 	bl	80016c2 <LFN_Entry>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 81b2 	beq.w	8001cea <nextFile+0x57a>
 8001986:	466b      	mov	r3, sp
 8001988:	461e      	mov	r6, r3

				memset(fileName, 0, sizeof(fileName));
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	2100      	movs	r1, #0
 800198e:	4849      	ldr	r0, [pc, #292]	; (8001ab4 <nextFile+0x344>)
 8001990:	f002 fb9c 	bl	80040cc <memset>
				uint8_t LFN_entryCnt = ((((LFN_entry_t*) &temp)->LDIR_Ord)
 8001994:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
						& 0x0F);
				uint8_t lfnEntCntTemp = LFN_entryCnt;
 80019a2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80019a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				char tempName[LFN_entryCnt][13];
 80019aa:	f897 1086 	ldrb.w	r1, [r7, #134]	; 0x86
 80019ae:	460b      	mov	r3, r1
 80019b0:	3b01      	subs	r3, #1
 80019b2:	673b      	str	r3, [r7, #112]	; 0x70
 80019b4:	b2cb      	uxtb	r3, r1
 80019b6:	2200      	movs	r2, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019bc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80019c0:	4622      	mov	r2, r4
 80019c2:	462b      	mov	r3, r5
 80019c4:	1890      	adds	r0, r2, r2
 80019c6:	61b8      	str	r0, [r7, #24]
 80019c8:	415b      	adcs	r3, r3
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d0:	4620      	mov	r0, r4
 80019d2:	eb12 0800 	adds.w	r8, r2, r0
 80019d6:	4628      	mov	r0, r5
 80019d8:	eb43 0900 	adc.w	r9, r3, r0
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80019e8:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 80019ec:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80019f0:	4690      	mov	r8, r2
 80019f2:	4699      	mov	r9, r3
 80019f4:	4623      	mov	r3, r4
 80019f6:	eb18 0303 	adds.w	r3, r8, r3
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	462b      	mov	r3, r5
 80019fe:	eb49 0303 	adc.w	r3, r9, r3
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a10:	4628      	mov	r0, r5
 8001a12:	00c3      	lsls	r3, r0, #3
 8001a14:	4620      	mov	r0, r4
 8001a16:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	00c2      	lsls	r2, r0, #3
 8001a1e:	b2cb      	uxtb	r3, r1
 8001a20:	2200      	movs	r2, #0
 8001a22:	623b      	str	r3, [r7, #32]
 8001a24:	627a      	str	r2, [r7, #36]	; 0x24
 8001a26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	1890      	adds	r0, r2, r2
 8001a30:	60b8      	str	r0, [r7, #8]
 8001a32:	415b      	adcs	r3, r3
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	eb12 0a00 	adds.w	sl, r2, r0
 8001a40:	4628      	mov	r0, r5
 8001a42:	eb43 0b00 	adc.w	fp, r3, r0
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8001a52:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8001a56:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8001a5a:	4692      	mov	sl, r2
 8001a5c:	469b      	mov	fp, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	eb1a 0303 	adds.w	r3, sl, r3
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	462b      	mov	r3, r5
 8001a68:	eb4b 0303 	adc.w	r3, fp, r3
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	00c3      	lsls	r3, r0, #3
 8001a7e:	4620      	mov	r0, r4
 8001a80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a84:	4620      	mov	r0, r4
 8001a86:	00c2      	lsls	r2, r0, #3
 8001a88:	460a      	mov	r2, r1
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3307      	adds	r3, #7
 8001a96:	08db      	lsrs	r3, r3, #3
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	ebad 0d03 	sub.w	sp, sp, r3
 8001a9e:	ab08      	add	r3, sp, #32
 8001aa0:	3300      	adds	r3, #0
 8001aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
				while (LFN_entryCnt) {
 8001aa4:	e0cf      	b.n	8001c46 <nextFile+0x4d6>
 8001aa6:	bf00      	nop
 8001aa8:	200000c0 	.word	0x200000c0
 8001aac:	0ffffff7 	.word	0x0ffffff7
 8001ab0:	200000e8 	.word	0x200000e8
 8001ab4:	20000300 	.word	0x20000300
					uint8_t tempNameIndex;
					LFN_entry_t *entry = (LFN_entry_t*) (SD_buff
							+ (p_file->entryIndex % 16) * 32);
 8001ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	015b      	lsls	r3, r3, #5
					LFN_entry_t *entry = (LFN_entry_t*) (SD_buff
 8001ac2:	4aa5      	ldr	r2, [pc, #660]	; (8001d58 <nextFile+0x5e8>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	66bb      	str	r3, [r7, #104]	; 0x68

					for (uint8_t i = 0; i < 10; i += 2)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8001ace:	e01c      	b.n	8001b0a <nextFile+0x39a>
						tempName[LFN_entryCnt - 1][tempNameIndex++] =
								entry->LDIR_Name1[i];
 8001ad0:	f897 1084 	ldrb.w	r1, [r7, #132]	; 0x84
						tempName[LFN_entryCnt - 1][tempNameIndex++] =
 8001ad4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001ade:	1c58      	adds	r0, r3, #1
 8001ae0:	f887 0085 	strb.w	r0, [r7, #133]	; 0x85
 8001ae4:	461c      	mov	r4, r3
								entry->LDIR_Name1[i];
 8001ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ae8:	440b      	add	r3, r1
 8001aea:	7858      	ldrb	r0, [r3, #1]
						tempName[LFN_entryCnt - 1][tempNameIndex++] =
 8001aec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	4423      	add	r3, r4
 8001afc:	4602      	mov	r2, r0
 8001afe:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; i < 10; i += 2)
 8001b00:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001b04:	3302      	adds	r3, #2
 8001b06:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
 8001b0a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001b0e:	2b09      	cmp	r3, #9
 8001b10:	d9de      	bls.n	8001ad0 <nextFile+0x360>

					for (uint8_t i = 0; i < 12; i += 2)
 8001b12:	2300      	movs	r3, #0
 8001b14:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001b18:	e01c      	b.n	8001b54 <nextFile+0x3e4>
						tempName[LFN_entryCnt - 1][tempNameIndex++] =
								entry->LDIR_Name2[i];
 8001b1a:	f897 1083 	ldrb.w	r1, [r7, #131]	; 0x83
						tempName[LFN_entryCnt - 1][tempNameIndex++] =
 8001b1e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001b22:	1e5a      	subs	r2, r3, #1
 8001b24:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001b28:	1c58      	adds	r0, r3, #1
 8001b2a:	f887 0085 	strb.w	r0, [r7, #133]	; 0x85
 8001b2e:	461c      	mov	r4, r3
								entry->LDIR_Name2[i];
 8001b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b32:	440b      	add	r3, r1
 8001b34:	7b98      	ldrb	r0, [r3, #14]
						tempName[LFN_entryCnt - 1][tempNameIndex++] =
 8001b36:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001b38:	4613      	mov	r3, r2
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	4423      	add	r3, r4
 8001b46:	4602      	mov	r2, r0
 8001b48:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; i < 12; i += 2)
 8001b4a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001b4e:	3302      	adds	r3, #2
 8001b50:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001b54:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001b58:	2b0b      	cmp	r3, #11
 8001b5a:	d9de      	bls.n	8001b1a <nextFile+0x3aa>

					for (uint8_t i = 0; i < 4; i += 2)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8001b62:	e01c      	b.n	8001b9e <nextFile+0x42e>
						tempName[LFN_entryCnt - 1][tempNameIndex++] =
								entry->LDIR_Name3[i];
 8001b64:	f897 1082 	ldrb.w	r1, [r7, #130]	; 0x82
						tempName[LFN_entryCnt - 1][tempNameIndex++] =
 8001b68:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001b72:	1c58      	adds	r0, r3, #1
 8001b74:	f887 0085 	strb.w	r0, [r7, #133]	; 0x85
 8001b78:	461c      	mov	r4, r3
								entry->LDIR_Name3[i];
 8001b7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b7c:	440b      	add	r3, r1
 8001b7e:	7f18      	ldrb	r0, [r3, #28]
						tempName[LFN_entryCnt - 1][tempNameIndex++] =
 8001b80:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	4423      	add	r3, r4
 8001b90:	4602      	mov	r2, r0
 8001b92:	701a      	strb	r2, [r3, #0]
					for (uint8_t i = 0; i < 4; i += 2)
 8001b94:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8001b9e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d9de      	bls.n	8001b64 <nextFile+0x3f4>

					LFN_entryCnt--;
 8001ba6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
					tempNameIndex = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
					p_file->entryIndex++;
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	621a      	str	r2, [r3, #32]

					if ((p_file->entryIndex % 16) == 0) {
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	f003 030f 	and.w	r3, r3, #15
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d13c      	bne.n	8001c46 <nextFile+0x4d6>
						sectorIndex++;
 8001bcc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

						if (sectorIndex == params.BPB_SecPerClus) {
 8001bd6:	4b61      	ldr	r3, [pc, #388]	; (8001d5c <nextFile+0x5ec>)
 8001bd8:	789b      	ldrb	r3, [r3, #2]
 8001bda:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d125      	bne.n	8001c2e <nextFile+0x4be>
							sectorIndex = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							currentClus = fatNextClus(currentClus);
 8001be8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001bec:	f7ff fc3e 	bl	800146c <fatNextClus>
 8001bf0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
							if (currentClus >= FAT_EOC) {
 8001bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bf8:	4a59      	ldr	r2, [pc, #356]	; (8001d60 <nextFile+0x5f0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d917      	bls.n	8001c2e <nextFile+0x4be>
								p_file->entryIndex = 2;
 8001bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c00:	2202      	movs	r2, #2
 8001c02:	621a      	str	r2, [r3, #32]
								memset(&temp, 0, sizeof(myFile));
 8001c04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c08:	222c      	movs	r2, #44	; 0x2c
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f002 fa5d 	bl	80040cc <memset>
								return temp;
 8001c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c14:	461d      	mov	r5, r3
 8001c16:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c22:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c26:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001c2a:	46b5      	mov	sp, r6
		temp.entryIndex = 2;
	else
		temp.entryIndex = 0;

	return temp;
}
 8001c2c:	e0fe      	b.n	8001e2c <nextFile+0x6bc>
						SD_readSector(startSecOfClus(currentClus) + sectorIndex,
 8001c2e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001c32:	f7ff fc5b 	bl	80014ec <startSecOfClus>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4946      	ldr	r1, [pc, #280]	; (8001d58 <nextFile+0x5e8>)
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f8b7 	bl	8000db4 <SD_readSector>
				while (LFN_entryCnt) {
 8001c46:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f47f af34 	bne.w	8001ab8 <nextFile+0x348>
				char *p_name = (char*) tempName;
 8001c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c52:	67fb      	str	r3, [r7, #124]	; 0x7c
				while ((*p_name) != '\0')
 8001c54:	e00b      	b.n	8001c6e <nextFile+0x4fe>
					fileName[fileNameIndex++] = *(p_name++);
 8001c56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c58:	1c5a      	adds	r2, r3, #1
 8001c5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001c5c:	4a41      	ldr	r2, [pc, #260]	; (8001d64 <nextFile+0x5f4>)
 8001c5e:	7812      	ldrb	r2, [r2, #0]
 8001c60:	1c51      	adds	r1, r2, #1
 8001c62:	b2c8      	uxtb	r0, r1
 8001c64:	493f      	ldr	r1, [pc, #252]	; (8001d64 <nextFile+0x5f4>)
 8001c66:	7008      	strb	r0, [r1, #0]
 8001c68:	7819      	ldrb	r1, [r3, #0]
 8001c6a:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <nextFile+0x5f8>)
 8001c6c:	5499      	strb	r1, [r3, r2]
				while ((*p_name) != '\0')
 8001c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1ef      	bne.n	8001c56 <nextFile+0x4e6>
				fileNameIndex = 0;
 8001c76:	4b3b      	ldr	r3, [pc, #236]	; (8001d64 <nextFile+0x5f4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
				temp = *((myFile*) (SD_buff + (p_file->entryIndex % 16) * 32));
 8001c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	015b      	lsls	r3, r3, #5
 8001c86:	4a34      	ldr	r2, [pc, #208]	; (8001d58 <nextFile+0x5e8>)
 8001c88:	4413      	add	r3, r2
 8001c8a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001c8e:	461d      	mov	r5, r3
 8001c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				temp.fileEntInf.Cluster = currentClus;
 8001ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ca4:	663b      	str	r3, [r7, #96]	; 0x60
				temp.fileEntInf.sectorIndex = sectorIndex;
 8001ca6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001caa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
				temp.fileEntInf.entryIndex = p_file->entryIndex % 16;
 8001cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f003 030f 	and.w	r3, r3, #15
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				temp.fileEntInf.LFN_EntCnt = lfnEntCntTemp;
 8001cbe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001cc2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				p_file->entryIndex++;
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	621a      	str	r2, [r3, #32]
				if (p_file->entryIndex % 16 == 0)
 8001cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d104      	bne.n	8001ce6 <nextFile+0x576>
					sectorIndex++;
 8001cdc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				break;
 8001ce6:	46b5      	mov	sp, r6
 8001ce8:	e07e      	b.n	8001de8 <nextFile+0x678>
				memset(fileName, 0, sizeof(fileName));
 8001cea:	2280      	movs	r2, #128	; 0x80
 8001cec:	2100      	movs	r1, #0
 8001cee:	481e      	ldr	r0, [pc, #120]	; (8001d68 <nextFile+0x5f8>)
 8001cf0:	f002 f9ec 	bl	80040cc <memset>
				getShortFileName(temp);
 8001cf4:	466d      	mov	r5, sp
 8001cf6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cfe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0c:	f7ff fc06 	bl	800151c <getShortFileName>
				temp.fileEntInf.Cluster = currentClus;
 8001d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d14:	663b      	str	r3, [r7, #96]	; 0x60
				temp.fileEntInf.sectorIndex = sectorIndex;
 8001d16:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d1a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
				temp.fileEntInf.entryIndex = p_file->entryIndex % 16;
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
				temp.fileEntInf.LFN_EntCnt = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
				p_file->entryIndex++;
 8001d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3c:	621a      	str	r2, [r3, #32]
				if (p_file->entryIndex % 16 == 0)
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d14d      	bne.n	8001de6 <nextFile+0x676>
					sectorIndex++;
 8001d4a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d4e:	3301      	adds	r3, #1
 8001d50:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				break;
 8001d54:	e047      	b.n	8001de6 <nextFile+0x676>
 8001d56:	bf00      	nop
 8001d58:	200000e8 	.word	0x200000e8
 8001d5c:	200000c0 	.word	0x200000c0
 8001d60:	0ffffff7 	.word	0x0ffffff7
 8001d64:	20000380 	.word	0x20000380
 8001d68:	20000300 	.word	0x20000300
			p_file->entryIndex++;
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	621a      	str	r2, [r3, #32]
			if (p_file->entryIndex % 16 == 0)
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <nextFile+0x61c>
				sectorIndex++;
 8001d82:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d86:	3301      	adds	r3, #1
 8001d88:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		if (sectorIndex == params.BPB_SecPerClus) {
 8001d8c:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <nextFile+0x6c8>)
 8001d8e:	789a      	ldrb	r2, [r3, #2]
 8001d90:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001d94:	4293      	cmp	r3, r2
 8001d96:	f47f ad8c 	bne.w	80018b2 <nextFile+0x142>
			sectorIndex = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			currentClus = fatNextClus(currentClus);
 8001da0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001da4:	f7ff fb62 	bl	800146c <fatNextClus>
 8001da8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			if (currentClus >= FAT_EOC) {
 8001dac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <nextFile+0x6cc>)
 8001db2:	429a      	cmp	r2, r3
 8001db4:	f67f ad7d 	bls.w	80018b2 <nextFile+0x142>
				p_file->entryIndex = 2;
 8001db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dba:	2202      	movs	r2, #2
 8001dbc:	621a      	str	r2, [r3, #32]
				memset(&temp, 0, sizeof(myFile));
 8001dbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dc2:	222c      	movs	r2, #44	; 0x2c
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 f980 	bl	80040cc <memset>
				return temp;
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dce:	461d      	mov	r5, r3
 8001dd0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ddc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001de0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001de4:	e022      	b.n	8001e2c <nextFile+0x6bc>
				break;
 8001de6:	bf00      	nop
	if (isDirectory(temp))
 8001de8:	466d      	mov	r5, sp
 8001dea:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8001dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001df6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001dfa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e00:	f7ff fc39 	bl	8001676 <isDirectory>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <nextFile+0x6a0>
		temp.entryIndex = 2;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e0e:	e001      	b.n	8001e14 <nextFile+0x6a4>
		temp.entryIndex = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	65fb      	str	r3, [r7, #92]	; 0x5c
	return temp;
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	461d      	mov	r5, r3
 8001e18:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e24:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001e2c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e2e:	3794      	adds	r7, #148	; 0x94
 8001e30:	46bd      	mov	sp, r7
 8001e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e36:	bf00      	nop
 8001e38:	200000c0 	.word	0x200000c0
 8001e3c:	0ffffff7 	.word	0x0ffffff7

08001e40 <fileExists>:

static myFile fileExists(const char *file, myFile folder) {
 8001e40:	b082      	sub	sp, #8
 8001e42:	b5b0      	push	{r4, r5, r7, lr}
 8001e44:	b0a2      	sub	sp, #136	; 0x88
 8001e46:	af08      	add	r7, sp, #32
 8001e48:	6378      	str	r0, [r7, #52]	; 0x34
 8001e4a:	6339      	str	r1, [r7, #48]	; 0x30
 8001e4c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001e50:	e881 000c 	stmia.w	r1, {r2, r3}
	myFile tempFile = { 0 };
 8001e54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e58:	222c      	movs	r2, #44	; 0x2c
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f002 f935 	bl	80040cc <memset>

	while (!isEndOfDir(tempFile = nextFile(&folder))) {
 8001e62:	e03a      	b.n	8001eda <fileExists+0x9a>
		uint8_t nameIndx;
		for (nameIndx = 0; nameIndx < strlen(file); nameIndx++) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e6a:	e00f      	b.n	8001e8c <fileExists+0x4c>
			if (file[nameIndx] != fileName[nameIndx])
 8001e6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e72:	4413      	add	r3, r2
 8001e74:	781a      	ldrb	r2, [r3, #0]
 8001e76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e7a:	4937      	ldr	r1, [pc, #220]	; (8001f58 <fileExists+0x118>)
 8001e7c:	5ccb      	ldrb	r3, [r1, r3]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d10d      	bne.n	8001e9e <fileExists+0x5e>
		for (nameIndx = 0; nameIndx < strlen(file); nameIndx++) {
 8001e82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e86:	3301      	adds	r3, #1
 8001e88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e8c:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 8001e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e92:	f7fe f99f 	bl	80001d4 <strlen>
 8001e96:	4603      	mov	r3, r0
 8001e98:	429c      	cmp	r4, r3
 8001e9a:	d3e7      	bcc.n	8001e6c <fileExists+0x2c>
 8001e9c:	e000      	b.n	8001ea0 <fileExists+0x60>
				break;
 8001e9e:	bf00      	nop
		}
		if (nameIndx == strlen(file) && nameIndx == strlen(fileName))
 8001ea0:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 8001ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ea6:	f7fe f995 	bl	80001d4 <strlen>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	429c      	cmp	r4, r3
 8001eae:	d114      	bne.n	8001eda <fileExists+0x9a>
 8001eb0:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 8001eb4:	4828      	ldr	r0, [pc, #160]	; (8001f58 <fileExists+0x118>)
 8001eb6:	f7fe f98d 	bl	80001d4 <strlen>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	429c      	cmp	r4, r3
 8001ebe:	d10c      	bne.n	8001eda <fileExists+0x9a>
			return tempFile;
 8001ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec2:	461d      	mov	r5, r3
 8001ec4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001ec8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ece:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ed4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ed8:	e037      	b.n	8001f4a <fileExists+0x10a>
	while (!isEndOfDir(tempFile = nextFile(&folder))) {
 8001eda:	463b      	mov	r3, r7
 8001edc:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fc45 	bl	8001770 <nextFile>
 8001ee6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001eea:	463d      	mov	r5, r7
 8001eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ef8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001efc:	466d      	mov	r5, sp
 8001efe:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001f02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f06:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f14:	f7ff fbc3 	bl	800169e <isEndOfDir>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f083 0301 	eor.w	r3, r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d19f      	bne.n	8001e64 <fileExists+0x24>
	}
	memset(&tempFile, 0, sizeof(myFile));
 8001f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f28:	222c      	movs	r2, #44	; 0x2c
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 f8cd 	bl	80040cc <memset>
	return tempFile;
 8001f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f34:	461d      	mov	r5, r3
 8001f36:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001f3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f42:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f46:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001f4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f4c:	3768      	adds	r7, #104	; 0x68
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001f54:	b002      	add	sp, #8
 8001f56:	4770      	bx	lr
 8001f58:	20000300 	.word	0x20000300

08001f5c <pathExists>:

myFile pathExists(const char *path) {
 8001f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f5e:	b0af      	sub	sp, #188	; 0xbc
 8001f60:	af0a      	add	r7, sp, #40	; 0x28
 8001f62:	6378      	str	r0, [r7, #52]	; 0x34
 8001f64:	6339      	str	r1, [r7, #48]	; 0x30
	myFile tempFile = rootDir();
 8001f66:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fbce 	bl	800170c <rootDir>

	if (strlen(path) == 1 && path[0] == '/')
 8001f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f72:	f7fe f92f 	bl	80001d4 <strlen>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d110      	bne.n	8001f9e <pathExists+0x42>
 8001f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b2f      	cmp	r3, #47	; 0x2f
 8001f82:	d10c      	bne.n	8001f9e <pathExists+0x42>
		return tempFile;
 8001f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f86:	461d      	mov	r5, r3
 8001f88:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f94:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f98:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001f9c:	e098      	b.n	80020d0 <pathExists+0x174>

	uint8_t index = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	uint8_t charCnt = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	while (path[charCnt] != '\0') {
 8001faa:	e07d      	b.n	80020a8 <pathExists+0x14c>
		char dirName[36] = "";
 8001fac:	2300      	movs	r3, #0
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 f887 	bl	80040cc <memset>
		for (uint8_t i = index + 1; i < index + 36; i++) {
 8001fbe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8001fc8:	e026      	b.n	8002018 <pathExists+0xbc>
			charCnt++;
 8001fca:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

			if (path[i] == '/' || path[i] == '\0')
 8001fd4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fda:	4413      	add	r3, r2
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b2f      	cmp	r3, #47	; 0x2f
 8001fe0:	d022      	beq.n	8002028 <pathExists+0xcc>
 8001fe2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fe8:	4413      	add	r3, r2
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01b      	beq.n	8002028 <pathExists+0xcc>
				break;
			dirName[charCnt - index - 1] = path[i];
 8001ff0:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8001ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff6:	441a      	add	r2, r3
 8001ff8:	f897 108e 	ldrb.w	r1, [r7, #142]	; 0x8e
 8001ffc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8002000:	1acb      	subs	r3, r1, r3
 8002002:	3b01      	subs	r3, #1
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	3390      	adds	r3, #144	; 0x90
 8002008:	443b      	add	r3, r7
 800200a:	f803 2c54 	strb.w	r2, [r3, #-84]
		for (uint8_t i = index + 1; i < index + 36; i++) {
 800200e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002012:	3301      	adds	r3, #1
 8002014:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8002018:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800201c:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8002020:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002024:	429a      	cmp	r2, r3
 8002026:	dad0      	bge.n	8001fca <pathExists+0x6e>
		}
		index = charCnt;
 8002028:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800202c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		tempFile = fileExists(dirName, tempFile);
 8002030:	463e      	mov	r6, r7
 8002032:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
 8002036:	466d      	mov	r5, sp
 8002038:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800203c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800203e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	602b      	str	r3, [r5, #0]
 8002048:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800204c:	cb0c      	ldmia	r3, {r2, r3}
 800204e:	4661      	mov	r1, ip
 8002050:	4630      	mov	r0, r6
 8002052:	f7ff fef5 	bl	8001e40 <fileExists>
 8002056:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800205a:	463d      	mov	r5, r7
 800205c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800205e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002064:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002068:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		if (startCluster(tempFile) == 0)
 800206c:	466d      	mov	r5, sp
 800206e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8002072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002076:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800207a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800207e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	f7ff face 	bl	8001624 <startCluster>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <pathExists+0x14c>
			return tempFile;
 800208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002090:	461d      	mov	r5, r3
 8002092:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8002096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800209e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	return tempFile;
}
 80020a6:	e013      	b.n	80020d0 <pathExists+0x174>
	while (path[charCnt] != '\0') {
 80020a8:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80020ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020ae:	4413      	add	r3, r2
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f47f af7a 	bne.w	8001fac <pathExists+0x50>
	return tempFile;
 80020b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ba:	461d      	mov	r5, r3
 80020bc:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80020c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020cc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80020d0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020d2:	3794      	adds	r7, #148	; 0x94
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020d8 <fileClose>:
	}
	strcpy(ext, &file_name[idx + 1]);
	return ext;
}

void fileClose(myFile *p_file) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	memset(p_file, 0, sizeof(myFile));
 80020e0:	222c      	movs	r2, #44	; 0x2c
 80020e2:	2100      	movs	r1, #0
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f001 fff1 	bl	80040cc <memset>
	SD_readMultipleSecStop();
 80020ea:	f7fe ff7f 	bl	8000fec <SD_readMultipleSecStop>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <isClosed>:

bool isClosed(myFile *p_file) {
 80020f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f8:	b08b      	sub	sp, #44	; 0x2c
 80020fa:	af08      	add	r7, sp, #32
 80020fc:	6078      	str	r0, [r7, #4]
	if ((startCluster(*p_file) == 0) && (p_file->DIR_FileSize == 0))
 80020fe:	687e      	ldr	r6, [r7, #4]
 8002100:	466d      	mov	r5, sp
 8002102:	f106 0410 	add.w	r4, r6, #16
 8002106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800210e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002112:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002116:	f7ff fa85 	bl	8001624 <startCluster>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <isClosed+0x36>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <isClosed+0x36>
		return true;
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <isClosed+0x38>
	return false;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002138 <readByte>:
	//reset index;
	p_file->entryIndex = 0;

}

uint8_t readByte(myFile *p_file) {
 8002138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213a:	b08b      	sub	sp, #44	; 0x2c
 800213c:	af08      	add	r7, sp, #32
 800213e:	6078      	str	r0, [r7, #4]
	static bool readStarted = false;
	static uint32_t Cluster = 0xFFFFFFFF;

	if (Cluster == 0xFFFFFFFF)
 8002140:	4b53      	ldr	r3, [pc, #332]	; (8002290 <readByte+0x158>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002148:	d110      	bne.n	800216c <readByte+0x34>
		Cluster = startCluster(*p_file);
 800214a:	687e      	ldr	r6, [r7, #4]
 800214c:	466d      	mov	r5, sp
 800214e:	f106 0410 	add.w	r4, r6, #16
 8002152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002154:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002156:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800215a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800215e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002162:	f7ff fa5f 	bl	8001624 <startCluster>
 8002166:	4603      	mov	r3, r0
 8002168:	4a49      	ldr	r2, [pc, #292]	; (8002290 <readByte+0x158>)
 800216a:	6013      	str	r3, [r2, #0]

	if (p_file->entryIndex == 0) {
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d113      	bne.n	800219c <readByte+0x64>
		readStarted = false;
 8002174:	4b47      	ldr	r3, [pc, #284]	; (8002294 <readByte+0x15c>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
		Cluster = startCluster(*p_file);
 800217a:	687e      	ldr	r6, [r7, #4]
 800217c:	466d      	mov	r5, sp
 800217e:	f106 0410 	add.w	r4, r6, #16
 8002182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002186:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800218a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800218e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002192:	f7ff fa47 	bl	8001624 <startCluster>
 8002196:	4603      	mov	r3, r0
 8002198:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <readByte+0x158>)
 800219a:	6013      	str	r3, [r2, #0]
	}

	if (isClosed(p_file)) {
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f7ff ffaa 	bl	80020f6 <isClosed>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <readByte+0x7e>
		SD_readMultipleSecStop();
 80021a8:	f7fe ff20 	bl	8000fec <SD_readMultipleSecStop>
		readStarted = false;
 80021ac:	4b39      	ldr	r3, [pc, #228]	; (8002294 <readByte+0x15c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
		return 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e068      	b.n	8002288 <readByte+0x150>
	}

	if (!readStarted) {
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <readByte+0x15c>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f083 0301 	eor.w	r3, r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00e      	beq.n	80021e2 <readByte+0xaa>
		SD_readMultipleSecStart(startSecOfClus(Cluster));
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <readByte+0x158>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f98f 	bl	80014ec <startSecOfClus>
 80021ce:	4603      	mov	r3, r0
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fea3 	bl	8000f1c <SD_readMultipleSecStart>
		SD_readMultipleSec(SD_buff);
 80021d6:	4830      	ldr	r0, [pc, #192]	; (8002298 <readByte+0x160>)
 80021d8:	f7fe fec0 	bl	8000f5c <SD_readMultipleSec>
		readStarted = true;
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <readByte+0x15c>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
	}

	if ((p_file->entryIndex > 0)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d02e      	beq.n	8002248 <readByte+0x110>
			&& (p_file->entryIndex
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
					% (params.BPB_SecPerClus * params.BPB_BytesPerSec) == 0)) {
 80021ee:	4a2b      	ldr	r2, [pc, #172]	; (800229c <readByte+0x164>)
 80021f0:	7892      	ldrb	r2, [r2, #2]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <readByte+0x164>)
 80021f6:	8812      	ldrh	r2, [r2, #0]
 80021f8:	fb01 f202 	mul.w	r2, r1, r2
 80021fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002200:	fb01 f202 	mul.w	r2, r1, r2
 8002204:	1a9b      	subs	r3, r3, r2
			&& (p_file->entryIndex
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11e      	bne.n	8002248 <readByte+0x110>
		SD_readMultipleSecStop();
 800220a:	f7fe feef 	bl	8000fec <SD_readMultipleSecStop>
		Cluster = fatNextClus(Cluster);
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <readByte+0x158>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f92a 	bl	800146c <fatNextClus>
 8002218:	4603      	mov	r3, r0
 800221a:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <readByte+0x158>)
 800221c:	6013      	str	r3, [r2, #0]
		if (Cluster >= FAT_EOC) {
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <readByte+0x158>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <readByte+0x168>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d906      	bls.n	8002236 <readByte+0xfe>
			SD_readMultipleSecStop();
 8002228:	f7fe fee0 	bl	8000fec <SD_readMultipleSecStop>
			readStarted = false;
 800222c:	4b19      	ldr	r3, [pc, #100]	; (8002294 <readByte+0x15c>)
 800222e:	2200      	movs	r2, #0
 8002230:	701a      	strb	r2, [r3, #0]
			return 0;
 8002232:	2300      	movs	r3, #0
 8002234:	e028      	b.n	8002288 <readByte+0x150>
		}
		SD_readMultipleSecStart(startSecOfClus(Cluster));
 8002236:	4b16      	ldr	r3, [pc, #88]	; (8002290 <readByte+0x158>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff f956 	bl	80014ec <startSecOfClus>
 8002240:	4603      	mov	r3, r0
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe fe6a 	bl	8000f1c <SD_readMultipleSecStart>
	}

	if (p_file->entryIndex > 0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00d      	beq.n	800226c <readByte+0x134>
			&& (p_file->entryIndex % params.BPB_BytesPerSec == 0))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4a11      	ldr	r2, [pc, #68]	; (800229c <readByte+0x164>)
 8002256:	8812      	ldrh	r2, [r2, #0]
 8002258:	fbb3 f1f2 	udiv	r1, r3, r2
 800225c:	fb01 f202 	mul.w	r2, r1, r2
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <readByte+0x134>
		SD_readMultipleSec(SD_buff);
 8002266:	480c      	ldr	r0, [pc, #48]	; (8002298 <readByte+0x160>)
 8002268:	f7fe fe78 	bl	8000f5c <SD_readMultipleSec>

	return SD_buff[(p_file->entryIndex++) % params.BPB_BytesPerSec];
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	1c59      	adds	r1, r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6211      	str	r1, [r2, #32]
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <readByte+0x164>)
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	fbb3 f1f2 	udiv	r1, r3, r2
 800227e:	fb01 f202 	mul.w	r2, r1, r2
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <readByte+0x160>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002290:	20000008 	.word	0x20000008
 8002294:	20000381 	.word	0x20000381
 8002298:	200000e8 	.word	0x200000e8
 800229c:	200000c0 	.word	0x200000c0
 80022a0:	0ffffff7 	.word	0x0ffffff7

080022a4 <fileNameLength>:
	*hour = strtol(time_str, &endptr, 10);
	*minute = strtol(endptr + 1, &endptr, 10);
	*second = strtol(endptr + 1, NULL, 10);
}

static uint8_t fileNameLength(const char *filename) {
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

	uint8_t i;
	for (i = 0; i < strlen(filename); i++) {
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]
 80022b0:	e008      	b.n	80022c4 <fileNameLength+0x20>
		if (filename[i] == '.')
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b2e      	cmp	r3, #46	; 0x2e
 80022bc:	d00a      	beq.n	80022d4 <fileNameLength+0x30>
	for (i = 0; i < strlen(filename); i++) {
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	3301      	adds	r3, #1
 80022c2:	73fb      	strb	r3, [r7, #15]
 80022c4:	7bfc      	ldrb	r4, [r7, #15]
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fd ff84 	bl	80001d4 <strlen>
 80022cc:	4603      	mov	r3, r0
 80022ce:	429c      	cmp	r4, r3
 80022d0:	d3ef      	bcc.n	80022b2 <fileNameLength+0xe>
 80022d2:	e000      	b.n	80022d6 <fileNameLength+0x32>
			break;
 80022d4:	bf00      	nop
	}
	return i;
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd90      	pop	{r4, r7, pc}

080022e0 <allLowerCase>:

static bool allLowerCase(const char *filename) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < fileNameLength(filename); i++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e010      	b.n	8002310 <allLowerCase+0x30>
		if ((((uint8_t) filename[i]) < 91) && (((uint8_t) filename[i]) > 64)) {
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b5a      	cmp	r3, #90	; 0x5a
 80022f8:	d807      	bhi.n	800230a <allLowerCase+0x2a>
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d901      	bls.n	800230a <allLowerCase+0x2a>
			return false;
 8002306:	2300      	movs	r3, #0
 8002308:	e00b      	b.n	8002322 <allLowerCase+0x42>
	for (uint8_t i = 0; i < fileNameLength(filename); i++) {
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	3301      	adds	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ffc7 	bl	80022a4 <fileNameLength>
 8002316:	4603      	mov	r3, r0
 8002318:	461a      	mov	r2, r3
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	4293      	cmp	r3, r2
 800231e:	d3e6      	bcc.n	80022ee <allLowerCase+0xe>
		}
	}
	return true;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <mixedLetters>:

static bool mixedLetters(const char *filename) {
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	if (!allLowerCase(filename)) {
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffd4 	bl	80022e0 <allLowerCase>
 8002338:	4603      	mov	r3, r0
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d015      	beq.n	8002370 <mixedLetters+0x46>
		for (uint8_t i = 0; i < fileNameLength(filename); i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e00a      	b.n	8002360 <mixedLetters+0x36>
			if (((uint8_t) filename[i] > 96)) {
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b60      	cmp	r3, #96	; 0x60
 8002354:	d901      	bls.n	800235a <mixedLetters+0x30>
				return true;
 8002356:	2301      	movs	r3, #1
 8002358:	e00b      	b.n	8002372 <mixedLetters+0x48>
		for (uint8_t i = 0; i < fileNameLength(filename); i++) {
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	3301      	adds	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff9f 	bl	80022a4 <fileNameLength>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	7bfb      	ldrb	r3, [r7, #15]
 800236c:	4293      	cmp	r3, r2
 800236e:	d3ec      	bcc.n	800234a <mixedLetters+0x20>
			}
		}
	}
	return false;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <fileDelete>:
		}
	}
	return true;
}

bool fileDelete(const char *path, const char *filename) {
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	b0b3      	sub	sp, #204	; 0xcc
 8002380:	af0a      	add	r7, sp, #40	; 0x28
 8002382:	6378      	str	r0, [r7, #52]	; 0x34
 8002384:	6339      	str	r1, [r7, #48]	; 0x30
	myFile pathDir;

	myFile tempFile = pathExists(path);
 8002386:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800238a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fde5 	bl	8001f5c <pathExists>
	if (startCluster(tempFile) == 0) {
 8002392:	466d      	mov	r5, sp
 8002394:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8002398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800239a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800239c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80023a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80023a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023aa:	f7ff f93b 	bl	8001624 <startCluster>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <fileDelete+0x3c>
		return false;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e0cf      	b.n	8002558 <fileDelete+0x1dc>
	}

	pathDir = tempFile;
 80023b8:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80023bc:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80023c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	tempFile = fileExists(filename, pathDir);
 80023d0:	463e      	mov	r6, r7
 80023d2:	466d      	mov	r5, sp
 80023d4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80023d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	602b      	str	r3, [r5, #0]
 80023e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023e8:	cb0c      	ldmia	r3, {r2, r3}
 80023ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023ec:	4630      	mov	r0, r6
 80023ee:	f7ff fd27 	bl	8001e40 <fileExists>
 80023f2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80023f6:	463d      	mov	r5, r7
 80023f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002400:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002404:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	if (startCluster(tempFile) == 0) {
 8002408:	466d      	mov	r5, sp
 800240a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800240e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002412:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002416:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800241a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800241e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002420:	f7ff f900 	bl	8001624 <startCluster>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <fileDelete+0xb2>
		return false;
 800242a:	2300      	movs	r3, #0
 800242c:	e094      	b.n	8002558 <fileDelete+0x1dc>
	}

	uint8_t lfnEntCnt = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (mixedLetters(filename) || (fileNameLength(filename) > 8)) {
 8002434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002436:	f7ff ff78 	bl	800232a <mixedLetters>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <fileDelete+0xd0>
 8002440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002442:	f7ff ff2f 	bl	80022a4 <fileNameLength>
 8002446:	4603      	mov	r3, r0
 8002448:	2b08      	cmp	r3, #8
 800244a:	d91e      	bls.n	800248a <fileDelete+0x10e>
		lfnEntCnt = strlen(filename) / 13;
 800244c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800244e:	f7fd fec1 	bl	80001d4 <strlen>
 8002452:	4603      	mov	r3, r0
 8002454:	4a42      	ldr	r2, [pc, #264]	; (8002560 <fileDelete+0x1e4>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		if ((strlen(filename) % 13) != 0)
 8002460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002462:	f7fd feb7 	bl	80001d4 <strlen>
 8002466:	4601      	mov	r1, r0
 8002468:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <fileDelete+0x1e4>)
 800246a:	fba3 2301 	umull	r2, r3, r3, r1
 800246e:	089a      	lsrs	r2, r3, #2
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	1aca      	subs	r2, r1, r3
 800247c:	2a00      	cmp	r2, #0
 800247e:	d004      	beq.n	800248a <fileDelete+0x10e>
			lfnEntCnt += 1;
 8002480:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8002484:	3301      	adds	r3, #1
 8002486:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}

	if (SD_readSector(
			startSecOfClus(tempFile.fileEntInf.Cluster)
 800248a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f82d 	bl	80014ec <startSecOfClus>
 8002492:	4603      	mov	r3, r0
					+ tempFile.fileEntInf.sectorIndex, SD_buff)
 8002494:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
	if (SD_readSector(
 8002498:	4413      	add	r3, r2
 800249a:	4932      	ldr	r1, [pc, #200]	; (8002564 <fileDelete+0x1e8>)
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fc89 	bl	8000db4 <SD_readSector>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d156      	bne.n	8002556 <fileDelete+0x1da>
			== SD_READ_SUCCESS) {
		for (uint8_t i = 0; i < (lfnEntCnt + 1); i++) {
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80024ae:	e014      	b.n	80024da <fileDelete+0x15e>
			myFile *p_temp = (myFile*) (SD_buff
					+ (tempFile.fileEntInf.entryIndex - i) * 32);
 80024b0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80024b4:	461a      	mov	r2, r3
 80024b6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	015b      	lsls	r3, r3, #5
 80024be:	461a      	mov	r2, r3
			myFile *p_temp = (myFile*) (SD_buff
 80024c0:	4b28      	ldr	r3, [pc, #160]	; (8002564 <fileDelete+0x1e8>)
 80024c2:	4413      	add	r3, r2
 80024c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
			p_temp->DIR_Name[0] = 0xE5;
 80024c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024cc:	22e5      	movs	r2, #229	; 0xe5
 80024ce:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < (lfnEntCnt + 1); i++) {
 80024d0:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80024d4:	3301      	adds	r3, #1
 80024d6:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80024da:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80024de:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d2e4      	bcs.n	80024b0 <fileDelete+0x134>
		}

		if (SD_writeSector(
				startSecOfClus(tempFile.fileEntInf.Cluster)
 80024e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe ffff 	bl	80014ec <startSecOfClus>
 80024ee:	4603      	mov	r3, r0
						+ tempFile.fileEntInf.sectorIndex, SD_buff)
 80024f0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
		if (SD_writeSector(
 80024f4:	4413      	add	r3, r2
 80024f6:	491b      	ldr	r1, [pc, #108]	; (8002564 <fileDelete+0x1e8>)
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fce9 	bl	8000ed0 <SD_writeSector>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b05      	cmp	r3, #5
 8002502:	d126      	bne.n	8002552 <fileDelete+0x1d6>
				== SD_WRITE_SUCCESS) {
			uint32_t fileClus = startCluster(tempFile);
 8002504:	466d      	mov	r5, sp
 8002506:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800250a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800250c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800250e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002512:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002516:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800251a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800251c:	f7ff f882 	bl	8001624 <startCluster>
 8002520:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
			uint32_t tempClus;
			while (fileClus < FAT_EOC) {
 8002524:	e00e      	b.n	8002544 <fileDelete+0x1c8>
				tempClus = fileClus;
 8002526:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800252a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
				fileClus = fatNextClus(fileClus);
 800252e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002532:	f7fe ff9b 	bl	800146c <fatNextClus>
 8002536:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
				fatSetNextClus(tempClus, 0x00000000);
 800253a:	2100      	movs	r1, #0
 800253c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8002540:	f7fe ffb0 	bl	80014a4 <fatSetNextClus>
			while (fileClus < FAT_EOC) {
 8002544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002548:	4a07      	ldr	r2, [pc, #28]	; (8002568 <fileDelete+0x1ec>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d9eb      	bls.n	8002526 <fileDelete+0x1aa>
			}
			// updateFSInfo(startCluster(tempFile));
			return true;
 800254e:	2301      	movs	r3, #1
 8002550:	e002      	b.n	8002558 <fileDelete+0x1dc>
		}
		return false;
 8002552:	2300      	movs	r3, #0
 8002554:	e000      	b.n	8002558 <fileDelete+0x1dc>
	}
	return false;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	37a4      	adds	r7, #164	; 0xa4
 800255c:	46bd      	mov	sp, r7
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002560:	4ec4ec4f 	.word	0x4ec4ec4f
 8002564:	200000e8 	.word	0x200000e8
 8002568:	0ffffff7 	.word	0x0ffffff7

0800256c <mySdFat_init>:

/**
 * @brief Funtion to initialize SD Cart and FAT parameters.
 * @return true/fasle returns true upon successful initialization;Otherse returs false.
 */
bool mySdFat_init() {
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0

	if (SD_init() == SD_INIT_ERROR)
 8002570:	f7fe fb80 	bl	8000c74 <SD_init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b02      	cmp	r3, #2
 8002578:	d101      	bne.n	800257e <mySdFat_init+0x12>
		return false;
 800257a:	2300      	movs	r3, #0
 800257c:	e040      	b.n	8002600 <mySdFat_init+0x94>

	if (getBootSecParams()) {
 800257e:	f7fe fe4d 	bl	800121c <getBootSecParams>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d03a      	beq.n	80025fe <mySdFat_init+0x92>

		FatStartSector = BOOT_SEC_START + params.BPB_RsvdSecCnt; // 0X2020
 8002588:	4b1e      	ldr	r3, [pc, #120]	; (8002604 <mySdFat_init+0x98>)
 800258a:	889b      	ldrh	r3, [r3, #4]
 800258c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002590:	461a      	mov	r2, r3
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <mySdFat_init+0x9c>)
 8002594:	601a      	str	r2, [r3, #0]

		FatSectorsCnt = params.BPB_FATSz32 * params.BPB_NumFATs;
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <mySdFat_init+0x98>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <mySdFat_init+0x98>)
 800259c:	7992      	ldrb	r2, [r2, #6]
 800259e:	fb02 f303 	mul.w	r3, r2, r3
 80025a2:	4a1a      	ldr	r2, [pc, #104]	; (800260c <mySdFat_init+0xa0>)
 80025a4:	6013      	str	r3, [r2, #0]

		RootDirStartSector = FatStartSector + FatSectorsCnt;
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <mySdFat_init+0x9c>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b18      	ldr	r3, [pc, #96]	; (800260c <mySdFat_init+0xa0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	4a17      	ldr	r2, [pc, #92]	; (8002610 <mySdFat_init+0xa4>)
 80025b2:	6013      	str	r3, [r2, #0]

		RootDirSectors = (32 * params.BPB_RootEntCnt + params.BPB_BytesPerSec
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <mySdFat_init+0x98>)
 80025b6:	891b      	ldrh	r3, [r3, #8]
 80025b8:	015b      	lsls	r3, r3, #5
 80025ba:	4a12      	ldr	r2, [pc, #72]	; (8002604 <mySdFat_init+0x98>)
 80025bc:	8812      	ldrh	r2, [r2, #0]
 80025be:	4413      	add	r3, r2
				- 1) / params.BPB_BytesPerSec; // 0 for FAT32
 80025c0:	3b01      	subs	r3, #1
 80025c2:	4a10      	ldr	r2, [pc, #64]	; (8002604 <mySdFat_init+0x98>)
 80025c4:	8812      	ldrh	r2, [r2, #0]
 80025c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80025ca:	461a      	mov	r2, r3
		RootDirSectors = (32 * params.BPB_RootEntCnt + params.BPB_BytesPerSec
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <mySdFat_init+0xa8>)
 80025ce:	601a      	str	r2, [r3, #0]

		DataStartSector = RootDirStartSector + RootDirSectors; // 0X96AE
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <mySdFat_init+0xa4>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <mySdFat_init+0xa8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <mySdFat_init+0xac>)
 80025dc:	6013      	str	r3, [r2, #0]

		DataSectorsCnt = params.BPB_TotSec32 - DataStartSector;
 80025de:	4b09      	ldr	r3, [pc, #36]	; (8002604 <mySdFat_init+0x98>)
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <mySdFat_init+0xac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <mySdFat_init+0xb0>)
 80025ea:	6013      	str	r3, [r2, #0]

		if (getFatType() != FAT32)
 80025ec:	f7fe feea 	bl	80013c4 <getFatType>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d001      	beq.n	80025fa <mySdFat_init+0x8e>
			return false;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e002      	b.n	8002600 <mySdFat_init+0x94>

		return true;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <mySdFat_init+0x94>
	}
	return false;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200000c0 	.word	0x200000c0
 8002608:	200002e8 	.word	0x200002e8
 800260c:	200002ec 	.word	0x200002ec
 8002610:	200002f0 	.word	0x200002f0
 8002614:	200002f4 	.word	0x200002f4
 8002618:	200002f8 	.word	0x200002f8
 800261c:	200002fc 	.word	0x200002fc

08002620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002624:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <HAL_Init+0x40>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0d      	ldr	r2, [pc, #52]	; (8002660 <HAL_Init+0x40>)
 800262a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_Init+0x40>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <HAL_Init+0x40>)
 8002636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800263a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_Init+0x40>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <HAL_Init+0x40>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f000 f931 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264e:	200f      	movs	r0, #15
 8002650:	f000 f808 	bl	8002664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002654:	f7fe f828 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00

08002664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <HAL_InitTick+0x54>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <HAL_InitTick+0x58>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267a:	fbb3 f3f1 	udiv	r3, r3, r1
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f93b 	bl	80028fe <HAL_SYSTICK_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00e      	b.n	80026b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d80a      	bhi.n	80026ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002698:	2200      	movs	r2, #0
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a0:	f000 f911 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a4:	4a06      	ldr	r2, [pc, #24]	; (80026c0 <HAL_InitTick+0x5c>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000000 	.word	0x20000000
 80026bc:	20000010 	.word	0x20000010
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_IncTick+0x20>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_IncTick+0x24>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_IncTick+0x24>)
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000010 	.word	0x20000010
 80026e8:	20000384 	.word	0x20000384

080026ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <HAL_GetTick+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000384 	.word	0x20000384

08002704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff ffee 	bl	80026ec <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271c:	d005      	beq.n	800272a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_Delay+0x44>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800272a:	bf00      	nop
 800272c:	f7ff ffde 	bl	80026ec <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8f7      	bhi.n	800272c <HAL_Delay+0x28>
  {
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000010 	.word	0x20000010

0800274c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002768:	4013      	ands	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277e:	4a04      	ldr	r2, [pc, #16]	; (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	60d3      	str	r3, [r2, #12]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <__NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	; (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff47 	bl	800274c <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff5c 	bl	8002794 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffb0 	bl	800286c <SysTick_Config>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_FLASH_Program+0xa0>)
 800292c:	7e1b      	ldrb	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_FLASH_Program+0x1e>
 8002932:	2302      	movs	r3, #2
 8002934:	e03b      	b.n	80029ae <HAL_FLASH_Program+0x96>
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_FLASH_Program+0xa0>)
 8002938:	2201      	movs	r2, #1
 800293a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800293c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002940:	f000 f870 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002944:	4603      	mov	r3, r0
 8002946:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002948:	7dfb      	ldrb	r3, [r7, #23]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12b      	bne.n	80029a6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002954:	783b      	ldrb	r3, [r7, #0]
 8002956:	4619      	mov	r1, r3
 8002958:	68b8      	ldr	r0, [r7, #8]
 800295a:	f000 f91b 	bl	8002b94 <FLASH_Program_Byte>
 800295e:	e016      	b.n	800298e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002966:	883b      	ldrh	r3, [r7, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	68b8      	ldr	r0, [r7, #8]
 800296c:	f000 f8ee 	bl	8002b4c <FLASH_Program_HalfWord>
 8002970:	e00d      	b.n	800298e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d105      	bne.n	8002984 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	68b8      	ldr	r0, [r7, #8]
 800297e:	f000 f8c3 	bl	8002b08 <FLASH_Program_Word>
 8002982:	e004      	b.n	800298e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002988:	68b8      	ldr	r0, [r7, #8]
 800298a:	f000 f88b 	bl	8002aa4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800298e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002992:	f000 f847 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002996:	4603      	mov	r3, r0
 8002998:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <HAL_FLASH_Program+0xa4>)
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	4a07      	ldr	r2, [pc, #28]	; (80029bc <HAL_FLASH_Program+0xa4>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029a6:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <HAL_FLASH_Program+0xa0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000388 	.word	0x20000388
 80029bc:	40023c00 	.word	0x40023c00

080029c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80029ca:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_FLASH_Unlock+0x38>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da0b      	bge.n	80029ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_FLASH_Unlock+0x38>)
 80029d4:	4a09      	ldr	r2, [pc, #36]	; (80029fc <HAL_FLASH_Unlock+0x3c>)
 80029d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <HAL_FLASH_Unlock+0x38>)
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_FLASH_Unlock+0x40>)
 80029dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_FLASH_Unlock+0x38>)
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	da01      	bge.n	80029ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80029ea:	79fb      	ldrb	r3, [r7, #7]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40023c00 	.word	0x40023c00
 80029fc:	45670123 	.word	0x45670123
 8002a00:	cdef89ab 	.word	0xcdef89ab

08002a04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_FLASH_Lock+0x1c>)
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <HAL_FLASH_Lock+0x1c>)
 8002a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40023c00 	.word	0x40023c00

08002a24 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <FLASH_WaitForLastOperation+0x78>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002a36:	f7ff fe59 	bl	80026ec <HAL_GetTick>
 8002a3a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002a3c:	e010      	b.n	8002a60 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a44:	d00c      	beq.n	8002a60 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <FLASH_WaitForLastOperation+0x38>
 8002a4c:	f7ff fe4e 	bl	80026ec <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d201      	bcs.n	8002a60 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e019      	b.n	8002a94 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <FLASH_WaitForLastOperation+0x7c>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1e8      	bne.n	8002a3e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <FLASH_WaitForLastOperation+0x7c>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <FLASH_WaitForLastOperation+0x7c>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <FLASH_WaitForLastOperation+0x7c>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002a8a:	f000 f8a5 	bl	8002bd8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
  
}  
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000388 	.word	0x20000388
 8002aa0:	40023c00 	.word	0x40023c00

08002aa4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <FLASH_Program_DoubleWord+0x60>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <FLASH_Program_DoubleWord+0x60>)
 8002ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <FLASH_Program_DoubleWord+0x60>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <FLASH_Program_DoubleWord+0x60>)
 8002ac2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002ac6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <FLASH_Program_DoubleWord+0x60>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <FLASH_Program_DoubleWord+0x60>)
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002ada:	f3bf 8f6f 	isb	sy
}
 8002ade:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	000a      	movs	r2, r1
 8002aee:	2300      	movs	r3, #0
 8002af0:	68f9      	ldr	r1, [r7, #12]
 8002af2:	3104      	adds	r1, #4
 8002af4:	4613      	mov	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	40023c00 	.word	0x40023c00

08002b08 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <FLASH_Program_Word+0x40>)
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <FLASH_Program_Word+0x40>)
 8002b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <FLASH_Program_Word+0x40>)
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <FLASH_Program_Word+0x40>)
 8002b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002b2a:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <FLASH_Program_Word+0x40>)
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	4a06      	ldr	r2, [pc, #24]	; (8002b48 <FLASH_Program_Word+0x40>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	601a      	str	r2, [r3, #0]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40023c00 	.word	0x40023c00

08002b4c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <FLASH_Program_HalfWord+0x44>)
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	; (8002b90 <FLASH_Program_HalfWord+0x44>)
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002b64:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <FLASH_Program_HalfWord+0x44>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <FLASH_Program_HalfWord+0x44>)
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <FLASH_Program_HalfWord+0x44>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	4a06      	ldr	r2, [pc, #24]	; (8002b90 <FLASH_Program_HalfWord+0x44>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	801a      	strh	r2, [r3, #0]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <FLASH_Program_Byte+0x40>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	4a0b      	ldr	r2, [pc, #44]	; (8002bd4 <FLASH_Program_Byte+0x40>)
 8002ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002baa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002bac:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <FLASH_Program_Byte+0x40>)
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <FLASH_Program_Byte+0x40>)
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <FLASH_Program_Byte+0x40>)
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	4a06      	ldr	r2, [pc, #24]	; (8002bd4 <FLASH_Program_Byte+0x40>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	701a      	strb	r2, [r3, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40023c00 	.word	0x40023c00

08002bd8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002bdc:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002be8:	4b2d      	ldr	r3, [pc, #180]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f043 0310 	orr.w	r3, r3, #16
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002bf2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002bf4:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002bf6:	2210      	movs	r2, #16
 8002bf8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002bfa:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002c06:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f043 0308 	orr.w	r3, r3, #8
 8002c0e:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c10:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002c12:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002c14:	2220      	movs	r2, #32
 8002c16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002c18:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f043 0302 	orr.w	r3, r3, #2
 8002c4a:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c4c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c6a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c72:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002c74:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002c80:	4b07      	ldr	r3, [pc, #28]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f043 0320 	orr.w	r3, r3, #32
 8002c88:	4a05      	ldr	r2, [pc, #20]	; (8002ca0 <FLASH_SetErrorCode+0xc8>)
 8002c8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002c8c:	4b03      	ldr	r3, [pc, #12]	; (8002c9c <FLASH_SetErrorCode+0xc4>)
 8002c8e:	2202      	movs	r2, #2
 8002c90:	60da      	str	r2, [r3, #12]
  }
}
 8002c92:	bf00      	nop
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40023c00 	.word	0x40023c00
 8002ca0:	20000388 	.word	0x20000388

08002ca4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_FLASHEx_Erase+0xd8>)
 8002cb8:	7e1b      	ldrb	r3, [r3, #24]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_FLASHEx_Erase+0x1e>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e058      	b.n	8002d74 <HAL_FLASHEx_Erase+0xd0>
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_FLASHEx_Erase+0xd8>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ccc:	f7ff feaa 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d148      	bne.n	8002d6c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ce0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d115      	bne.n	8002d16 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f000 f844 	bl	8002d84 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002cfc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d00:	f7ff fe90 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002d04:	4603      	mov	r3, r0
 8002d06:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <HAL_FLASHEx_Erase+0xdc>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <HAL_FLASHEx_Erase+0xdc>)
 8002d0e:	f023 0304 	bic.w	r3, r3, #4
 8002d12:	6113      	str	r3, [r2, #16]
 8002d14:	e028      	b.n	8002d68 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	e01c      	b.n	8002d58 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	4619      	mov	r1, r3
 8002d26:	68b8      	ldr	r0, [r7, #8]
 8002d28:	f000 f850 	bl	8002dcc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002d2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002d30:	f7ff fe78 	bl	8002a24 <FLASH_WaitForLastOperation>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_FLASHEx_Erase+0xdc>)
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <HAL_FLASHEx_Erase+0xdc>)
 8002d3e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002d42:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	601a      	str	r2, [r3, #0]
          break;
 8002d50:	e00a      	b.n	8002d68 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3301      	adds	r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4413      	add	r3, r2
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d3da      	bcc.n	8002d1e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002d68:	f000 f878 	bl	8002e5c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <HAL_FLASHEx_Erase+0xd8>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	761a      	strb	r2, [r3, #24]

  return status;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000388 	.word	0x20000388
 8002d80:	40023c00 	.word	0x40023c00

08002d84 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	6039      	str	r1, [r7, #0]
 8002d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d90:	4b0d      	ldr	r3, [pc, #52]	; (8002dc8 <FLASH_MassErase+0x44>)
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	4a0c      	ldr	r2, [pc, #48]	; (8002dc8 <FLASH_MassErase+0x44>)
 8002d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <FLASH_MassErase+0x44>)
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <FLASH_MassErase+0x44>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <FLASH_MassErase+0x44>)
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	4313      	orrs	r3, r2
 8002db2:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <FLASH_MassErase+0x44>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6113      	str	r3, [r2, #16]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023c00 	.word	0x40023c00

08002dcc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	e010      	b.n	8002e0a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d103      	bne.n	8002df6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e009      	b.n	8002e0a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d103      	bne.n	8002e04 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e002      	b.n	8002e0a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002e04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	490f      	ldr	r1, [pc, #60]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002e22:	4b0d      	ldr	r3, [pc, #52]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	4a0c      	ldr	r2, [pc, #48]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e28:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002e2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4313      	orrs	r3, r2
 8002e38:	4a07      	ldr	r2, [pc, #28]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e3a:	f043 0302 	orr.w	r3, r3, #2
 8002e3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <FLASH_Erase_Sector+0x8c>)
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	6113      	str	r3, [r2, #16]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	40023c00 	.word	0x40023c00

08002e5c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002e60:	4b20      	ldr	r3, [pc, #128]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d017      	beq.n	8002e9c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e76:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a19      	ldr	r2, [pc, #100]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e8e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e90:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a13      	ldr	r2, [pc, #76]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002ea8:	4b0e      	ldr	r3, [pc, #56]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002eae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eb2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002eba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a07      	ldr	r2, [pc, #28]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002eca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a04      	ldr	r2, [pc, #16]	; (8002ee4 <FLASH_FlushCaches+0x88>)
 8002ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed6:	6013      	str	r3, [r2, #0]
  }
}
 8002ed8:	bf00      	nop
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40023c00 	.word	0x40023c00

08002ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	; 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e159      	b.n	80031b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	f040 8148 	bne.w	80031b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d005      	beq.n	8002f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d130      	bne.n	8002f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f70:	2201      	movs	r2, #1
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 0201 	and.w	r2, r3, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d017      	beq.n	8002fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d123      	bne.n	800302c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	08da      	lsrs	r2, r3, #3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3208      	adds	r2, #8
 8002fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	08da      	lsrs	r2, r3, #3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3208      	adds	r2, #8
 8003026:	69b9      	ldr	r1, [r7, #24]
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	2203      	movs	r2, #3
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 0203 	and.w	r2, r3, #3
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 80a2 	beq.w	80031b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <HAL_GPIO_Init+0x2e8>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	4a56      	ldr	r2, [pc, #344]	; (80031d0 <HAL_GPIO_Init+0x2e8>)
 8003078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307c:	6453      	str	r3, [r2, #68]	; 0x44
 800307e:	4b54      	ldr	r3, [pc, #336]	; (80031d0 <HAL_GPIO_Init+0x2e8>)
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003086:	60fb      	str	r3, [r7, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800308a:	4a52      	ldr	r2, [pc, #328]	; (80031d4 <HAL_GPIO_Init+0x2ec>)
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	089b      	lsrs	r3, r3, #2
 8003090:	3302      	adds	r3, #2
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a49      	ldr	r2, [pc, #292]	; (80031d8 <HAL_GPIO_Init+0x2f0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d019      	beq.n	80030ea <HAL_GPIO_Init+0x202>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_GPIO_Init+0x2f4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_GPIO_Init+0x1fe>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a47      	ldr	r2, [pc, #284]	; (80031e0 <HAL_GPIO_Init+0x2f8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d00d      	beq.n	80030e2 <HAL_GPIO_Init+0x1fa>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a46      	ldr	r2, [pc, #280]	; (80031e4 <HAL_GPIO_Init+0x2fc>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d007      	beq.n	80030de <HAL_GPIO_Init+0x1f6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a45      	ldr	r2, [pc, #276]	; (80031e8 <HAL_GPIO_Init+0x300>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d101      	bne.n	80030da <HAL_GPIO_Init+0x1f2>
 80030d6:	2304      	movs	r3, #4
 80030d8:	e008      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030da:	2307      	movs	r3, #7
 80030dc:	e006      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030de:	2303      	movs	r3, #3
 80030e0:	e004      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_GPIO_Init+0x204>
 80030ea:	2300      	movs	r3, #0
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	f002 0203 	and.w	r2, r2, #3
 80030f2:	0092      	lsls	r2, r2, #2
 80030f4:	4093      	lsls	r3, r2
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030fc:	4935      	ldr	r1, [pc, #212]	; (80031d4 <HAL_GPIO_Init+0x2ec>)
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	3302      	adds	r3, #2
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800310a:	4b38      	ldr	r3, [pc, #224]	; (80031ec <HAL_GPIO_Init+0x304>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800312e:	4a2f      	ldr	r2, [pc, #188]	; (80031ec <HAL_GPIO_Init+0x304>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003134:	4b2d      	ldr	r3, [pc, #180]	; (80031ec <HAL_GPIO_Init+0x304>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003158:	4a24      	ldr	r2, [pc, #144]	; (80031ec <HAL_GPIO_Init+0x304>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <HAL_GPIO_Init+0x304>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003182:	4a1a      	ldr	r2, [pc, #104]	; (80031ec <HAL_GPIO_Init+0x304>)
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003188:	4b18      	ldr	r3, [pc, #96]	; (80031ec <HAL_GPIO_Init+0x304>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ac:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <HAL_GPIO_Init+0x304>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	2b0f      	cmp	r3, #15
 80031bc:	f67f aea2 	bls.w	8002f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40013800 	.word	0x40013800
 80031d8:	40020000 	.word	0x40020000
 80031dc:	40020400 	.word	0x40020400
 80031e0:	40020800 	.word	0x40020800
 80031e4:	40020c00 	.word	0x40020c00
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40013c00 	.word	0x40013c00

080031f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003200:	787b      	ldrb	r3, [r7, #1]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800320c:	e003      	b.n	8003216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	619a      	str	r2, [r3, #24]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003234:	887a      	ldrh	r2, [r7, #2]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	041a      	lsls	r2, r3, #16
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43d9      	mvns	r1, r3
 8003240:	887b      	ldrh	r3, [r7, #2]
 8003242:	400b      	ands	r3, r1
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	619a      	str	r2, [r3, #24]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e267      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d075      	beq.n	8003362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d00c      	beq.n	800329c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d112      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329a:	d10b      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05b      	beq.n	8003360 <HAL_RCC_OscConfig+0x108>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d157      	bne.n	8003360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e242      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x74>
 80032be:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a75      	ldr	r2, [pc, #468]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x98>
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6f      	ldr	r2, [pc, #444]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6c      	ldr	r2, [pc, #432]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032f0:	4b69      	ldr	r3, [pc, #420]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a68      	ldr	r2, [pc, #416]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a65      	ldr	r2, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7ff f9ec 	bl	80026ec <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff f9e8 	bl	80026ec <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e207      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xc0>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7ff f9d8 	bl	80026ec <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7ff f9d4 	bl	80026ec <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1f3      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0xe8>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800336e:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1c7      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4937      	ldr	r1, [pc, #220]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCC_OscConfig+0x244>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7ff f98d 	bl	80026ec <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d6:	f7ff f989 	bl	80026ec <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1a8      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4925      	ldr	r1, [pc, #148]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_OscConfig+0x244>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7ff f96c 	bl	80026ec <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003418:	f7ff f968 	bl	80026ec <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e187      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d036      	beq.n	80034b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7ff f94c 	bl	80026ec <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7ff f948 	bl	80026ec <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e167      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x200>
 8003476:	e01b      	b.n	80034b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7ff f935 	bl	80026ec <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003484:	e00e      	b.n	80034a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003486:	f7ff f931 	bl	80026ec <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d907      	bls.n	80034a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e150      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 8003498:	40023800 	.word	0x40023800
 800349c:	42470000 	.word	0x42470000
 80034a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ea      	bne.n	8003486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8097 	beq.w	80035ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b7d      	ldr	r3, [pc, #500]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a7c      	ldr	r2, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b7a      	ldr	r3, [pc, #488]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b77      	ldr	r3, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b74      	ldr	r3, [pc, #464]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a73      	ldr	r2, [pc, #460]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7ff f8f1 	bl	80026ec <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7ff f8ed 	bl	80026ec <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e10c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x2ea>
 8003534:	4b64      	ldr	r3, [pc, #400]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a63      	ldr	r2, [pc, #396]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x30c>
 800354a:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a5e      	ldr	r2, [pc, #376]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003564:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a57      	ldr	r2, [pc, #348]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d015      	beq.n	80035b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7ff f8b2 	bl	80026ec <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7ff f8ae 	bl	80026ec <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0cb      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	4b49      	ldr	r3, [pc, #292]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ee      	beq.n	800358c <HAL_RCC_OscConfig+0x334>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7ff f89c 	bl	80026ec <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7ff f898 	bl	80026ec <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0b5      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ee      	bne.n	80035b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a1 	beq.w	8003738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d05c      	beq.n	80036bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d141      	bne.n	800368e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7ff f86c 	bl	80026ec <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7ff f868 	bl	80026ec <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e087      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7ff f841 	bl	80026ec <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7ff f83d 	bl	80026ec <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e05c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x416>
 800368c:	e054      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7ff f82a 	bl	80026ec <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7ff f826 	bl	80026ec <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e045      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x444>
 80036ba:	e03d      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e038      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x4ec>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d028      	beq.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d121      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d11a      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800370a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370c:	4293      	cmp	r3, r2
 800370e:	d111      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d107      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0cc      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d90c      	bls.n	8003784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b63      	ldr	r3, [pc, #396]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0b8      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800379c:	4b59      	ldr	r3, [pc, #356]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a58      	ldr	r2, [pc, #352]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c0:	4b50      	ldr	r3, [pc, #320]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	494d      	ldr	r1, [pc, #308]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d044      	beq.n	8003868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d119      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e067      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003826:	4b37      	ldr	r3, [pc, #220]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4934      	ldr	r1, [pc, #208]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003838:	f7fe ff58 	bl	80026ec <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	e00a      	b.n	8003856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7fe ff54 	bl	80026ec <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e04f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 020c 	and.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	429a      	cmp	r2, r3
 8003866:	d1eb      	bne.n	8003840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d20c      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e032      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4916      	ldr	r1, [pc, #88]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	490e      	ldr	r1, [pc, #56]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ce:	f000 f821 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	490a      	ldr	r1, [pc, #40]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	5ccb      	ldrb	r3, [r1, r3]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe feb8 	bl	8002664 <HAL_InitTick>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023c00 	.word	0x40023c00
 8003904:	40023800 	.word	0x40023800
 8003908:	08004164 	.word	0x08004164
 800390c:	20000000 	.word	0x20000000
 8003910:	2000000c 	.word	0x2000000c

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003918:	b090      	sub	sp, #64	; 0x40
 800391a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
 8003920:	2300      	movs	r3, #0
 8003922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003924:	2300      	movs	r3, #0
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392c:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d00d      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x40>
 8003938:	2b08      	cmp	r3, #8
 800393a:	f200 80a1 	bhi.w	8003a80 <HAL_RCC_GetSysClockFreq+0x16c>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x34>
 8003942:	2b04      	cmp	r3, #4
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x3a>
 8003946:	e09b      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x184>)
 800394a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800394c:	e09b      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394e:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003950:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003952:	e098      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4b4f      	ldr	r3, [pc, #316]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800395e:	4b4d      	ldr	r3, [pc, #308]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d028      	beq.n	80039bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396a:	4b4a      	ldr	r3, [pc, #296]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	2200      	movs	r2, #0
 8003972:	623b      	str	r3, [r7, #32]
 8003974:	627a      	str	r2, [r7, #36]	; 0x24
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800397c:	2100      	movs	r1, #0
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003980:	fb03 f201 	mul.w	r2, r3, r1
 8003984:	2300      	movs	r3, #0
 8003986:	fb00 f303 	mul.w	r3, r0, r3
 800398a:	4413      	add	r3, r2
 800398c:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x188>)
 800398e:	fba0 1202 	umull	r1, r2, r0, r2
 8003992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003994:	460a      	mov	r2, r1
 8003996:	62ba      	str	r2, [r7, #40]	; 0x28
 8003998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800399a:	4413      	add	r3, r2
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	2200      	movs	r2, #0
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	61fa      	str	r2, [r7, #28]
 80039a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039ae:	f7fc fc19 	bl	80001e4 <__aeabi_uldivmod>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4613      	mov	r3, r2
 80039b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039ba:	e053      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039bc:	4b35      	ldr	r3, [pc, #212]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	2200      	movs	r2, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	617a      	str	r2, [r7, #20]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039ce:	f04f 0b00 	mov.w	fp, #0
 80039d2:	4652      	mov	r2, sl
 80039d4:	465b      	mov	r3, fp
 80039d6:	f04f 0000 	mov.w	r0, #0
 80039da:	f04f 0100 	mov.w	r1, #0
 80039de:	0159      	lsls	r1, r3, #5
 80039e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039e4:	0150      	lsls	r0, r2, #5
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	ebb2 080a 	subs.w	r8, r2, sl
 80039ee:	eb63 090b 	sbc.w	r9, r3, fp
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a06:	ebb2 0408 	subs.w	r4, r2, r8
 8003a0a:	eb63 0509 	sbc.w	r5, r3, r9
 8003a0e:	f04f 0200 	mov.w	r2, #0
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	00eb      	lsls	r3, r5, #3
 8003a18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a1c:	00e2      	lsls	r2, r4, #3
 8003a1e:	4614      	mov	r4, r2
 8003a20:	461d      	mov	r5, r3
 8003a22:	eb14 030a 	adds.w	r3, r4, sl
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	eb45 030b 	adc.w	r3, r5, fp
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a3a:	4629      	mov	r1, r5
 8003a3c:	028b      	lsls	r3, r1, #10
 8003a3e:	4621      	mov	r1, r4
 8003a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a44:	4621      	mov	r1, r4
 8003a46:	028a      	lsls	r2, r1, #10
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	2200      	movs	r2, #0
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	60fa      	str	r2, [r7, #12]
 8003a54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a58:	f7fc fbc4 	bl	80001e4 <__aeabi_uldivmod>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4613      	mov	r3, r2
 8003a62:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	3301      	adds	r3, #1
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a82:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3740      	adds	r7, #64	; 0x40
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	00f42400 	.word	0x00f42400
 8003a9c:	017d7840 	.word	0x017d7840

08003aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e07b      	b.n	8003baa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ac2:	d009      	beq.n	8003ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	61da      	str	r2, [r3, #28]
 8003aca:	e005      	b.n	8003ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fc fe00 	bl	80006f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b0e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5c:	ea42 0103 	orr.w	r1, r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	0c1b      	lsrs	r3, r3, #16
 8003b76:	f003 0104 	and.w	r1, r3, #4
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	f003 0210 	and.w	r2, r3, #16
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b08c      	sub	sp, #48	; 0x30
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d101      	bne.n	8003bd8 <HAL_SPI_TransmitReceive+0x26>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e198      	b.n	8003f0a <HAL_SPI_TransmitReceive+0x358>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003be0:	f7fe fd84 	bl	80026ec <HAL_GetTick>
 8003be4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003bfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d00f      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x70>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c08:	d107      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x68>
 8003c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c20:	e16d      	b.n	8003efe <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x82>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_SPI_TransmitReceive+0x82>
 8003c2e:	887b      	ldrh	r3, [r7, #2]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d103      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c3a:	e160      	b.n	8003efe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d003      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2205      	movs	r2, #5
 8003c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	887a      	ldrh	r2, [r7, #2]
 8003c66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	887a      	ldrh	r2, [r7, #2]
 8003c72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d007      	beq.n	8003ca4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ca2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cac:	d17c      	bne.n	8003da8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_SPI_TransmitReceive+0x10a>
 8003cb6:	8b7b      	ldrh	r3, [r7, #26]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d16a      	bne.n	8003d92 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	881a      	ldrh	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	1c9a      	adds	r2, r3, #2
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce0:	e057      	b.n	8003d92 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d11b      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x176>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d016      	beq.n	8003d28 <HAL_SPI_TransmitReceive+0x176>
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d113      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	1c9a      	adds	r2, r3, #2
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d119      	bne.n	8003d6a <HAL_SPI_TransmitReceive+0x1b8>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d014      	beq.n	8003d6a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	b292      	uxth	r2, r2
 8003d4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	1c9a      	adds	r2, r3, #2
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d66:	2301      	movs	r3, #1
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d6a:	f7fe fcbf 	bl	80026ec <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d80b      	bhi.n	8003d92 <HAL_SPI_TransmitReceive+0x1e0>
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d80:	d007      	beq.n	8003d92 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003d90:	e0b5      	b.n	8003efe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1a2      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x130>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d19d      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x130>
 8003da6:	e080      	b.n	8003eaa <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <HAL_SPI_TransmitReceive+0x204>
 8003db0:	8b7b      	ldrh	r3, [r7, #26]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d16f      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	7812      	ldrb	r2, [r2, #0]
 8003dc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ddc:	e05b      	b.n	8003e96 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d11c      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x274>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d017      	beq.n	8003e26 <HAL_SPI_TransmitReceive+0x274>
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d114      	bne.n	8003e26 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	7812      	ldrb	r2, [r2, #0]
 8003e08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d119      	bne.n	8003e68 <HAL_SPI_TransmitReceive+0x2b6>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d014      	beq.n	8003e68 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e64:	2301      	movs	r3, #1
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e68:	f7fe fc40 	bl	80026ec <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d803      	bhi.n	8003e80 <HAL_SPI_TransmitReceive+0x2ce>
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7e:	d102      	bne.n	8003e86 <HAL_SPI_TransmitReceive+0x2d4>
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d107      	bne.n	8003e96 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003e94:	e033      	b.n	8003efe <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d19e      	bne.n	8003dde <HAL_SPI_TransmitReceive+0x22c>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d199      	bne.n	8003dde <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f8b8 	bl	8004024 <SPI_EndRxTxTransaction>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ec6:	e01a      	b.n	8003efe <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10a      	bne.n	8003ee6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ef4:	e003      	b.n	8003efe <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3730      	adds	r7, #48	; 0x30
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f24:	f7fe fbe2 	bl	80026ec <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4413      	add	r3, r2
 8003f32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f34:	f7fe fbda 	bl	80026ec <HAL_GetTick>
 8003f38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	015b      	lsls	r3, r3, #5
 8003f40:	0d1b      	lsrs	r3, r3, #20
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4a:	e054      	b.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f52:	d050      	beq.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f54:	f7fe fbca 	bl	80026ec <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d902      	bls.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d13d      	bne.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f82:	d111      	bne.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8c:	d004      	beq.n	8003f98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f96:	d107      	bne.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb0:	d10f      	bne.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e017      	b.n	8004016 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d19b      	bne.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000000 	.word	0x20000000

08004024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2201      	movs	r2, #1
 8004038:	2102      	movs	r1, #2
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff ff6a 	bl	8003f14 <SPI_WaitFlagStateUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f043 0220 	orr.w	r2, r3, #32
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e032      	b.n	80040bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004056:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <SPI_EndRxTxTransaction+0xa0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1b      	ldr	r2, [pc, #108]	; (80040c8 <SPI_EndRxTxTransaction+0xa4>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	0d5b      	lsrs	r3, r3, #21
 8004062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004074:	d112      	bne.n	800409c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2200      	movs	r2, #0
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff ff47 	bl	8003f14 <SPI_WaitFlagStateUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d016      	beq.n	80040ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e00f      	b.n	80040bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d0f2      	beq.n	800409c <SPI_EndRxTxTransaction+0x78>
 80040b6:	e000      	b.n	80040ba <SPI_EndRxTxTransaction+0x96>
        break;
 80040b8:	bf00      	nop
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000000 	.word	0x20000000
 80040c8:	165e9f81 	.word	0x165e9f81

080040cc <memset>:
 80040cc:	4402      	add	r2, r0
 80040ce:	4603      	mov	r3, r0
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d100      	bne.n	80040d6 <memset+0xa>
 80040d4:	4770      	bx	lr
 80040d6:	f803 1b01 	strb.w	r1, [r3], #1
 80040da:	e7f9      	b.n	80040d0 <memset+0x4>

080040dc <__libc_init_array>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	4d0d      	ldr	r5, [pc, #52]	; (8004114 <__libc_init_array+0x38>)
 80040e0:	4c0d      	ldr	r4, [pc, #52]	; (8004118 <__libc_init_array+0x3c>)
 80040e2:	1b64      	subs	r4, r4, r5
 80040e4:	10a4      	asrs	r4, r4, #2
 80040e6:	2600      	movs	r6, #0
 80040e8:	42a6      	cmp	r6, r4
 80040ea:	d109      	bne.n	8004100 <__libc_init_array+0x24>
 80040ec:	4d0b      	ldr	r5, [pc, #44]	; (800411c <__libc_init_array+0x40>)
 80040ee:	4c0c      	ldr	r4, [pc, #48]	; (8004120 <__libc_init_array+0x44>)
 80040f0:	f000 f818 	bl	8004124 <_init>
 80040f4:	1b64      	subs	r4, r4, r5
 80040f6:	10a4      	asrs	r4, r4, #2
 80040f8:	2600      	movs	r6, #0
 80040fa:	42a6      	cmp	r6, r4
 80040fc:	d105      	bne.n	800410a <__libc_init_array+0x2e>
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	f855 3b04 	ldr.w	r3, [r5], #4
 8004104:	4798      	blx	r3
 8004106:	3601      	adds	r6, #1
 8004108:	e7ee      	b.n	80040e8 <__libc_init_array+0xc>
 800410a:	f855 3b04 	ldr.w	r3, [r5], #4
 800410e:	4798      	blx	r3
 8004110:	3601      	adds	r6, #1
 8004112:	e7f2      	b.n	80040fa <__libc_init_array+0x1e>
 8004114:	0800417c 	.word	0x0800417c
 8004118:	0800417c 	.word	0x0800417c
 800411c:	0800417c 	.word	0x0800417c
 8004120:	08004180 	.word	0x08004180

08004124 <_init>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr

08004130 <_fini>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr
